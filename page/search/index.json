[{"content":"在已经有了一个以username.github.io的博客后，再建立多个个人博客。\ngithub 登录上自己的github，打开名字为username的仓库。 按如下图点击\n配置repositories 建好之后，点击repositories建一个新仓库\n我用的是master分支，所以我需要建一个master分支，然后将master设为默认分支。\n注意 记得修改settings中的pages的branch也要改为master否则最后页面是加载不出来的。选好之后要点击save。\n配置HUGO 和第一次搭建一样了。\n","date":"2023-08-05T00:00:00Z","image":"https://cheneycqg.github.io/post/buildsite/1_hu651b7ff9898671f9c1dd4846005797ec_868075_120x120_fill_q75_box_smart1.jpg","permalink":"https://cheneycqg.github.io/post/buildsite/","title":"一个github搭建多个博客"},{"content":" 很多同学发现，jackson并没有类似fastjson的JSON.parseObjec这样的，确实看起来很快的方法。要想解析json，你不得不new一个ObjectMapper，来处理真正的解析动作。\nJackson ​\t自从国产之光fastjson频频暴雷，jackson json的使用是越来越广泛了。尤其是spring家族把它搞成了默认的JSON处理包，jackson的使用数量更是呈爆炸式发展。\n​\t很多同学发现，jackson并没有类似fastjson的JSON.parseObjec这样的，确实看起来很快的方法。要想解析json，你不得不new一个ObjectMapper，来处理真正的解析动作。\n就像下面这样。\npublic String getCarString(Car car){ ObjectMapper objectMapper = new ObjectMapper(); String str = objectMapper.writeValueAsString(car); return str; } 这代码有问题吗？ 你要说它有问题，它确实能正确的执行。你要说它没问题，在追求性能的同学眼里，这肯定是一段十恶不赦的代码。\n一般的工具类，都是单例的，同时是线程安全的。ObjectMapper也不例外，它也是线程安全的，你可以并发的执行它，不会产生任何问题。\n这段代码，ObjectMapper在每次方法调用的时候，都会生成一个。那它除了造成一定的年轻代内存浪费之外，在执行时间上有没有什么硬伤呢？\nnew和不new，真的区别有那么大么？\n有一次，xjjdog隐晦的指出某段被频繁调用的代码问题，被小伙伴怒吼着拿出证据。\n证据？这得搬出Java中的基准测试工具JMH，才能一探究竟。\n​\tJMH(the Java Microbenchmark Harness) 就是这样一个能够做基准测试的工具。如果你通过我们一系列的工具，定位到了热点代码，要测试它的性能数据，评估改善情况，就可以交给JMH。它的测量精度非常高，最高可达到纳秒的级别。\n​\tJMH是一个jar包，它和单元测试框架JUnit非常的像，可以通过注解进行一些基础配置。这部分配置有很多是可以通过main方法的OptionsBuilder进行设置的。\n​\t上图是一个典型的JMH程序执行的内容。通过开启多个进程，多个线程，首先执行预热，然后执行迭代，最后汇总所有的测试数据进行分析。在执行前后，还可以根据粒度处理一些前置和后置操作。\nJMH测试结果 为了测试上面的场景，我们创造了下面的基准测试类。分为三个测试场景：\n直接在方法里new ObjectMapper 在全局共享一个ObjectMapper 使用ThreadLocal，每个线程一个ObjectMapper 这样的测试属于cpu密集型的。我的cpu有10核，直接就分配了10个线程的并发，cpu在测试期间跑的满满的。\n@BenchmarkMode({Mode.Throughput}) @OutputTimeUnit(TimeUnit.SECONDS) @State(Scope.Thread) @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS) @Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS) @Fork(1) @Threads(10) public class ObjectMapperTest { String json = \u0026#34;{ \\\u0026#34;color\\\u0026#34; : \\\u0026#34;Black\\\u0026#34;, \\\u0026#34;type\\\u0026#34; : \\\u0026#34;BMW\\\u0026#34; }\u0026#34;; @State(Scope.Benchmark) public static class BenchmarkState { ObjectMapper GLOBAL_MAP = new ObjectMapper(); ThreadLocal\u0026lt;ObjectMapper\u0026gt; GLOBAL_MAP_THREAD = new ThreadLocal\u0026lt;\u0026gt;(); } @Benchmark public Map globalTest(BenchmarkState state) throws Exception{ Map map = state.GLOBAL_MAP.readValue(json, Map.class); return map; } @Benchmark public Map globalTestThreadLocal(BenchmarkState state) throws Exception{ if(null == state.GLOBAL_MAP_THREAD.get()){ state.GLOBAL_MAP_THREAD.set(new ObjectMapper()); } Map map = state.GLOBAL_MAP_THREAD.get().readValue(json, Map.class); return map; } @Benchmark public Map localTest() throws Exception{ ObjectMapper objectMapper = new ObjectMapper(); Map map = objectMapper.readValue(json, Map.class); return map; } public static void main(String[] args) throws Exception { Options opts = new OptionsBuilder() .include(ObjectMapperTest.class.getSimpleName()) .resultFormat(ResultFormatType.CSV) .build(); new Runner(opts).run(); } } 测试结果如下。\nBenchmark Mode Cnt Score Error Units ObjectMapperTest.globalTest thrpt 5 25125094.559 ± 1754308.010 ops/s ObjectMapperTest.globalTestThreadLocal thrpt 5 31780573.549 ± 7779240.155 ops/s ObjectMapperTest.localTest thrpt 5 2131394.345 ± 216974.682 ops/s ​\t从测试结果可以看出，如果我们每次调用都new一个ObjectMapper，每秒可以执行200万次JSON解析；如果全局使用一个ObjectMapper，则每秒可以执行2000多万次，速度足足快了10倍。\n如果使用ThreadLocal的方式，每个线程给它分配一个解析器，则性能会有少许上升，但也没有达到非常夸张的地步。\n所以在项目中写代码的时候，我们只需要保证有一个全局的ObjectMapper就可以了。\n​\t当然，由于ObjectMapper有很多的特性需要配置，你可能会为不同的应用场景分配一个单独使用的ObjectMapper。总之，它的数量不需要太多，因为它是线程安全的。\n总结 ​\t所以结论就比较清晰了，我们只需要在整个项目里使用一个ObjectMapper就可以了，没必要傻不拉几的每次都new一个，毕竟性能差了10倍。如果你的JSON有很多自定义的配置，使用全局的变量更能凸显它的优势。\n​\t不要觉得这样做没有必要，保持良好的编码习惯永远是好的。高性能的代码都是点点滴滴积累起来的。不积跬步,无以至千里。不积小流,无以成江海，说的就是这个道理。\n","date":"2023-08-04T00:00:00Z","image":"https://cheneycqg.github.io/post/objectmapper/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu51c512477db83c60854cdbedad5439b5_362413_120x120_fill_box_smart1_3.png","permalink":"https://cheneycqg.github.io/post/objectmapper/","title":"ObjectMapper不要一直new啦！！！"},{"content":"的风格的风格\n","date":"2023-08-02T17:21:44+08:00","permalink":"https://cheneycqg.github.io/post/aa/","title":"Aa"},{"content":"This is test.\n","date":"2023-07-29T17:40:19+08:00","permalink":"https://cheneycqg.github.io/post/test/","title":"test"},{"content":"回顾 1. springboot概述 主要作用就是帮我们快速的构建庞大的JavaEE项目 特点： 版本锁定 起步依赖 自动配置 2. 搭建springboot项目 pom.xml 继承parent 导入xxx起步依赖（集合体） 启动类 @SpringBootApplication 配置文件 application.yml 3. yml配置文件 语法：严格区分大小写，使用缩进表示层级关系，属性值之前（冒号之间）必须有空格 格式： 普通类型 对象类型 集合类型\t读取配置文件： @Value Enviroment @ConfigurationProperties 4. springboot整合其它框架 springboot + springMVC + mybatisPlus + JSP等 一 SpringBoot 整合其它框架 1.0 整合FreeMark【掌握】 1.0.1 POM \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-freemarker\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 1.0.2 启动类以及Controller三层 @SpringBootApplication public class SpringbootAllApplication { public static void main(String[] args) { SpringApplication.run(SpringbootAllApplication.class, args); } } 1.0.3 视图解析配置 spring.freemarker.template-loader-path=classpath:/templates/ spring.freemarker.suffix=.ftlh 1.0.4 页面 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34; \u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Thymeleaf\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table border=\u0026#34;1px\u0026#34; width=\u0026#34;500px\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;编号\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;书名\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;#list users as user\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;${user.name}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;${user.age}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/#list\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1.0.5 常见配置 spring: freemarker: #设置编码格式 charset: utf-8 #设置文件后缀 suffix: .ftl #设置ftl文件路径 template-loader-path: classpath:/templates #关闭缓存，及时刷新，上线生产环境需要改为true cache: false 1.1 整合Thymeleaf【掌握】 1.1.1 简介 Thymeleaf是一个用于展示页面的模板引擎，通俗来讲，就是java工程师用于开发html页面的，之前我们学的是jsp也可以开发页面，但是springboot 推荐用Thymeleaf，为什么呢？\n原因有2个：\nThymeleaf运行效率比jsp高 Thymeleaf开发起来比jsp简单 1.1.2 搭建环境 第一步，创建java模块，导入依赖\n\u0026lt;dependencies\u0026gt; \u0026lt;!--thymeleaf起步依赖--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-thymeleaf\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 第二步，编写启动类\n第三步 ，Controller,Servce和Mapper\n@SpringBootApplication public class ThymeleafApp { public static void main(String[] args) { SpringApplication.run(ThymeleafApp.class, args); } } 1.1.3 视图解析器配置 springboot默认使用的就是Thymeleaf视图解析器\n执行页面跳转的时候，自动的从resource中的templates文件夹中找到对应的 xxx.html页面\nspringboot启动时，加载org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties资源属性类\n1.1.4 页面 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34; xmlns:th=\u0026#34;http://www.thymeleaf.org\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Thymeleaf\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table border=\u0026#34;1px\u0026#34; width=\u0026#34;500px\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;编号\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;书名\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;价格\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr th:each=\u0026#34;book : ${books}\u0026#34;\u0026gt; \u0026lt;td th:text=\u0026#34;${book.bid}\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td th:text=\u0026#34;${book.bname}\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td th:text=\u0026#34;${book.price}\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1.1.5 常见配置 #页面编码 spring.thymeleaf.encoding=UTF-8 #返回模板类型 spring.thymeleaf.servlet.content-type=text/html #开发时关闭缓存,不然没法看到实时页面 spring.thymeleaf.cache=false # 在构建URL时预先查看名称的前缀 （默认就是这个） spring.thymeleaf.prefix=classpath:/templates/ # 构建URL时附加查看名称的后缀.（默认就是 html的结尾的） spring.thymeleaf.suffix=.html 1.2 整合Swagger 1.2.1介绍 接口文档在线生成工具 1.2.2POM 注意Swagger2.x需要Springboot2.6.0以下版本 \u0026lt;!-- swagger2核心功能jar包--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.9.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 界面jar包,用于在浏览器端可以查看的界面 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger-ui\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.9.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 配置类 @Configuration public class SwaggerConfig { /** * 创建API应用 * apiInfo() 增加API相关信息 * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现， * 本例采用指定扫描的包路径来定义指定要建立API的目录。 * * @return */ @Bean public Docket createRestApi(){ /* * DocumentationType.SWAGGER_2 表示版本号是 swagger 2.0 * pathMapping 路径映射 * select 设置哪些接口暴露给Swagger展示 * 为当前包下controller生成API文档 * .apis(RequestHandlerSelectors.basePackage(\u0026#34;com.xh\u0026#34;)) * 为有@Api注解的Controller生成API文档 *.apis(RequestHandlerSelectors.withClassAnnotation(Api.class)) 为有@ApiOperation注解的方法生成API文档 *.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) * 为任何接口生成API文档 * .apis(RequestHandlerSelectors.any()) * * * 所有的controller都显示 * paths(PathSelectors.any()) * 所有controller都不显示 * paths(PathSelectors.none()) * 该正则表示匹配所有 * paths(PathSelectors.regex(\u0026#34;^[+-@=](.*?)\u0026#34;)) * 匹配/test-swagger2/开头的所有controller * paths(PathSelectors.ant(\u0026#34;/test-swagger2/**\u0026#34;)) * * * 指定构建api文档的详细信息的方法 * .apiInfo( * new ApiInfoBuilder().title() //标题 * .description() //描述 * .version() //版本号 * .contact( * new Contact( * \u0026#34;作者名字\u0026#34;, * \u0026#34;作者的网站\u0026#34;, * \u0026#34;作者的邮箱\u0026#34; * ) * ). //配置作者信息的 * license(). //描述谁认证的权限 * )licenseUrl(). 认证的权限的网址 * * * */ return new Docket(DocumentationType.SWAGGER_2). pathMapping(\u0026#34;/\u0026#34;). select().apis(RequestHandlerSelectors.basePackage(\u0026#34;com.zhyp\u0026#34;)). paths(PathSelectors.any()).build().apiInfo( new ApiInfoBuilder(). title(\u0026#34;SpringBoot整合Swagger\u0026#34;) .description(\u0026#34;这里是描述\u0026#34;). version(\u0026#34;1.0版本\u0026#34;). contact(new Contact( \u0026#34;xiaohao\u0026#34;, \u0026#34;www.xiaohao.com\u0026#34;, \u0026#34;1927701569@qq.com\u0026#34;)). license(\u0026#34;Apache 认证\u0026#34;). licenseUrl(\u0026#34;http://www.xiaohao.com\u0026#34;).build() ); } } 1.2.3启动类 @SpringBootApplication @EnableSwagger2 //开启Swagger2 public class SpringbootSwagger2Application { public static void main(String[] args) { SpringApplication.run(SpringbootSwagger2Application.class, args); } } 访问接口: http://localhost:端口号/项目名/swagger-ui.html 1.2.4 Swagger的注解 @Api\t表示对类的说明常用类上面 @ApiOperation\t说明方法的用途、作用\t方法上面 @ApiModel\t表示一个返回响应数据的信息\t响应类 @ApiModelProperty\t描述响应类的属性\t属性 1.3 整合Redis 1.什么是Redis? 一款基于内存的非关系型数据库(键值对数据库) 2.启动Redis: 服务端redis-server.exe(双击启动),默认端口6379 客户端redis-cli.exe(双击启动) 3.Redis基本命令: 通用命令: Keys * 查看所有的键 del key 删除某个键值对 flushall 清空所有库的所有键 flushdb 清空当前库所有键 select dbIndex(0-15) 切换数据库 String类型数据的命令 set key value 设置键值对 get key 根据键获取值 del key 删除某个键值对 incr key 为某个键的值加1 decr key 为某个键的值减1 incrby key number 为某个键的值加number decrby key number 为某个键的值减number List 命令 Set 命令 Hash user1: {name:jack,age:18} 命令 ZSet 排序集合 命令 4.使用Java客户端,Jedis来操作Redis \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;redis.clients\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jedis\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 测试Jedis的使用 @SpringBootTest class SpringbootRedisApplicationTests { @Test void testJedis() { Jedis jedis = new Jedis(\u0026#34;localhost\u0026#34;,6379); jedis.set(\u0026#34;address\u0026#34;,\u0026#34;beijing\u0026#34;); jedis.close(); } @Test void testJedis02() { Jedis jedis = new Jedis(\u0026#34;localhost\u0026#34;,6379); System.out.println(jedis.get(\u0026#34;address\u0026#34;)); jedis.close(); } @Test void testJedis03() { JedisPool jedisPool = new JedisPool(\u0026#34;localhost\u0026#34;,6379); Jedis jedis = jedisPool.getResource(); System.out.println(jedis.get(\u0026#34;address\u0026#34;)); jedis.close();//动态代理 装饰者设计模式 } } 1.3.1 简介 spring为了让开发者简化Jedis的操作，提供了spring-data-redis框架，它对reids底层开发包(Jedis)进行了高度封装，通过RedisTemplate对象实现了redis各种操作、异常处理及序列化，支持发布订阅等功能。\n1.3.2 搭建环境 ① 导入依赖 \u0026lt;!--redis 起步依赖--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-redis\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; ② 启动redis环境 ③ application.yml ③ 使用\n@RunWith(SpringRunner.class) @SpringBootTest public class RedisTest { @Autowired private RedisTemplate redisTemplate; // 将java对象序列化并存储到redis中 @Autowired private StringRedisTemplate stringRedisTemplate; // 将java对象转为字符串并存储到redis中 @Test public void test01() throws Exception { redisTemplate.opsForValue().set(\u0026#34;a1\u0026#34;, \u0026#34;hehe\u0026#34;); stringRedisTemplate.opsForValue().set(\u0026#34;a2\u0026#34;, \u0026#34;hehe\u0026#34;); } } //操作string类型 redisTemplate.opsForValue(); //操作hash类型 redisTemplate.opsForHash(); //操作list类型 redisTemplate.opsForList(); //操作set类型 redisTemplate.opsForSet(); //操作有序set类型 redisTemplate.opsForZSet(); 1.3.3 案例练习 需求\n使用redis对用户列表数据进行缓存优化\nUser UserService @Service public class UserService { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate redisTemplate; public List\u0026lt;User\u0026gt; findAll() { List\u0026lt;User\u0026gt; userList = null; if (redisTemplate.hasKey(\u0026#34;userList\u0026#34;)) { // 1.先查询缓存 userList = (List\u0026lt;User\u0026gt;) redisTemplate.opsForValue().get(\u0026#34;userList\u0026#34;); System.out.println(\u0026#34;查询缓存\u0026#34;); } else { // 2.在查询mysql，存入到redis中 userList = userMapper.selectList(null); redisTemplate.opsForValue().set(\u0026#34;userList\u0026#34;, userList); System.out.println(\u0026#34;查询数据库\u0026#34;); } return userList; } public User findById(Long id) { return userMapper.selectById(id); } } 1.4 整合安全框架 国内使用比较的多的安全框架有shiro和Spring security 主要功能是认证和授权 1.4.0 Spring security 依赖: 导入依赖后所有资源都被限制访问,如果想要关闭可以在启动类中排除@SpringBootApplication(exclude = SecurityAutoConfiguration.class) \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-security\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 1.4.1 基于配置文件创建用户 spring.security.user.name=jack spring.security.user.password=123 spring.security.user.roles=USER 1.4.2 基于内存创建用户 @Configuration public class WebSecurtyConfg extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder getPasswordEncoder(){ return NoOpPasswordEncoder.getInstance(); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { /** * 基于内存的方式，创建两个用户admin/1234，user/1234，zhyp/1234 * */ auth.inMemoryAuthentication() .withUser(\u0026#34;admin\u0026#34;)//用户名 .password(\u0026#34;1234\u0026#34;)//密码 .roles(\u0026#34;ADMIN\u0026#34;);//角色 auth.inMemoryAuthentication() .withUser(\u0026#34;user\u0026#34;)//用户名 .password(\u0026#34;1234\u0026#34;)//密码 .roles(\u0026#34;USER\u0026#34;);//角色 auth.inMemoryAuthentication() .withUser(\u0026#34;zhyp\u0026#34;)//用户名 .password(\u0026#34;1234\u0026#34;)//密码 .roles(\u0026#34;USER\u0026#34;,\u0026#34;ADMIN\u0026#34;);//角色 } } 1.4.3 基于数据库创建用户 //@Service public class AdminServiceImpl implements UserDetailsService { @Override public UserDetails loadUserByUsername(String name) throws UsernameNotFoundException { // 对用户权限进行封装 List\u0026lt;SimpleGrantedAuthority\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(new SimpleGrantedAuthority(\u0026#34;ROLE_ADMIN\u0026#34;)); // 返回封装的UserDetails用户详情类 System.out.println(\u0026#34;/////////////////////////\u0026#34;+name); UserDetails userDetails = new User(\u0026#34;ttt\u0026#34;, \u0026#34;1234\u0026#34;, list); return userDetails; } } @Configuration public class WebSecurtyConfg extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder getPasswordEncoder(){ return NoOpPasswordEncoder.getInstance(); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.userDetailsService(new AdminServiceImpl()); } } 1.4.4 权限验证 @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\u0026#34;/admin/**\u0026#34;) .access(\u0026#34;hasAnyRole(\u0026#39;ADMIN\u0026#39;)\u0026#34;) .antMatchers(\u0026#34;/user/**\u0026#34;) .access(\u0026#34;hasAnyRole(\u0026#39;USER\u0026#39;,\u0026#39;ADMIN\u0026#39;)\u0026#34;) .anyRequest().authenticated() .and() .formLogin().loginProcessingUrl(\u0026#34;/login\u0026#34;).permitAll(). and().cors().disable(); } 1.4.5 Springboot整合shiro 1.引入依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.shiro\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;shiro-spring-boot-web-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.8.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-thymeleaf\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 如果这时候什么都不做直接启动程序,会报错缺少Realm 2.配置核心\n经过配置Realm后,项目可以生成启动,但是任何资源都无法访问 @Configuration public class ShroConf { @Bean public Realm realm(){ TextConfigurationRealm realm = new TextConfigurationRealm(); //设置账户和密码 还有角色 realm.setUserDefinitions(\u0026#34;jack=123,user\\n admin=123,admin\u0026#34;); //授予角色权限 realm.setRoleDefinitions(\u0026#34;admin=read,write\\n user=read\u0026#34;); return realm; } } 3.继续配置\n#application.properties: 配置登陆页面的url 为/login shiro.loginUrl=/login //过滤和放行设置 @Bean public ShiroFilterChainDefinition shiroFilterChainDefinition(){ DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition(); //anon放行 不拦截 chainDefinition.addPathDefinition(\u0026#34;/login\u0026#34;,\u0026#34;anon\u0026#34;); //anon放行 不拦截 chainDefinition.addPathDefinition(\u0026#34;/doLogin\u0026#34;,\u0026#34;anon\u0026#34;); //需要认证 chainDefinition.addPathDefinition(\u0026#34;/**\u0026#34;,\u0026#34;authc\u0026#34;); return chainDefinition; } 设置放行后还是报错,因为没有/login这个地址 @RequestMapping(\u0026#34;/login\u0026#34;) public String login(){ return \u0026#34;login\u0026#34;; } 以上配置很麻烦,每个放行的/xxx都需要单独写一个RequestMapping @Configuration public class WebMvcConfig implements WebMvcConfigurer { @Override public void addViewControllers(ViewControllerRegistry registry) { registry.addViewController(\u0026#34;/login\u0026#34;).setViewName(\u0026#34;login\u0026#34;); registry.addViewController(\u0026#34;/index\u0026#34;).setViewName(\u0026#34;index\u0026#34;); //俩个参数 前面的是控制器 后面的是页面的名字 registry.addViewController(\u0026#34;/unauthorized\u0026#34;).setViewName(\u0026#34;unauthorized\u0026#34;); } } 4.登陆逻辑\n@RequestMapping(\u0026#34;/doLogin\u0026#34;) public String doLogin(String username, String pwd, Model model){ //使用shiro中提供的方法 UsernamePasswordToken token = new UsernamePasswordToken(username,pwd); //获取主体 Subject subject = SecurityUtils.getSubject(); //获取请求的用户 try{ subject.login(token); //登录 }catch(Exception ex){ model.addAttribute(\u0026#34;error\u0026#34;,\u0026#34;用户名或者密码错误了！！！\u0026#34;); ex.printStackTrace(); return \u0026#34;login\u0026#34;; } return \u0026#34;index\u0026#34;; } 5.其他逻辑\n@RequiresRoles(value = {\u0026#34;admin\u0026#34;,\u0026#34;user\u0026#34;},logical = Logical.OR) @RequestMapping(\u0026#34;/user\u0026#34;) public String user(){ //普通用户和管理员你都能访问 return \u0026#34;user\u0026#34;; } @RequiresRoles(\u0026#34;admin\u0026#34;) @RequestMapping(\u0026#34;/admin\u0026#34;) public String admin(){ //只有管理员才能访问 return \u0026#34;admin\u0026#34;; } 1.5 SpringBoot配置文件的位置 注意: 我们要把配置文件放在项目的根目录而不是模块的根目录 1.config下比不config优先级高 2.路径越靠外的优先级越高 1.6 SpingBoot多环境开发 1.6.1 分文件的多环境开发 StringBoot的配置文件命名规则： application-xx.properties/yaml/yml 在开发中我们通常会根据不同的场景创建不同名字的配置文件 application-dev.yaml #用于开发阶段的配置文件 application-test.yaml #用于测试阶段的配置文件 application-pro.yaml #用于上线阶段的配置文件 在主配置文件中激活生效的配置文件 #启动指定环境 spring: profiles: active: dev\t1.6.2 不分文件的多环境开发 #application.yaml配置文件 #启动指定环境 spring: profiles: active: dev --- #设置生产环境 spring: profiles: pro server: port: 88 --- #设置开发环境 spring: profiles: dev server: port: 89 --- #设置测试环境 spring: profiles: test server: port: 90 二 SpringBoot工作原理【面试】 思考一个问题：\n为什么加载了redis的starter之后，RedisTemplate对象会自动被new出来，可以@Autowired了呢？\n2.1 自动装配 观察@EnableAutoConfiguration 注解内部使用 @Import(AutoConfigurationImportSelector.class)读取META-INF/spring.factories，\n该配置文件中定义了大量的配置类，当 SpringBoot 应用启动时，会自动加载这些配置类，初始化Bean\n由于SpringBoot启动是会读取@SpringBootApplication注解\n而@SpringBootApplication包含了@EnableAutoConfiguration\n而@EnableAutoConfiguration注解引入AutoConfigurationImportSelector.class\n而AutoConfigurationImportSelector.class中有一个方法getCandidateConfigurations\n而getCandidateConfigurations方法读取META-INF/spring.factories\n所以我们只需要将自动配置类配置到我们项目的META-INF/spring.factories文件中即可\n2.2 装配Redis 并不是读取META-INF/spring.factories所有的Bean都会被初始化，在配置类中使用@Condition来加载满足条件的Bean\nConditionalOnClass：判断环境中是否有对应字节码文件才初始化Bean ConditionalOnBean：判断容器中是否有对应Bean对象才初始化Bean ConditionalOnMissingClass：判断环境中没有对应字节码才初始化Bean ConditionalOnMissingBean：判断环境中没有对应Bean才初始化Bean 2.3 知识小结 三 自定义启动器【大作业】 有了上面的一些知识点，我们可以自定义一个Redis的启动器 redis-spring-boot-starter`\n我们可参考MybatisPlus的启动器，因为MybatisPlus是第三方的（不是spring提供的）\n效果：在工程中只需要导入起步依赖，通过@Autowired注入\n3.1 分析MybatisPlus启动器 3.2 代码实现 xxxx-spring-boot-starter\n① 导入依赖 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.11\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-configuration-processor\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;redis.clients\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jedis\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; ② 编写JedisProperties @Data @ConfigurationProperties(\u0026#34;my.redis\u0026#34;) @Configuration public class JedisProperties { private String host; private int port; } ③ 编写自动装配类 @Configuration public class MyRedisConfig { @Autowired private JedisProperties properties; @Bean @ConditionalOnMissingBean public Jedis jedis(){ Jedis jedis = new Jedis(properties.getHost(),properties.getPort()); return jedis; } } ④编写自动装配文件 /META-INF/spring.factories\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ com.zhyp.redisspringbootstarter.config.MyRedisConfig ⑤测试类中测试一下 @SpringBootTest public class TestDemo { @Autowired private Jedis jedis; @Test public void test(){ System.out.println(jedis.get(\u0026#34;name\u0026#34;)); } } 3.3 引入测试 ①安装Reids-spring-boot-starter到maven仓库中 ②在其他项目中引入Reids-spring-boot-starter的起步依赖 ③ 编写配置文件 my: redis: host: localhost port: 6379 ④ 启动项目访问测试 @Controller public class MyController { @Autowired public Jedis jedis; @RequestMapping(\u0026#34;/redis\u0026#34;) @ResponseBody public String redis(){ return jedis.get(\u0026#34;name\u0026#34;); } } 四 SpringBoot项目部署和其他 4.1 jar包发布（官方推荐） 4.1.1 配置打包插件 \u0026lt;build\u0026gt; \u0026lt;finalName\u0026gt;zhyp\u0026lt;/finalName\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; 4.1.2 执行java命令 通过maven命令package完成项目打包；找到jar包位置，以命令行窗口执行\njava -jar xxx.jar 4.2 war包发布（了解） 4.2.1 项目打包方式 找到项目的pom.xml文件修改默认打包方式为war\n4.2.2 配置启动类 @SpringBootApplication @MapperScan(\u0026#34;com.itheima.mapper\u0026#34;) public class ThymeleafApp extends SpringBootServletInitializer { public static void main(String[] args) { SpringApplication.run(ThymeleafApp.class, args); } @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) { return builder.sources(ThymeleafApp.class); } } 4.2.3 部署到Tomcat 执行maven的package命令，将打好的war包放入Tomcat中运行即可\n4.3 自定义彩蛋 网址: http://www.patorjk.com/software/taag/ 4.4 通过添加引入StringBoot 4.5 SpringBoot热部署 在开发过程中，通常会对一段业务代码不断地修改测试，在修改之后往往需要重启服务，有些服务需要加载很久才能启动成功，这种不必要的重复操作极大的降低了程序开发效率。为此，Spring Boot框架专门提供了进行热部署的依赖启动器，用于进行项目热部署，而无需手动重启项目\npom.xml \u0026lt;!-- 引入热部署依赖 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-devtools\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 选择IDEA工具界面的【File】-\u0026gt;【Settings】选项，打开Compiler面板设置页面 在项目任意页面中使用组合快捷键“Ctrl+Shift+Alt+/”打开Maintenance选项框，选中并打开Registry 找到“compiler.automake.allow.when.app.running”，将该选项后的Value值勾选 五 课堂作业 springboot+thymeleaf/FreeMarker+mybatisPlus，完成用户列表的查询\n整合redis，实现用户列表的缓存\n理解自动装配,完成自动装配\n（导入xxx启动依赖，就可以@autowired完成注入）\n","date":"2023-07-29T17:40:19+08:00","permalink":"https://cheneycqg.github.io/post/springboot%E8%BF%9B%E9%98%B6%E7%AF%87/","title":"Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://cheneycqg.github.io/post/markdown-syntax-%E5%89%AF%E6%9C%AC/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://cheneycqg.github.io/post/markdown-syntax-%E5%89%AF%E6%9C%AC/","title":"Markdown Syntax Guide"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://cheneycqg.github.io/post/markdown-syntax/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://cheneycqg.github.io/post/markdown-syntax/","title":"Markdown Syntax Guide"},{"content":"正文测试 ","date":"2019-03-11T00:00:00Z","permalink":"https://cheneycqg.github.io/post/inde/","title":"陈雨"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3","date":"2019-03-11T00:00:00Z","image":"https://cheneycqg.github.io/post/cyq/2_huc532759d224879dfedb3b5246c9b7e58_311187_120x120_fill_q75_box_smart1.jpg","permalink":"https://cheneycqg.github.io/post/cyq/","title":"陈雨琪"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\n","date":"2019-03-10T00:00:00Z","permalink":"https://cheneycqg.github.io/post/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://cheneycqg.github.io/post/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://cheneycqg.github.io/post/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://cheneycqg.github.io/post/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://cheneycqg.github.io/post/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://cheneycqg.github.io/post/emoji-support/","title":"Emoji Support"}]