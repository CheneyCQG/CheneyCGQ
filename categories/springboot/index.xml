<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>SpringBoot on Cheney Site</title>
        <link>https://cheneycqg.github.io/categories/springboot/</link>
        <description>Recent content in SpringBoot on Cheney Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 31 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://cheneycqg.github.io/categories/springboot/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>SpringCloudAlibaba相关框架</title>
        <link>https://cheneycqg.github.io/post/springcloudalibaba/</link>
        <pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/springcloudalibaba/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/springcloudalibaba/1.jpg" alt="Featured image of post SpringCloudAlibaba相关框架" /&gt;&lt;p&gt;SpringCloudAlibaba相关框架，如：Nacos、OpenFeign、GateWay、Sentinel等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;掌握RestTemplate的使用&lt;/li&gt;
&lt;li&gt;知道什么是SpringCloud&lt;/li&gt;
&lt;li&gt;掌握搭建Eureka注册中心&lt;/li&gt;
&lt;li&gt;了解Ribbon的负载均衡&lt;/li&gt;
&lt;li&gt;理解Hystrix的熔断原理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;系统架构演变&#34;&gt;系统架构演变&lt;/h1&gt;
&lt;p&gt;​	随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？
​	其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。&lt;/p&gt;
&lt;h2 id=&#34;11-单体架构&#34;&gt;1.1 单体架构&lt;/h2&gt;
&lt;p&gt;​	当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。单体架构就是将所有的功能、数据库、文件都部署在一台机器上，俗称All-In-One&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643185881.png&#34;
	width=&#34;1195&#34;
	height=&#34;396&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643185881_hu2eb3db1316b55fdad1df5365baeafdee_51667_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643185881_hu2eb3db1316b55fdad1df5365baeafdee_51667_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682643185881&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;724px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;12-单体集群&#34;&gt;1.2 单体集群&lt;/h2&gt;
&lt;p&gt;单体集群,就是将单体架构复制几份&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643241371.png&#34;
	width=&#34;1124&#34;
	height=&#34;546&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643241371_hubf3182e185ed25ec737090cd10132037_62156_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643241371_hubf3182e185ed25ec737090cd10132037_62156_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682643241371&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;205&#34;
		data-flex-basis=&#34;494px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;13-分布式服务&#34;&gt;1.3 分布式服务&lt;/h2&gt;
&lt;p&gt;分布式,是指将整个系统按照功能拆分,部署到不同的服务器上,这样即适合为某个功能做集群,又合适重复功能的复用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643296902.png&#34;
	width=&#34;1180&#34;
	height=&#34;547&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643296902_hu5051a077f35018bc8fdb95ae4991d548_66782_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643296902_hu5051a077f35018bc8fdb95ae4991d548_66782_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682643296902&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;215&#34;
		data-flex-basis=&#34;517px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;14-服务治理架构soa&#34;&gt;1.4 服务治理架构（SOA）&lt;/h2&gt;
&lt;p&gt;SOA,全称Service-Oriented Architecture,面向服务的架构.
它把项目拆成独立的服务,对外提供.服务的提供方和消费方由企业总线统一管理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643384098.png&#34;
	width=&#34;1250&#34;
	height=&#34;566&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643384098_hud1f512536169edb1cbcd8eb67f92cf9f_67450_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643384098_hud1f512536169edb1cbcd8eb67f92cf9f_67450_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682643384098&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;530px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;以前出现了什么问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务越来越多，需要管理每个服务的地址&lt;/li&gt;
&lt;li&gt;调用关系错综复杂，难以理清依赖关系&lt;/li&gt;
&lt;li&gt;服务过多，服务状态难以管理，无法根据服务情况动态管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务治理要做什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务注册中心，实现服务自动注册和发现，无需人为记录服务地址&lt;/li&gt;
&lt;li&gt;服务自动订阅，服务列表自动推送，服务调用透明化，无需关心依赖关系&lt;/li&gt;
&lt;li&gt;动态监控服务状态监控报告，人为控制服务状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务间会有依赖关系，一旦某个环节出错会影响较大&lt;/li&gt;
&lt;li&gt;服务关系复杂，运维、测试部署困难&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;15-微服务&#34;&gt;1.5 微服务&lt;/h2&gt;
&lt;p&gt;微服务架构,是SOA的升华,在SOA的基础上更加细粒度的服务化,组件化.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643473026.png&#34;
	width=&#34;1268&#34;
	height=&#34;662&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643473026_hu585b62ac146a161158944f63eb80c47d_99184_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682643473026_hu585b62ac146a161158944f63eb80c47d_99184_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682643473026&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;因此两者非常容易混淆，但其实有一些差别：
微服务的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责&lt;/li&gt;
&lt;li&gt;微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。&lt;/li&gt;
&lt;li&gt;面向服务：面向服务是说每个服务都要对外暴露Rest风格服务HTTP接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的HTTP接口即可。&lt;/li&gt;
&lt;li&gt;自治：自治是说服务间互相独立，互不干扰
&lt;ul&gt;
&lt;li&gt;团队独立：每个服务都是一个独立的开发团队，人数不能过多。&lt;/li&gt;
&lt;li&gt;技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉&lt;/li&gt;
&lt;li&gt;前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口&lt;/li&gt;
&lt;li&gt;数据库分离：每个服务都使用自己的数据源&lt;/li&gt;
&lt;li&gt;部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;服务调用方式&#34;&gt;服务调用方式&lt;/h1&gt;
&lt;h2 id=&#34;21-rpc和http&#34;&gt;2.1 RPC和HTTP&lt;/h2&gt;
&lt;p&gt;无论是微服务还是SOA，都面临着服务间的&lt;strong&gt;远程调用&lt;/strong&gt;。那么服务间的远程调用方式有哪些呢？
常见的远程调用方式有以下2种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RPC： Remote Produce Call远程过程调用，类似的还有RMI（remote method invoke）。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型代表。&lt;/li&gt;
&lt;li&gt;Http： http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。 现在客户端浏览器与服务端通信基本都是采用Http协议，也可以用来进行远程服务调用。缺点是消息封装臃肿，优势是对服务的提供和调用方没有任何技术限定，自由灵活，更符合微服务理念。现在热门的Rest风格，就可以通过http协议来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你们公司全部采用Java技术栈，那么使用Dubbo作为微服务架构是一个不错的选择。
相反，如果公司的技术栈多样化，而且你更青睐Spring家族，那么SpringCloud搭建微服务是不二之选。在我们的项目中，我们会选择SpringCloud套件，因此我们会使用Http方式来实现服务间调用。&lt;/p&gt;
&lt;h2 id=&#34;22-http客户端工具&#34;&gt;2.2 Http客户端工具&lt;/h2&gt;
&lt;p&gt;既然微服务选择了Http，那么我们就需要考虑自己来实现对请求和响应的处理。不过开源世界已经有很
多的http客户端工具，能够帮助我们做这些事情，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HttpClient&lt;/li&gt;
&lt;li&gt;OKHttp&lt;/li&gt;
&lt;li&gt;URLConnection&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resttemplate&#34;&gt;RestTemplate&lt;/h1&gt;
&lt;p&gt;RestTemplate是Spring Boot封装好的Http客户端工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523091717293.png&#34;
	width=&#34;569&#34;
	height=&#34;233&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523091717293_huea68d90599e6dcc20f51378958f73d06_19067_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523091717293_huea68d90599e6dcc20f51378958f73d06_19067_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200523091717293&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;244&#34;
		data-flex-basis=&#34;586px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt; 添加服务提供者，提供Rest HTTP接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; 添加服务调用者，通过RestTemplate访问服务提供者的接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;3.&lt;/span&gt; 服务提供者和调用者都放到一个父工程中
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;31-搭建父工程&#34;&gt;3.1 搭建父工程&lt;/h2&gt;
&lt;p&gt;为了方便项目管理，这里把服务提供者和服务调用者放到同一个工程中&lt;/p&gt;
&lt;p&gt;新建父工程srping-cloud-parent-demo&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731101824059.png&#34;
	width=&#34;669&#34;
	height=&#34;182&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731101824059_hu1ec7ecc27639323d6c81690a00a88566_9100_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731101824059_hu1ec7ecc27639323d6c81690a00a88566_9100_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200731101824059&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;367&#34;
		data-flex-basis=&#34;882px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;父工程不需要写代码，可以将src目录删除&lt;/p&gt;
&lt;p&gt;添加Spring Boot依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.8.RELEASE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.junit.vintage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit-vintage-engine&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;32-搭建服务提供者&#34;&gt;3.2 搭建服务提供者&lt;/h2&gt;
&lt;p&gt;项目结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200903093502816.png&#34;
	width=&#34;353&#34;
	height=&#34;445&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200903093502816_hua6e21b252f9696d3ba1ee6bc3797af46_20490_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200903093502816_hua6e21b252f9696d3ba1ee6bc3797af46_20490_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200903093502816&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;79&#34;
		data-flex-basis=&#34;190px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;开发步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加子模块user-service，添加web依赖&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731102045743.png&#34;
	width=&#34;1020&#34;
	height=&#34;198&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731102045743_huc4baa792ee5d21a8ea567c1277c495de_28643_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731102045743_huc4baa792ee5d21a8ea567c1277c495de_28643_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200731102045743&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;515&#34;
		data-flex-basis=&#34;1236px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200903091209721.png&#34;
	width=&#34;604&#34;
	height=&#34;242&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200903091209721_hu42bb2bf2ebcfa91a6724744987de882c_13416_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200903091209721_hu42bb2bf2ebcfa91a6724744987de882c_13416_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200903091209721&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;249&#34;
		data-flex-basis=&#34;599px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加配置文件application.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 当前应用的服务名称（也叫服务ID）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加启动类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.SpringBootApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;UserApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加实体&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lombok.AllArgsConstructor&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lombok.Data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lombok.NoArgsConstructor&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Date&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer age&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Date updateTime&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写Controller&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 根据用户ID获取用户
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 接口地址: http://localhost:8001/user/1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动项目,打开http://localhost:8001/user/1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910191933635.png&#34;
	width=&#34;474&#34;
	height=&#34;206&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910191933635_hued8b101900141dd23a08c7e5295dc181_6878_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910191933635_hued8b101900141dd23a08c7e5295dc181_6878_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910191933635&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;552px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;33-搭建服务消费者&#34;&gt;3.3 搭建服务消费者&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加子模块service-consumer，添加web依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加配置文件application.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 当前应用的服务名称（也叫服务ID）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;service-consumer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加启动类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConsumerApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConsumerApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 将RestTemplate注册成为一个Bean
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RestTemplate &lt;span style=&#34;color:#a6e22e&#34;&gt;restTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RestTemplate&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加实体&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer age&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Date updateTime&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写Controller&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/consumer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConsumerController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 注入RestTemplate模板工具
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; RestTemplate restTemplate&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 通过远程调用user-service提供的HTTP接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        String url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://110.111.11.12:8001/user/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 第一个参数是接口调用地址  第二个参数是返回的类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; restTemplate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getForObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问http://localhost:9001/consumer/user/1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910192010174.png&#34;
	width=&#34;531&#34;
	height=&#34;200&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910192010174_huf681bb77770171b6cdcef940cf694afb_7636_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910192010174_huf681bb77770171b6cdcef940cf694afb_7636_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910192010174&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;265&#34;
		data-flex-basis=&#34;637px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;34-微服务调用问题&#34;&gt;3.4 微服务调用问题&lt;/h2&gt;
&lt;p&gt;service-provider：对外提供接口服务&lt;/p&gt;
&lt;p&gt;service-consumer: 通过&lt;code&gt;RestTemplate&lt;/code&gt;访问 http://locahost:8081/  调用接口服务&lt;/p&gt;
&lt;p&gt;存在问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在consumer中，我们把url地址硬编码到了代码中，不方便后期维护&lt;/li&gt;
&lt;li&gt;consumer需要记忆user-service的地址，如果出现变更，可能得不到通知，地址将失效&lt;/li&gt;
&lt;li&gt;consumer不清楚user-service的状态，服务宕机也不知道&lt;/li&gt;
&lt;li&gt;user-service只有1台服务，不具备高可用性&lt;/li&gt;
&lt;li&gt;即便user-service形成集群， consumer还需自己实现负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实上面说的问题，概括一下就是分布式服务必然要面临的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务管理
&lt;ul&gt;
&lt;li&gt;如何自动注册和发现服务&lt;/li&gt;
&lt;li&gt;如何实现服务状态监管&lt;/li&gt;
&lt;li&gt;如何实现服务动态路由&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务如何实现负载均衡&lt;/li&gt;
&lt;li&gt;服务如何解决容灾问题&lt;/li&gt;
&lt;li&gt;服务如何实现统一配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的问题，我们都将在Spring Cloud中得到解决。&lt;/p&gt;
&lt;h1 id=&#34;spring-cloud&#34;&gt;Spring Cloud&lt;/h1&gt;
&lt;h2 id=&#34;41-简介&#34;&gt;4.1 简介&lt;/h2&gt;
&lt;p&gt;Spring Cloud是一个基于 Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。
Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品，还可能会新增），如下所述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Cloud Config:配置管理工具，支持使用Git存储配置内容，可以使用它实现应用配置的外部化存储，并支持客户端配置信息刷新、加密/解密配置内容等。&lt;/li&gt;
&lt;li&gt;Spring Cloud Netflix:核心组件，对多个 Netflix OSS开源套件进行整合
&lt;ul&gt;
&lt;li&gt;Eureka:服务治理组件，包含服务注册中心、服务注册与发现机制的实现。&lt;/li&gt;
&lt;li&gt;Ribbon:客户端负载均衡的服务调用组件。&lt;/li&gt;
&lt;li&gt;Hystrix(豪猪哥):容错管理组件，实现断路器模式，帮助服务依赖中出现的延迟和为故障提供强大的容错能力。&lt;/li&gt;
&lt;li&gt;Open Feign:基于 Ribbon和 Hystrix的声明式服务调用组件。&lt;/li&gt;
&lt;li&gt;Gateway: 网关组件，提供智能路由、访问过滤等功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Cloud Bus: 事件、消息总线，用于传播集群中的状态变化或事件，以触发后续的处理，比如用来动态刷新配置等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官网：https://spring.io/projects/spring-cloud&lt;/p&gt;
&lt;h2 id=&#34;42-版本说明&#34;&gt;4.2 版本说明&lt;/h2&gt;
&lt;p&gt;Spring Cloud不像 Spring社区其他一些项目那样相对独立，它是一个拥有诸多子项目的大型综合项目，可以说是对微服务架构解决方案的综合套件组合，其包含的各个子项目也都独立进行着内容更新与迭代，各自都维护着自己的发布版本号。因此每一个Spring Cloud的版本都会包含多个不同版本的子项目b  j\  ，为了管理每个版本的子项目清单，避免 Spring Cloud的版本号与其子项目的版本号相混淆，没有采用版本号的方式，而是通过命名的方式。&lt;/p&gt;
&lt;p&gt;这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本时间顺序，比如最早的 Release版本为 Angel，第二个 Release版本为 Brixton&lt;/p&gt;
&lt;p&gt;当一个版本的 Spring Cloud项目的发布内容积累到临界点或者一个严重bug解决可用后，就会发布一个“service releases”版本，简称SRX版本，其中X是一个递增的数字，所以 Brixton.SR5就是 Brixton的第5个 Release版本&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Spring Cloud Version&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Spring Boot Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2022.0.x&lt;/a&gt; aka Kilburn&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3.0.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2021.0.x&lt;/a&gt; aka Jubilee&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.6.x, 2.7.x (Starting with 2021.0.3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2020.0.x&lt;/a&gt; aka Ilford&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.4.x, 2.5.x (Starting with 2020.0.3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Hoxton&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.2.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Greenwich&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.1.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Finchley&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.0.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Edgware&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.5.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Dalston&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.5.x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;服务治理&#34;&gt;服务治理&lt;/h1&gt;
&lt;h2 id=&#34;51-认识eureka&#34;&gt;5.1 认识Eureka&lt;/h2&gt;
&lt;p&gt;首先我们来解决第一问题，&lt;code&gt;服务的管理&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在刚才的案例中， user-service对外提供服务，需要对外暴露自己的地址。而consumer（调用者）需要
记录服务提供者的地址。将来地址出现变更，还需要及时更新。这在服务较少的时候并不觉得有什么，
但是在现在日益复杂的互联网环境，一个项目肯定会拆分出十几，甚至数十个微服务。此时如果还人为
管理地址，不仅开发困难，将来测试、发布上线都会非常麻烦。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方案-网约车&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就好比是 网约车出现以前，人们出门叫车只能叫出租车。一些私家车想做出租却没有资格，被称为黑车。而很多人想要约车，但是无奈出租车太少，不方便。私家车很多却不敢拦，而且满大街的车，谁知
道哪个才是愿意载人的。一个想要，一个愿意给，就是缺少引子，缺乏管理啊。
此时滴滴这样的网约车平台出现了，所有想载客的私家车全部到滴滴注册，记录你的车型（服务类
型），身份信息（联系方式）。这样提供服务的私家车，在滴滴那里都能找到，一目了然。
此时要叫车的人，只需要打开APP，输入你的目的地，选择车型（服务类型），滴滴自动安排一个符合
需求的车到你面前，为你服务，完美！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eureka能做什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eureka就好比是滴滴，负责管理、记录服务提供者的信息。服务调用者无需自己寻找服务，而是把自己
的需求告诉Eureka，然后Eureka会把符合你需求的服务告诉你。
同时，服务提供方与Eureka之间通过 “心跳” 机制进行监控，当某个服务提供方出现问题， Eureka自然
会把它从服务列表中剔除。这就实现了服务的自动注册、发现、状态监控。&lt;/p&gt;
&lt;h2 id=&#34;52-基本架构&#34;&gt;5.2 基本架构&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;架构图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523223318698.png&#34;
	width=&#34;1161&#34;
	height=&#34;712&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523223318698_huc33175174bb53eec8eba374800296b31_209095_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523223318698_huc33175174bb53eec8eba374800296b31_209095_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200523223318698&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;163&#34;
		data-flex-basis=&#34;391px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Eureka-Server：就是服务注册中心（可以是一个集群），对外暴露自己的地址。&lt;/li&gt;
&lt;li&gt;提供者：启动后向Eureka注册自己信息（地址，服务名称等），并且定期进行服务续约&lt;/li&gt;
&lt;li&gt;消费者：服务调用方，会定期去Eureka拉取服务列表，然后使用负载均衡算法选出一个服务进行调用。&lt;/li&gt;
&lt;li&gt;心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;53-快速入门&#34;&gt;5.3 快速入门&lt;/h2&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;0.&lt;/span&gt; 在父工程中添加SpringCloud的版本依赖管理
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt; 搭建注册中心
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	a. 新建工程，添加Eureka server依赖
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	b. 配置注册中心服务地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	c. 添加启动类
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; 服务提供者到注册中心注册
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	a. 添加Eureka client 依赖
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	b. 配置文件中添加注册中心地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	c. 在启动类上添加服务发现注解
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	d. 编写自己需要提供的接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;3.&lt;/span&gt; 服务调用者到注册中心拉取注册信息
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	a. 添加Eureka client 依赖
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	b. 配置文件中添加注册中心地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	c. 在启动类上添加服务发现注解
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	d. 采用服务的方式调用服务提供者的接口
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;531-搭建服务注册中心&#34;&gt;5.3.1 搭建服务注册中心&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在父工程pom.xml中添加Spring Cloud的依赖管理&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;spring-cloud.version&amp;gt;&lt;/span&gt;Hoxton.SR6&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/spring-cloud.version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.在spring-cloud-parent-demo父项目中创建一个Spring Boot工程，命名为eureka-server，并在pom.xml中添加eureka依赖&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682857622828.png&#34;
	width=&#34;694&#34;
	height=&#34;185&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682857622828_hua6414afc621f6ab34a43912c72c7dd78_12024_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682857622828_hua6414afc621f6ab34a43912c72c7dd78_12024_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682857622828&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;375&#34;
		data-flex-basis=&#34;900px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-server&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.添加配置文件application.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;eureka-server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:${server.port}/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 注册中心的职责是维护服务实例，不需要去检索服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fetch-registry&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 默认设置下，注册中心会将自己作为客户端来尝试注册自己，设置为false代表不向注册中心注册自己&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;register-with-eureka&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.添加启动类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 启动注册中心
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableEurekaServer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EurekaApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EurekaApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动应用并访问：http://localhost:1111 可以看到Eureka界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523225115951.png&#34;
	width=&#34;1884&#34;
	height=&#34;875&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523225115951_hubdb6434a43bdf72dd4c28edb32bdea0f_60734_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200523225115951_hubdb6434a43bdf72dd4c28edb32bdea0f_60734_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200523225115951&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;215&#34;
		data-flex-basis=&#34;516px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;532-服务注册&#34;&gt;5.3.2 服务注册&lt;/h3&gt;
&lt;p&gt;注册服务，就是在服务上添加Eureka的客户端依赖，客户端代码会自动把服务注册到EurekaServer中。&lt;/p&gt;
&lt;p&gt;1.在user-service中添加Eureka客户端依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Eureka客户端 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.在启动类上 通过添加 &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt;来开启Eureka客户端功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 开启Eureka客户端发现功能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableEurekaClient&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ProviderApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.配置文件中添加注册中心地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:1111/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里spring.application.name属性指定应用名称，将来会作为服务的id使用。&lt;/p&gt;
&lt;p&gt;此时再打开注册中心的地址：http://localhost:1111,可以看到服务已经注册上去了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200623114627269.png&#34;
	width=&#34;1508&#34;
	height=&#34;191&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200623114627269_hua5ec7755bcdfdec8448c6fdc41e7441a_29142_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200623114627269_hua5ec7755bcdfdec8448c6fdc41e7441a_29142_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200623114627269&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;789&#34;
		data-flex-basis=&#34;1894px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;533-服务发现与消费&#34;&gt;5.3.3 服务发现与消费&lt;/h3&gt;
&lt;p&gt;接下来我们修改service-consumer，尝试从EurekaServer获取服务。
方法与消费者类似，只需要在项目中添加EurekaClient依赖，就可以通过服务名称来获取信息了&lt;/p&gt;
&lt;p&gt;1.在service-consumer中添加Eureka客户端依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Eureka客户端 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.在启动类上 通过添加 &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt;来开启Eureka客户端功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableDiscoveryClient&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConsumerApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConsumerApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RestTemplate &lt;span style=&#34;color:#a6e22e&#34;&gt;restTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RestTemplate&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.配置文件中添加注册中心地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:1111/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.修改代码，用DiscoveryClient类的方法，根据服务名称，获取服务实例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    动态获取服务地址:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    注意!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    注意!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    注意!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    DiscoveryClient的导包:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    import org.springframework.cloud.client.discovery.DiscoveryClient;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    注意!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    注意!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    注意!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    1. 注入DiscoveryClient
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    2. 使用DiscoveryClient 获取服务列表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    3. 从服务列表中选择一个服务实例
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    4. 实例中包含了调用地址及端口信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DiscoveryClient discoveryClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用DiscoveryClient 获取服务列表 参数为服务ID ,也就是在配置文件中定义的spring.application.name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// spring.application.name 建议使用 -  来分隔,不要使用下划线
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServiceInstance&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; instances &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discoveryClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstances&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-service&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 获取具体的实例
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ServiceInstance instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 获取服务的地址和端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    String host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 通过远程调用user-service提供的HTTP接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    String url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; host &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; port &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 第一个参数是接口调用地址  第二个参数是返回的类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; restTemplate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getForObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.启动项目后，可以在注册中心页面看到有两个服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910193602866.png&#34;
	width=&#34;1441&#34;
	height=&#34;366&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910193602866_hu9b6be45b73bb265f37cee8988c75f629_25690_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910193602866_hu9b6be45b73bb265f37cee8988c75f629_25690_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910193602866&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;393&#34;
		data-flex-basis=&#34;944px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;6.调用消费者的页面http://localhost:9001/consumer/user/1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910193620800.png&#34;
	width=&#34;512&#34;
	height=&#34;212&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910193620800_hu3a4625be837d628e1344c58af3f01606_7740_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910193620800_hu3a4625be837d628e1344c58af3f01606_7740_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910193620800&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;579px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;54-eureka详解&#34;&gt;5.4 Eureka详解&lt;/h2&gt;
&lt;p&gt;接下来我们详细讲解Eureka的原理及配置。&lt;/p&gt;
&lt;h3 id=&#34;541-基础架构&#34;&gt;5.4.1 基础架构&lt;/h3&gt;
&lt;p&gt;Eureka架构中的三个核心角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务注册中心
Eureka的服务端应用，提供服务&lt;strong&gt;注册&lt;/strong&gt;和&lt;strong&gt;发现&lt;/strong&gt;功能，就是刚刚我们建立的eureka-server&lt;/li&gt;
&lt;li&gt;服务提供者
提供服务的应用，可以是Spring Boot应用，也可以是其它任意技术实现，只要对外提供的是Rest
风格服务即可。本例中就是我们实现的order-service-provider&lt;/li&gt;
&lt;li&gt;服务消费者
消费应用从注册中心获取服务列表，从而得知每个服务方的信息，知道去哪里调用服务方。本例中
就是我们实现的pay-service-consumer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708140407596.png&#34;
	width=&#34;692&#34;
	height=&#34;432&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708140407596_hu2c787cd226f079c195bd21ee548ebbdb_61686_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708140407596_hu2c787cd226f079c195bd21ee548ebbdb_61686_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708140407596&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务提供者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务提供者要向Eureka Server注册服务，并且完成服务续约等工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务注册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;服务提供者在启动时，会检测配置属性中的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eureka.client.register-with-erueka=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数表示是否注册到eureka注册中心
事实上默认就是true。如果值确实为true，则会向Eureka Server发起一个Rest请求，并携带自己的元数据信息， Eureka Server会把这些信息保存到一个双层Map结构中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-sercice&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;主机名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;服务名&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;端口等&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;服务实例对象&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;第一层Map的Key就是服务id，一般是配置中的 &lt;code&gt;spring.application.name&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;第二层Map的key是服务的实例，一般host+ serviceId + port，例如： localhost:user-service:8001&lt;/li&gt;
&lt;li&gt;值则是服务的实例对象，也就是说一个服务，可以同时启动多个不同实例，形成集群。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;服务消费者&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;启动服务消费者的时候，它会发送一个REST请求给服务注册中心，来获取上面注册的服务清单。&lt;/p&gt;
&lt;h3 id=&#34;543-eureka属性配置了解&#34;&gt;5.4.3 Eureka属性配置(了解)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;服务端配置&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;失效剔除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些时候，我们的服务实例并不一定会正常下线,正常下线会给注册中心发送一个HTTP请求，告诉注册中心服务下线，可能由于内存溢出、网络故障等原因使得服务不能正常工作，而服务注册中心并未收到“服务下线”的请求。为了从服务列表中将这些无法提供服务的实例剔除， Eureka Server在启动的时候会创建一个定时任务，默认每隔一段时间（默认为60秒）将当前清单中超时（&lt;strong&gt;默认为90秒&lt;/strong&gt;）没有续约的服务剔除出去。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 剔除任务执行时间，默认为60秒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;eviction-interval-timer-in-ms&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;60000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端的默认配置可以在&lt;code&gt;EurekaServerConfigBean&lt;/code&gt;中查看&lt;/p&gt;
&lt;p&gt;服务提供者正常关闭会立刻在注册中心下线&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194505294.png&#34;
	width=&#34;383&#34;
	height=&#34;312&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194505294_hu9b6f476f62798ac41d2f526a47ff83f3_20592_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194505294_hu9b6f476f62798ac41d2f526a47ff83f3_20592_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910194505294&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;接下来模拟服务提供者非正常关闭：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194523927.png&#34;
	width=&#34;378&#34;
	height=&#34;315&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194523927_hu540b3168c44c5137688df0d03b63e7a2_20426_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194523927_hu540b3168c44c5137688df0d03b63e7a2_20426_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910194523927&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;288px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;此时发现user-service还在注册中心。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自我保护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我们在本地调试基于 Eureka的程序时，基本上都会碰到这样一个问题，在服务注册中心的信息面板中出现类似下面的红色警告信息:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524151524851.png&#34;
	width=&#34;1223&#34;
	height=&#34;517&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524151524851_hu7037219f59ca8a4e73910606a2f3691e_48072_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524151524851_hu7037219f59ca8a4e73910606a2f3691e_48072_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524151524851&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;567px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;该警告就是触发了Eureka Server的自我保护机制。之前我们介绍过，服务注册到 Eureka Server之后，会维护一个心跳连接，告诉 Eureka Server自己还活着.Eureka Server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85％，如果出现低于的情况（在单机调试的时候很容易满足，实际在生产环境上通常是由于网络不稳定导致）， Eureka Server会将当前的实例注册信息保护起来让这些实例不会过期，尽可能保护这些注册信息。但是，在这段保护期间内实例若出现问题，那么客户端很容易拿到实际已经不存在的服务实例，会出现调用失败的情况，所以客户端必须要有容错机制，比如可以使用请求重试、断路器等机制。
由于本地调试很容易触发注册中心的保护机制，这会使得注册中心维护的服务实例不那么准确。所以，我们在本地进行开发的时候，可以使用 &lt;code&gt;eureka.server.enable-self-preservation＝false&lt;/code&gt;参数来关闭保护机制，以确保注册中心可以将不可用的实例正确剔除。&lt;/p&gt;
&lt;p&gt;关闭自我保护机制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 注册中心提供服务的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:${server.port}/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 注册中心的职责是维护服务实例，不需要去检索服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fetch-registry&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 默认设置下，注册中心会将自己作为客户端来尝试注册自己，设置为false代表不向注册中心注册自己&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;register-with-eureka&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 关闭自我保护机制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;enable-self-preservation&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动后会显示自我保护机制关闭&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708143545361.png&#34;
	width=&#34;1545&#34;
	height=&#34;625&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708143545361_hu3b2f4d069a182bd2a45cf93462703c86_69730_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708143545361_hu3b2f4d069a182bd2a45cf93462703c86_69730_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708143545361&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;593px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端属性配置&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务续约&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在注册完服务之后，服务提供者会维护一个心跳用来持续告诉 Eureka Server:“我还活着”，以防止 Eureka Server的剔除任务将该服务实例从服务列表中排除出去，我们称该操作为服务续约（Renew）
关于服务续约有两个重要属性，我们可以关注并根据需要来进行调整:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;instance&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 服务失效的时间，默认为90秒,告知服务器器 如果90秒内都没有心跳包,可以把我踢出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;lease-expiration-duration-in-seconds&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 服务续约任务的调用间隔时间，默认为30秒,心跳包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;lease-renewal-interval-in-seconds&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个设置与注册中心服务端的失效剔除配合使用&lt;/p&gt;
&lt;p&gt;比如Eureka-server中设置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  每5秒钟剔除失效的服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;eviction-interval-timer-in-ms&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在user-service中设置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 当前实例的配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;instance&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 服务失效的时间，默认为90秒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;lease-expiration-duration-in-seconds&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 服务续约任务的调用间隔时间，默认为30秒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;lease-renewal-interval-in-seconds&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;意思是服务提供端每10秒发送一次服务续约，服务的失效时间为15秒，即如果服务提供端下线，15秒后eureka server将其服务剔除。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务拉取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;启动服务消费者的时候，它会发送一个REST请求给服务注册中心，来获取上面注册的服务清单。为了性能考虑， Eureka Server会维护一份只读的服务清单来返回给客户端，同时该缓存清单会每隔30秒更新一次。
获取服务是服务消费者的基础，所以必须确保 &lt;code&gt;eureka.client.fetch-registry＝true&lt;/code&gt;参数没有被修改成 false，该值默认为true。&lt;/p&gt;
&lt;p&gt;若希望修改缓存清单的更新时间，可以通过 &lt;code&gt;eureka.client.registry-fetch-interval＝30&lt;/code&gt;参数进行修改，该参数默认值为30，单位为秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eureka实例配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;user-service默认注册时使用的是主机名或者域名，如果我们想用ip进行注册，可以在user-service的
application.yml添加配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;instance&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 更倾向于使用ip，而不是host名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;prefer-ip-address&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果么有使用ip，可以看到提示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708144930721.png&#34;
	width=&#34;1345&#34;
	height=&#34;477&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708144930721_hud2a56494ae0eae62a3a70a5fdfd729ea_50288_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708144930721_hud2a56494ae0eae62a3a70a5fdfd729ea_50288_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708144930721&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;676px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;改成ip后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708145052817.png&#34;
	width=&#34;1356&#34;
	height=&#34;470&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708145052817_huf130d945d4f82ccbddd05259c64847c3_48211_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708145052817_huf130d945d4f82ccbddd05259c64847c3_48211_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708145052817&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;288&#34;
		data-flex-basis=&#34;692px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;55-搭建高可用的eureka-server集群&#34;&gt;5.5 搭建高可用的Eureka Server集群&lt;/h2&gt;
&lt;p&gt;Eureka Server即服务的注册中心，在刚才的案例中，我们只有一个Eureka Server，事实上
Eureka Server也可以是一个集群，形成高可用的Eureka中心。&lt;/p&gt;
&lt;h3 id=&#34;551-服务同步&#34;&gt;5.5.1 服务同步&lt;/h3&gt;
&lt;p&gt;多个Eureka Server之间也会互相注册为服务，当服务提供者注册到Eureka Server集群中的某个节点
时，该节点会把服务的信息同步给集群中的每个节点，从而实现高可用集群。因此，无论客户端访问到
Eureka Server集群中的任意一个节点，都可以获取到完整的服务列表信息。
而作为客户端，需要把信息注册到每个Eureka中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731141015665.png&#34;
	width=&#34;962&#34;
	height=&#34;461&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731141015665_hu57f02aed64f163ddf42107e42c340000_42748_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731141015665_hu57f02aed64f163ddf42107e42c340000_42748_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200731141015665&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;208&#34;
		data-flex-basis=&#34;500px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果有三个Eureka，则每一个Eureka Server都需要注册到其它几个Eureka服务中，例如：有三个分别
为1111、 1112、 1113，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1111要注册到1112和1113上&lt;/li&gt;
&lt;li&gt;1112要注册到1111和1113上&lt;/li&gt;
&lt;li&gt;1113要注册到1111和1112上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;552-搭建高可用的eureka-server&#34;&gt;5.5.2 搭建高可用的Eureka Server&lt;/h3&gt;
&lt;p&gt;​	所谓的高可用注册中心，其实就是把Eureka Server自己也作为一个服务，注册到其它Eureka Server上，这样多个Eureka Server之间就能互相发现对方，从而形成集群。因此我们做了以下修改：
把service-url的值改成了另外一台Eureka Server的地址，而不是自己&lt;/p&gt;
&lt;p&gt;我们假设要搭建两台Eureka Server的集群，端口分别为： 1112和1113&lt;/p&gt;
&lt;p&gt;1.添加配置文件application-p1.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;eureka-server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 注册中心提供服务的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:1112/eureka,http://127.0.0.1:1113/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 从其他的注册中心检索服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fetch-registry&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 向其他注册中心注册自己&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;register-with-eureka&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.添加配置文件application-p2.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1112&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;eureka-server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 注册中心提供服务的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:1111/eureka,http://127.0.0.1:1113/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 从其他的注册中心检索服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fetch-registry&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 向其他注册中心注册自己&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;register-with-eureka&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.添加配置文件application-p3.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1113&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;eureka-server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 注册中心提供服务的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:1111/eureka,http://127.0.0.1:1112/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 从其他的注册中心检索服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fetch-registry&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 向其他注册中心注册自己&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;register-with-eureka&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;554启动三台eureka-server&#34;&gt;5.5.4.启动三台Eureka Server&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在IDEA中启动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编辑配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194702785.png&#34;
	width=&#34;327&#34;
	height=&#34;189&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194702785_hu746c754968d74141e8aca9c79acdbf36_13494_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194702785_hu746c754968d74141e8aca9c79acdbf36_13494_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910194702785&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;复制配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194824067.png&#34;
	width=&#34;1349&#34;
	height=&#34;1010&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194824067_hu330eb1a0a39b36699e8624cfc94feca2_71817_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194824067_hu330eb1a0a39b36699e8624cfc94feca2_71817_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910194824067&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;修改名称及Active profiles,配置完成后会弹出RunDashboard&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731141530634.png&#34;
	width=&#34;427&#34;
	height=&#34;253&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731141530634_hu5e7029dd6399705239c805b254e85572_13402_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200731141530634_hu5e7029dd6399705239c805b254e85572_13402_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200731141530634&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;405px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;p2，p3节点也按此配置，然后启动即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708141150474.png&#34;
	width=&#34;1669&#34;
	height=&#34;576&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708141150474_hu270fb345897156a18a7736ae1acb03bb_70051_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708141150474_hu270fb345897156a18a7736ae1acb03bb_70051_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708141150474&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;289&#34;
		data-flex-basis=&#34;695px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在启动的过程中，可能会出现下面的错误信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708141245153.png&#34;
	width=&#34;1073&#34;
	height=&#34;298&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708141245153_huabc15ac83500510c44c84349effb9c16_55665_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708141245153_huabc15ac83500510c44c84349effb9c16_55665_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708141245153&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;360&#34;
		data-flex-basis=&#34;864px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;原因是其他的节点还没有启动，此时去注册就会出现连接超时，这个流程是正常的。&lt;/p&gt;
&lt;p&gt;命令行启动将项目打包，需要添加打包插件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在IDEA右侧选择Maven Projects,双击package&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524100514457.png&#34;
	width=&#34;371&#34;
	height=&#34;421&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524100514457_hu77ba9b61222ec483a9f72a93df03f69c_28425_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524100514457_hu77ba9b61222ec483a9f72a93df03f69c_28425_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524100514457&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;打包后的文件会生成在target目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524100805815.png&#34;
	width=&#34;354&#34;
	height=&#34;482&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524100805815_hu34e6f948ca5f7c8bce9f91868ee8f996_25365_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524100805815_hu34e6f948ca5f7c8bce9f91868ee8f996_25365_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524100805815&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;176px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;找到目录执行&lt;code&gt;cmd&lt;/code&gt;打开命令行窗口&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524101049987.png&#34;
	width=&#34;658&#34;
	height=&#34;328&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524101049987_hu1ee5fbcc4d13fa9987d7f425bb12bc85_28291_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524101049987_hu1ee5fbcc4d13fa9987d7f425bb12bc85_28291_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524101049987&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;481px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar eureka-server-0.0.1-SNAPSHOT.jar --spring.profiles.active&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再打开另外一个命令行窗口，执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar eureka-server-0.0.1-SNAPSHOT.jar --spring.profiles.active&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar eureka-server-0.0.1-SNAPSHOT.jar --spring.profiles.active&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端注册服务到集群&lt;/p&gt;
&lt;p&gt;修改user-service,因为Eureka Server不止一个，因此注册服务的时候， service-url参数需要变化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;service-url&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;defaultZone&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://127.0.0.1:1111/eureka，http://127.0.0.1:1112/eureka,http://127.0.0.1:1113/eureka&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194231047.png&#34;
	width=&#34;1495&#34;
	height=&#34;341&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194231047_hu0a029b13266f72e5b430d64af6656528_25146_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910194231047_hu0a029b13266f72e5b430d64af6656528_25146_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910194231047&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;438&#34;
		data-flex-basis=&#34;1052px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;负载均衡ribbon&#34;&gt;负载均衡Ribbon&lt;/h1&gt;
&lt;p&gt;Ribbon是一个客户端负载均衡工具.[负载均衡工具]&lt;/p&gt;
&lt;p&gt;在刚才的案例中，我们启动了一个user-service，然后通过DiscoveryClient来获取服务实例信息，获取ip和端口来访问。
但是实际环境中，我们往往会开启很多个user-service的集群。此时我们获取的服务列表中就会有多个，到底该访问哪一个呢？
这种情况下我们就需要编写负载均衡算法，在多个实例列表中进行选择。&lt;/p&gt;
&lt;h2 id=&#34;61-启动两个服务实例&#34;&gt;6.1 启动两个服务实例&lt;/h2&gt;
&lt;p&gt;在user-service中添加打包插件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便查看哪个服务被调用了，做如下改造&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${server.port}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; from &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先我们启动两个user-service实例，一个8001，一个8002。&lt;/p&gt;
&lt;p&gt;在IDEA中可以通过如下配置来启动多个实例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910195802064.png&#34;
	width=&#34;917&#34;
	height=&#34;285&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910195802064_hub16b0f0c84c3b90c2a5acbcbe820367c_29530_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910195802064_hub16b0f0c84c3b90c2a5acbcbe820367c_29530_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910195802064&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;321&#34;
		data-flex-basis=&#34;772px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;也可以通过控制台+参数来启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar user-service-0.0.1-SNAPSHOT.jar --server.port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar user-service-0.0.1-SNAPSHOT.jar --server.port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看Eureka控制面板&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910195845921.png&#34;
	width=&#34;1490&#34;
	height=&#34;298&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910195845921_hu2788a2e9ffe9b37a43927429c635f9cf_19433_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910195845921_hu2788a2e9ffe9b37a43927429c635f9cf_19433_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910195845921&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;500&#34;
		data-flex-basis=&#34;1200px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;手动实现负载均衡：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 定义静态变量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Integer index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 通过发现客户端获取服务的列表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 参数是服务ID，也就是在user-service项目配置文件中定义的spring.application.name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServiceInstance&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; instances &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discoveryClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstances&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-service&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 获取实例的数量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 手动实现负载均衡
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 第一次进来index = 0 ,instances.get(index) 返回第一个服务实例
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 第二次请求 index+1 = 1 ,instances.get(index) 返回第二个服务实例
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 第三次请求 index+1 = 2，将index对服务实例总数做取模操作index = 2mod2 = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; size&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 获取具体的实例
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ServiceInstance instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 通过实例获取访问地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    String host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;host&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;port&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用RestTemplate调用user-service的服务接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; restTemplate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getForObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;62-开启负载均衡&#34;&gt;6.2 开启负载均衡&lt;/h2&gt;
&lt;p&gt;SpringCloud 中已经帮我们集成了负载均衡组件： Ribbon&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201024115559030.png&#34;
	width=&#34;739&#34;
	height=&#34;345&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201024115559030_hu870666c7ae9c09800b83ce1bb6302f01_33471_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201024115559030_hu870666c7ae9c09800b83ce1bb6302f01_33471_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201024115559030&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;514px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们就来使用Ribbon实现负载均衡。&lt;/p&gt;
&lt;p&gt;因为Eureka中已经集成了Ribbon，所以我们无需引入新的依赖。直接修改代码：
在RestTemplate的配置方法上添加 @LoadBalanced注解：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@LoadBalanced&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RestTemplate &lt;span style=&#34;color:#a6e22e&#34;&gt;restTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RestTemplate&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改调用方式，不再手动获取ip和端口，而是直接通过服务名称调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// String url = &amp;#34;http://localhost:8001/user/&amp;#34; + id;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// String url = &amp;#34;http://&amp;#34;+host+&amp;#34;:&amp;#34;+port+&amp;#34;/user/&amp;#34; + id;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用服务ID替换真实地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    String url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://user-service&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; restTemplate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getForObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问页面，查看结果，多次刷新页面可以看到不同的返回。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/ssets/image-20200910200316367.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910200316367&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910200329840.png&#34;
	width=&#34;481&#34;
	height=&#34;201&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910200329840_hub868ccde1afe44b0bcf984402c5f1b1a_7651_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200910200329840_hub868ccde1afe44b0bcf984402c5f1b1a_7651_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200910200329840&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;239&#34;
		data-flex-basis=&#34;574px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;63-负载均衡原理&#34;&gt;6.3 负载均衡原理&lt;/h2&gt;
&lt;p&gt;为什么我们只输入了service名称就可以访问了呢？&lt;/p&gt;
&lt;p&gt;关键就在于&lt;code&gt;@LoadBalanced&lt;/code&gt;注解，源码如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161026269.png&#34;
	width=&#34;882&#34;
	height=&#34;405&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161026269_hu67c4effe917feaadbc4fd18c43761ecf_32518_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161026269_hu67c4effe917feaadbc4fd18c43761ecf_32518_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524161026269&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;522px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;找到&lt;code&gt;LoadBalancerClient&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161506121.png&#34;
	width=&#34;926&#34;
	height=&#34;448&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161506121_hu69db3ac1d4a57cefbf4a74bcbc670087_24087_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161506121_hu69db3ac1d4a57cefbf4a74bcbc670087_24087_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524161506121&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;496px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;继承自&lt;code&gt;ServiceInstanceChooser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161533852.png&#34;
	width=&#34;836&#34;
	height=&#34;309&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161533852_hube87eca472632c04f57065b36c9871ac_23244_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524161533852_hube87eca472632c04f57065b36c9871ac_23244_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524161533852&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;270&#34;
		data-flex-basis=&#34;649px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;LoadBalancerClient&lt;/code&gt;所在的包中可以找到自动配置类&lt;code&gt;LoadBalancerAutoConfiguration&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708153841700.png&#34;
	width=&#34;802&#34;
	height=&#34;234&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708153841700_hubb6b25a90f35be59379933334c038ea4_27141_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708153841700_hubb6b25a90f35be59379933334c038ea4_27141_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708153841700&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;342&#34;
		data-flex-basis=&#34;822px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在该自动化配置类中，主要做了下面三件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建了一个LoadBalancerInterceptor的Bean，用于实现对客户端发起请求时进行拦截，以实现客户端负载均衡。&lt;/li&gt;
&lt;li&gt;创建了一个RestTemplateCustomizer的Ben，用于给 RestTemplate增加 LoadBalancerInterceptor拦截器。&lt;/li&gt;
&lt;li&gt;维护了一个被 LoadBalanced注解修饰的 RestTemplate对象列表，并在这里进行初始化，通过调用RestTemplateCustomizer的实例来给需要客户端负载均衡的 RestTemplate增加 LoadBalancerInterceptor拦截器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，我们看看LoadBalancerInterceptor拦截器是如何将一个普通的RestTemplate变成客户端负载均衡的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524163546308.png&#34;
	width=&#34;989&#34;
	height=&#34;335&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524163546308_hu2a2e94c4ced4feff25d0317f19137029_34841_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524163546308_hu2a2e94c4ced4feff25d0317f19137029_34841_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524163546308&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;295&#34;
		data-flex-basis=&#34;708px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;execute方法回到了LoadBalancerClient，查看实现类为&lt;code&gt;RibbonLoadBalancerClient&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524163746450.png&#34;
	width=&#34;919&#34;
	height=&#34;416&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524163746450_hu176c5bdedd387d5ba70ac3c917048b94_31062_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524163746450_hu176c5bdedd387d5ba70ac3c917048b94_31062_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524163746450&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;530px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;继续跟进&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164104884.png&#34;
	width=&#34;1042&#34;
	height=&#34;515&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164104884_hu4435e8d95f19369ff03a6424c56a0fe2_31620_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164104884_hu4435e8d95f19369ff03a6424c56a0fe2_31620_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524164104884&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;485px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里的rule在上面定义，&lt;code&gt;RoundRobinRule&lt;/code&gt;即为轮询的意思&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164159784.png&#34;
	width=&#34;1009&#34;
	height=&#34;285&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164159784_hu11602964266c124f89cd3320e9695031_35033_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164159784_hu11602964266c124f89cd3320e9695031_35033_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524164159784&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;354&#34;
		data-flex-basis=&#34;849px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;查看实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164525099.png&#34;
	width=&#34;843&#34;
	height=&#34;664&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164525099_hue2d7ce5c41022d7923d1cd0df945c0a5_41254_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524164525099_hue2d7ce5c41022d7923d1cd0df945c0a5_41254_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524164525099&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;304px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到这里的算法是使用了原子类，每次对这个原子类做+1后对服务器数量取模，再通过CAS设置原子类的最新值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; AtomicInteger nextServerCyclicCounter&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoundRobinRule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nextServerCyclicCounter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AtomicInteger&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementAndGetModulo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; modulo&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextServerCyclicCounter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; modulo&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nextServerCyclicCounter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;compareAndSet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;current&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CAS(V,E,N)，V指要更新的变量，E指要更新的期望值，N指更新后的值，当且仅当V的值等于E时，才将V更新成N。如果V的值不等于E，就表示这个变量已经被其他的任务更新过了，此次更新失败，进入循环继续执行。&lt;/p&gt;
&lt;p&gt;CAS操作保证同一时刻只有一个任务能够更新成功，其他的进入循环继续尝试执行更新。&lt;/p&gt;
&lt;p&gt;再看一下IRule的实现有下面这些：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524165008102.png&#34;
	width=&#34;647&#34;
	height=&#34;463&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524165008102_hu9264aafcc498236955c319af16d3c0ec_60312_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200524165008102_hu9264aafcc498236955c319af16d3c0ec_60312_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200524165008102&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;335px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;负载均衡原理总结&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt; 在RestTemplate上添加了@LoadBalanced注解后，会使用LoadBalancerClient来配置RestTemplate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; Spring Cloud Ribbon 的自动配置类LoadBalancerAutoConfiguration中的@ConditionalOnBean(LoadBalancerClient.class)条件成立
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;3.&lt;/span&gt; 自动配置中添加了LoadBalancerInterceptor，这个拦截器会拦截请求，通过服务ID获取服务的地址列表，然后通过负载均衡算法选出一个地址进行调用
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708155757838.png&#34;
	width=&#34;906&#34;
	height=&#34;640&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708155757838_hu5fe62a14ee4846a71724906f9c4b3167_67898_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200708155757838_hu5fe62a14ee4846a71724906f9c4b3167_67898_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200708155757838&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;64-切换负载均衡策略&#34;&gt;6.4 切换负载均衡策略&lt;/h2&gt;
&lt;p&gt;Spring Cloud 可以通过如下方式对RibbonClient做个性化配置：&lt;/p&gt;
&lt;p&gt;全局配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ribbon.{key}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{value}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指定服务配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;{服务名称}.ribbon.{key}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{value}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里切换为随机&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;pay-service&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ribbon&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;NFLoadBalancerRuleClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;com.netflix.loadbalancer.RandomRule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次测试，发现结果变成了随机访问 。&lt;/p&gt;
&lt;h2 id=&#34;65-ribbon的饥饿加载和懒加载&#34;&gt;6.5 Ribbon的饥饿加载和懒加载&lt;/h2&gt;
&lt;p&gt;Ribbon默认是采用&lt;strong&gt;懒加载&lt;/strong&gt;，即第一次访问时才会去创建LoadBalanceClient，因为创建的过程中要去做服务拉取，所以请求时间会很长。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;饥饿加载&lt;/strong&gt;则是在项目启动时创建，降低第一次访问的耗时。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如图所示:&lt;/li&gt;
&lt;li&gt;可以看到有一次userservice instantiated a loadBalancer–userservice初始化负载均衡器；
初始时服务列表为空，所以会做一次PollingServerListUpdater–拉取服务；
而拉取服务的过程中就会去创建：DynamicServerListLoadBalancer。
所以就会消耗很长的时间,这就是所谓的懒加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/34b19298f57848a4b37d9c745e821050.png&#34;
	width=&#34;1857&#34;
	height=&#34;673&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/34b19298f57848a4b37d9c745e821050_hu0d21a1a23d2d062f6fadcc7640f47b32_261683_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/34b19298f57848a4b37d9c745e821050_hu0d21a1a23d2d062f6fadcc7640f47b32_261683_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;662px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过下面配置开启饥饿加载&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ribbon:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eager&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;load&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    enabled&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;开启饥饿加载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    clients&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;指定饥饿加载的服务名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; userservice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; xxxxService
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;nacos-注册中心&#34;&gt;Nacos 注册中心&lt;/h1&gt;
&lt;h2 id=&#34;1nacos-概述&#34;&gt;1.Nacos 概述&lt;/h2&gt;
&lt;p&gt;Nacos 是阿里巴巴推出来的一个新&lt;a class=&#34;link&#34; href=&#34;https://so.csdn.net/so/search?q=%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE&amp;amp;spm=1001.2101.3001.7020&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;开源项目&lt;/a&gt;，这是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：注册中心&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;配置中心的组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一句话概括就是&lt;strong&gt;Nacos = Spring Cloud Eureka 服务中心 + Spring Cloud Config配置中心。&lt;/strong&gt;
• 官网：https://nacos.io/zh-cn/
• 下载地址： &lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/nacos/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/alibaba/nacos/releases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2nacosa安装&#34;&gt;2.Nacosa安装&lt;/h2&gt;
&lt;p&gt;Windows下启动 nacos-server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;startup.cmd -m standalone
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116174126354.png&#34;
	width=&#34;360&#34;
	height=&#34;285&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116174126354_hu270b202bb60c982a82d4ee718dd091fc_13422_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116174126354_hu270b202bb60c982a82d4ee718dd091fc_13422_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201116174126354&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;启动成功效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116174149589.png&#34;
	width=&#34;1223&#34;
	height=&#34;639&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116174149589_hu8402b148133038fa429d83277f3ae476_75061_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116174149589_hu8402b148133038fa429d83277f3ae476_75061_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201116174149589&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;控制台登录 http://localhost:8848/nacos&lt;/p&gt;
&lt;p&gt;账号，密码：nacos&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587539128223.png&#34;
	width=&#34;1916&#34;
	height=&#34;1011&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587539128223_huf558144894220a202fcf91076c6ef688_319815_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1587539128223_huf558144894220a202fcf91076c6ef688_319815_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1587539128223&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;454px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;控制台页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587539185231.png&#34;
	width=&#34;1920&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587539185231_hu389d7215cb701a5b6a39f6b06367549d_235058_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1587539185231_hu389d7215cb701a5b6a39f6b06367549d_235058_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1587539185231&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;450px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;3nacos-快速入门&#34;&gt;3.Nacos 快速入门&lt;/h2&gt;
&lt;p&gt;Spring Cloud 可以与Nacos进行无缝对接&lt;/p&gt;
&lt;p&gt;Spring cloud Alibaba 组件 &lt;a class=&#34;link&#34; href=&#34;https://spring.io/projects/spring-cloud-alibaba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://spring.io/projects/spring-cloud-alibaba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在父工程中添加依赖管理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;com.alibaba.cloud&amp;gt;&lt;/span&gt;2.1.2.RELEASE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/com.alibaba.cloud&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-alibaba-dependencies&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${com.alibaba.cloud}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在user-service 和 consumer-service中添加依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;application.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;nacos&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;discovery&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;server-addr&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8848&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 配置nacos 服务端地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;控制台显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116175857334.png&#34;
	width=&#34;1378&#34;
	height=&#34;482&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116175857334_hu068a83e7bbbbf612b796626fb4419598_32855_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201116175857334_hu068a83e7bbbbf612b796626fb4419598_32855_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201116175857334&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;285&#34;
		data-flex-basis=&#34;686px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;4nacos与eureka的区别&#34;&gt;4.Nacos与Eureka的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常见的注册中心&lt;/p&gt;
&lt;p&gt;Eureka
​	Eureka是Netflix公司开源的注册中心,后被整合到Spring Cloud中
Zookeeper
​	这个说起来有点意思的是官方并没有说他是一个注册中心，
​	但是国内Dubbo场景下很多都是使用Zookeeper来完成了注册中心的功能。
Consul（原生，GO语言开发）
​	Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配
​	置。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和
​	Mac OS X)。
Nacos
​	相对于 Spring Cloud Eureka 来说，Nacos 更强大。
​	Nacos = Spring Cloud Eureka + Spring Cloud Config
​	Nacos 可以与 Spring, Spring Boot, Spring Cloud 集成，
​	并能代替 Spring Cloud Eureka, Spring Cloud Config。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nacos和Eureka的区别&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;部署方式不同&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	euraka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;是需要创建&lt;/span&gt;springboot&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;项目，然后将&lt;/span&gt;euraka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;服务端通过&lt;/span&gt;gav&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的方式加载进来，然后部署项目。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;是直接从阿里巴巴&lt;/span&gt;nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的官网下载&lt;/span&gt;jar&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;包，启动服务。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;连接方式不同&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;使用的是&lt;/span&gt;netty&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;和服务直接进行连接&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;属于长连接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	eureka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;是使用定时发送和服务进行联系&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;属于短连接&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;服务异常剔除策略不同&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	eureka&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Eureka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;中会定时向注册中心发送心跳，如果在规定时间内没有发送心跳&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，则就会直接剔除。&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Nacos&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;也会向注册中心发送心跳，但是它的频率要比&lt;/span&gt;Eureka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;快。&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;Nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;中又分为临时实例和非临时实例。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如果是临时实例的话，短期内没有发送心跳，则会直接剔除。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如果是非临时实例长时间宕机，不会直接剔除，并且注册中心会直接主动询问并且等待非临时实例。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;消费者拉去数据方式不同&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Eureka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;会定时向注册中心定时拉去服务&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如果不主动拉去服务&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;注册中心不会主动推送。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;中注册中心会定时向消费者主动推送信息&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;这样就会保持数据的准时性。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;自我保护机制不同&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Eureka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;保护方式：当在短时间内，统计续约失败的比例，如果达到一定阈值，则会触发自我保护的机制，在该机制下，&lt;/span&gt;Eureka Server&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不会剔除任何的微服务，等到正常后，再退出自我保护机制。自我保护开关&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eureka&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;preservation&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;保护方式：当域名健康实例&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Instance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;占总服务实例&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Instance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的比例小于阈值时，无论实例&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Instance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;是否健康，都会将这个实例&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Instance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;返回给客户端。这样做虽然损失了一部分流量，但是保证了集群的剩余健康实例&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Instance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;能正常工作。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6.&lt;/span&gt;Nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;集群默认采用&lt;/span&gt;AP&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;方式也可以修改为采用&lt;/span&gt;CP&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;模式；&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Eureka&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;采用&lt;/span&gt;AP&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;方式&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  C&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;一致性&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;A&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;高可用性&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;P&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;分区容错性&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;定理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5nacos多级服务存储模型&#34;&gt;5.Nacos多级服务存储模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/bb939bca375b4d71840a8cf015249156.png&#34;
	width=&#34;1962&#34;
	height=&#34;1008&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/bb939bca375b4d71840a8cf015249156_hu3b832e3d5ed61d5c6df009c6c588e670_324563_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/bb939bca375b4d71840a8cf015249156_hu3b832e3d5ed61d5c6df009c6c588e670_324563_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在这里插入图片描述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;467px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;1多级服务存储模型介绍&#34;&gt;1.多级服务存储模型介绍&lt;/h3&gt;
&lt;p&gt;为了提升整个系统的容灾性，Nacos 引入了地域 (Zone) 的概念，如上图中的北京、上海和杭州。把同一个服务的多个实例部署到不同地域的机房中(鸡蛋分开不同的篮子放) ；&lt;/p&gt;
&lt;p&gt;又把在同一个地域的机房的多个服务实例称为集群 (Cluster) 。比如，杭州机房的 2 个用户服务 &lt;code&gt;user-service&lt;/code&gt; 称为杭州 &lt;code&gt;user-service&lt;/code&gt; 集群。&lt;/p&gt;
&lt;p&gt;因此，在 Nacos 的服务分级模型中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一级是微服务 (如订单服务) ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二级是集群 (如北京订单服务集群、上海订单服务集群等) ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三集是实例 (如杭州服务集群的 8081 端口实例、8082 端口实例等) 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spring:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cloud&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nacos&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	 discovery&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		server&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; localhost&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8848&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#服务中心地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cluster&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; HZ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;集群名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682943142439.png&#34;
	width=&#34;956&#34;
	height=&#34;521&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682943142439_hu2e1dc475de573960f15063c75ea61777_147163_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682943142439_hu2e1dc475de573960f15063c75ea61777_147163_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682943142439&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;440px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2集群优先负载均衡策略&#34;&gt;2.集群优先负载均衡策略&lt;/h3&gt;
&lt;p&gt;对于服务的调用，杭州的服务消费者调用哪个服务提供者的效率会更高?&lt;/p&gt;
&lt;p&gt;肯定是调用杭州自身的服务肯定效率会比调用上海的更高，因此我们&lt;code&gt;对于同一集群下的服务应该优先调用&lt;/code&gt;，从而降低网络延时，提高响应速度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因此Nacos中提供了一个&lt;code&gt;NacosRule&lt;/code&gt;的实现，可以&lt;code&gt;优先从同集群中挑选实例&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;给服务消费者配置所在集群&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spring:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cloud&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nacos&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      server&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; localhost&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8848&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      discovery&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cluster&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; HZ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;集群名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;修改负载均衡规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;userservice:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ribbon&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NFLoadBalancerRuleClassName&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; com&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alibaba&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cloud&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nacos&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ribbon&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NacosRule&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;负载均衡规则&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;重新启动消费者和提供者&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;测试调用结果&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6服务实例的权重设置&#34;&gt;6.服务实例的权重设置&lt;/h2&gt;
&lt;p&gt;企业中我们部署项目的时候，可能会存在这么一种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企业里服务器设备，有一些机器性能比较好，还有一些属于是祖传设备了，性能非常的差，这个时候呢，我们肯定是希望这些性能好的机器，它承担更多的用户请求，而那些性能差一点的，自然是承担少一点的请求，正所谓能者多劳嘛。&lt;/li&gt;
&lt;li&gt;但是我们目前看来，NacosRule做到的是集群优先，而后做随机，当用户请求来了以后，它可不管你是性格好的还是差，这个身强力壮的还是老弱病残拉过来就一顿造，那这个时候那些性能差的肯定就会出问题。那么我们该怎样去控制不同服务它的一个请求量呢？于是,Nacos，给我们提供了一个权重的配置，通过修改服务实力的权重，可以控制访问频率，权重越大，访问到的频率就越高，那我们就可以把性能好的机器全都设得大一点，性能差一些呢，设置的小一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682943818566.png&#34;
	width=&#34;1152&#34;
	height=&#34;618&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682943818566_hu231b5e970fd37b9ad41697fa9c3ee23e_240716_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682943818566_hu231b5e970fd37b9ad41697fa9c3ee23e_240716_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682943818566&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;447px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;权重设置为0时&lt;/strong&gt;，该实例就不会被访问了，也就是说权重调整0时，它压根儿就不会被访问。&lt;/p&gt;
&lt;h2 id=&#34;7nacos多环境隔离-namespace&#34;&gt;7.Nacos多环境隔离-namespace&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;namespace理解&lt;/p&gt;
&lt;p&gt;Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682944914489.png&#34;
	width=&#34;339&#34;
	height=&#34;235&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682944914489_hubd877c5ea8a8f52a697511682056528b_3428_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682944914489_hubd877c5ea8a8f52a697511682056528b_3428_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682944914489&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;346px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Namespace：命名空间，常用于生产环境、开发环境的区分。
Group：组，常用将业务相关程度较高的放同一个组（订单和支付）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682945006922.png&#34;
	width=&#34;529&#34;
	height=&#34;276&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682945006922_hu789bdaf591b54e8086ccc133b750b807_22858_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682945006922_hu789bdaf591b54e8086ccc133b750b807_22858_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682945006922&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;460px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在服务提供者的application.yml中添加：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682945147536.png&#34;
	width=&#34;737&#34;
	height=&#34;253&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1682945147536_hu4b51c392e2f0845431b9e41103899984_43054_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1682945147536_hu4b51c392e2f0845431b9e41103899984_43054_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1682945147536&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;291&#34;
		data-flex-basis=&#34;699px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cloud:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nacos&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        discovery&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            namespace&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;命名空间&lt;/span&gt;ID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;p&gt;namespace用来做环境隔离。
每个namespace都有唯一id。
不同namespace下的服务不可见 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;nacos-配置中心&#34;&gt;Nacos 配置中心&lt;/h1&gt;
&lt;h2 id=&#34;1快速入门&#34;&gt;1.快速入门&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nacos配置中心依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-config&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bootstrap.yml&lt;/strong&gt; 配置文件中添加配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;nacos&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 配置中心配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;server-addr&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;localhost:8848&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;file-extension&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;discovery&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 注册中心配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;server-addr&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;localhost:8848&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在配置中心添加配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195052675.png&#34;
	width=&#34;1672&#34;
	height=&#34;351&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195052675_hu93df8c26d34f00c800682851672a010f_22167_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195052675_hu93df8c26d34f00c800682851672a010f_22167_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201125195052675&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;476&#34;
		data-flex-basis=&#34;1143px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;配置如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195156864.png&#34;
	width=&#34;1671&#34;
	height=&#34;844&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195156864_hu7a3eb07707565a19d3c938fb2354c07d_40498_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195156864_hu7a3eb07707565a19d3c938fb2354c07d_40498_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201125195156864&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;475px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data ID默认规则是：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，会加载Data ID以&lt;code&gt; ${spring.application.name}.${file-extension}&lt;/code&gt;为前缀的配置信息&lt;/li&gt;
&lt;li&gt;在bootstrap.yml中配置&lt;code&gt;spring.cloud.nacos.config.file-extension=yaml&lt;/code&gt;，会读取Data ID 为&lt;code&gt;${spring.application.name}.yaml&lt;/code&gt; 的配置信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启动user-service 服务,访问 http://localhost:8001/user/2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195230068.png&#34;
	width=&#34;480&#34;
	height=&#34;196&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195230068_hub762454b13f71390c8ec8b7ae167ce1b_7223_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195230068_hub762454b13f71390c8ec8b7ae167ce1b_7223_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201125195230068&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;244&#34;
		data-flex-basis=&#34;587px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2配置动态刷新&#34;&gt;2.配置动态刷新&lt;/h2&gt;
&lt;p&gt;在nacos中修改配置,点击发布&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195316802.png&#34;
	width=&#34;1666&#34;
	height=&#34;851&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195316802_hu2a5a84348b36101c2939ed46d48612a2_41643_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195316802_hu2a5a84348b36101c2939ed46d48612a2_41643_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201125195316802&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;会提示差别&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195329383.png&#34;
	width=&#34;1516&#34;
	height=&#34;651&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195329383_hufba910a863fd4bf4f4d1b538adaa9b9e_11687_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195329383_hufba910a863fd4bf4f4d1b538adaa9b9e_11687_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201125195329383&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;558px&#34;
	
&gt;点击发布后刷新页面,会看到最新的值&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195408894.png&#34;
	width=&#34;466&#34;
	height=&#34;198&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195408894_hu0b7913a9e8f88ef263c1e3dcfebf4519_7365_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201125195408894_hu0b7913a9e8f88ef263c1e3dcfebf4519_7365_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201125195408894&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;235&#34;
		data-flex-basis=&#34;564px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;3多环境配置与共享&#34;&gt;3.多环境配置与共享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;微服务启动时会从nacos读取多个配置文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;spring&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]-[&lt;/span&gt;spring&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;profiles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;active&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;【服务名】&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;【环境】&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如：&lt;/span&gt;userservice&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如：&lt;/span&gt;userservice&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如：&lt;/span&gt;userservice&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pro&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;、&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;spring&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;【服务名】&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如：&lt;/span&gt;userservice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;无论profile（环境）如何变化，[spring.application.name].yaml 这个文件一定会被加载、一定会被读取，因此&lt;strong&gt;多环境共享的配置&lt;/strong&gt;可以写入这个文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置实战&lt;/p&gt;
&lt;p&gt;userservice.yaml  userservice-test/dev/pro.yaml&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/910808fcd4154c20aeaa24f4aca3155a.png&#34;
	width=&#34;852&#34;
	height=&#34;491&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/910808fcd4154c20aeaa24f4aca3155a_hu90252f03ed2214854e5ed03a78d118f3_54360_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/910808fcd4154c20aeaa24f4aca3155a_hu90252f03ed2214854e5ed03a78d118f3_54360_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如图所示，我们在bootstrap.yml里面配置了 微服务名、Nacos地址、文件后缀名，由这三部分即可组成 userservice.yaml 文件配置名，也就是你在Nacos配置中心配置的名字，Nacos就是通过这种方式找到需要读取的配置文件的。&lt;/p&gt;
&lt;p&gt;根据图片配置，可以得知 userservice-dev.yaml 配置文件也会被读取到，因为配置了dev开发环境,但是无论如何 userservice.yaml配置文件是一定会被读取的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/98b2e31f63554f6ead8876695fa16c97.png&#34;
	width=&#34;1267&#34;
	height=&#34;502&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/98b2e31f63554f6ead8876695fa16c97_hubf28c091031e32c1afd456bc3d68a898_121702_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/98b2e31f63554f6ead8876695fa16c97_hubf28c091031e32c1afd456bc3d68a898_121702_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;252&#34;
		data-flex-basis=&#34;605px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;nacos集群&#34;&gt;Nacos集群&lt;/h1&gt;
&lt;h2 id=&#34;1nacos集群架构&#34;&gt;1.Nacos集群架构&lt;/h2&gt;
&lt;p&gt;Nacos集群的部署过程中,至少需要3台服务器部署节点集群&lt;/p&gt;
&lt;p&gt;安装3个以上Nacos&lt;/p&gt;
&lt;p&gt;​        我们可以复制之前已经解压好的nacos文件夹，分别命名为nacos,nacos1,nacos2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683014894641.png&#34;
	width=&#34;685&#34;
	height=&#34;776&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683014894641_hu9c55efbccb76ac0e8837187f21908249_56497_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683014894641_hu9c55efbccb76ac0e8837187f21908249_56497_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683014894641&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;211px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2nacos集群搭建步骤&#34;&gt;2.Nacos集群搭建步骤&lt;/h2&gt;
&lt;h3 id=&#34;21-第一步设置集群&#34;&gt;2.1 第一步设置集群&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nacos&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;中&lt;/span&gt;bin&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目录下打开&lt;/span&gt;startup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;设置集群&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1958425dd22a48cf9dfa9c32f2e46d4b.png&#34;
	width=&#34;1044&#34;
	height=&#34;449&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1958425dd22a48cf9dfa9c32f2e46d4b_hu877b2788becfaeaf42c69486ecf00c31_66495_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1958425dd22a48cf9dfa9c32f2e46d4b_hu877b2788becfaeaf42c69486ecf00c31_66495_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;558px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-第二步配置集群配置文件&#34;&gt;2.2 第二步配置集群配置文件&lt;/h3&gt;
&lt;p&gt;由于是单机演示，需要更改nacos/conf目录下application.peoperties中server.port,防止端口冲突,设置端口分别8848、8849、8850&lt;/p&gt;
&lt;p&gt;如果服务器有多个ip也要指定具体的ip地址，如:nacos.inetutils.ip-address=x.x.x.x&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8850&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; nacos&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inetutils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;address&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在所有nacos目录下conf目录下，有文件cluster.conf.exqmple，将其命名cluster.conf,并将每行配置成为ip:port.(请配置3个或者3个以上节点)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8848&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8849&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8850&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;23-第三步初始化-nacos的数据库为mysql数据库&#34;&gt;2.3 第三步初始化 nacos的数据库为mysql数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;找到/nacos/conf下的nacos-mysql.sql脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1c9f5955ed7e949f242a41039edae2d9.png&#34;
	width=&#34;554&#34;
	height=&#34;172&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1c9f5955ed7e949f242a41039edae2d9_huf6b7723eb266f309ab6907bb6adf44f7_74816_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1c9f5955ed7e949f242a41039edae2d9_huf6b7723eb266f309ab6907bb6adf44f7_74816_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;322&#34;
		data-flex-basis=&#34;773px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在MySQL实例创建 nacos库并执行sql脚本&lt;/p&gt;
&lt;p&gt;​	&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/307de645f39cc9bbedbc70d066cc57fd.png&#34;
	width=&#34;511&#34;
	height=&#34;253&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/307de645f39cc9bbedbc70d066cc57fd_hub15affe7387cbd9d216745d88da4a826_68697_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/307de645f39cc9bbedbc70d066cc57fd_hub15affe7387cbd9d216745d88da4a826_68697_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;201&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 Nacos 配置文件，指向MySQL实例，替换其内嵌数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/d57252ab11dacdbf42b545e62c83ff5c.png&#34;
	width=&#34;554&#34;
	height=&#34;149&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/d57252ab11dacdbf42b545e62c83ff5c_hu350168bdf6790f3d7a0c4e67d5240eeb_69800_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/d57252ab11dacdbf42b545e62c83ff5c_hu350168bdf6790f3d7a0c4e67d5240eeb_69800_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;371&#34;
		data-flex-basis=&#34;892px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在application.properties中找到如下配置，该配置默认为注释掉的，取消注释即可，修改数据库信息为实际的数据库信息后保存。其他nacos服务实例也需要做同样的修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683015673779.png&#34;
	width=&#34;1175&#34;
	height=&#34;455&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683015673779_hu6e8d001e65a73dd365de9333c4f5c16f_32343_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683015673779_hu6e8d001e65a73dd365de9333c4f5c16f_32343_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683015673779&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;258&#34;
		data-flex-basis=&#34;619px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了达到高可用，通常MySQL也需要集群，nacos的配置文件也需要指定每一个MySQL实例的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683015794539.png&#34;
	width=&#34;1104&#34;
	height=&#34;460&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683015794539_hu6fd9df7fa44c51106417c32f71a3e070_32493_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683015794539_hu6fd9df7fa44c51106417c32f71a3e070_32493_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683015794539&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;576px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-第四步集群模式部署启动&#34;&gt;2.4 第四步集群模式部署启动&lt;/h3&gt;
&lt;p&gt;分别执行nacos目录下的startup&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;startup -m cluster
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果启动失败可能的原因是:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nacos配置文件application.properties中默认的数据库连接超时时间设置较短，如下图，因为网络延时等原因，MySQL可能会连接超时导致nacos启动报错，因此只需要将超时时间适当设置长一些即可&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jdbc:mysql&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//127.0.0.1:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;虚拟机内存不足，由于在vmvare创建虚拟机时，只给每个虚拟分配了1G的内存，从nacos的启动脚本startup.sh中可知，nacos以集群模式启动时，默认分配的java堆内存空间为2G，因此可判断是由于虚拟机内存不足导致nacos启动报错，修改虚拟机内存为2G后可以正常启动。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683016453763.png&#34;
	width=&#34;891&#34;
	height=&#34;285&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683016453763_hu7f8f1dd020e4bcf2991198f3279d4b1e_20382_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683016453763_hu7f8f1dd020e4bcf2991198f3279d4b1e_20382_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683016453763&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;openfeign--声明式服务调用&#34;&gt;OpenFeign  声明式服务调用&lt;/h1&gt;
&lt;p&gt;在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://user-service/user/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; restTemplate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getForObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？
这就是我们接下来要学的OpenFeign的功能了。&lt;/p&gt;
&lt;h2 id=&#34;1-简介&#34;&gt;1 简介&lt;/h2&gt;
&lt;p&gt;OpenFeign可以把Rest的请求进行隐藏，伪装成类似Spring MVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。&lt;/p&gt;
&lt;h2 id=&#34;2-快速入门-重点&#34;&gt;2 快速入门 (重点)&lt;/h2&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt; 添加openfeign依赖
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; 在启动类上添加EnableFeignClients的注解
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;3.&lt;/span&gt; 自定义feignClient接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;4.&lt;/span&gt; 通过feignClient调用接口
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;在服务消费者导入依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在启动类上添加&lt;code&gt;@EnableFeignClients&lt;/code&gt;注解&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringCloudApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableFeignClients&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConsumerApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConsumerApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OpenFeign中已经封装了RestTemplate并集成了Ribbon负载均衡，因此不需要自己定义&lt;code&gt;RestTemplate&lt;/code&gt;了  ，可以注释所有使用&lt;code&gt;RestTemplate&lt;/code&gt;的地方&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;编写Feign客户端[接口]&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FeignClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-service&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 添加FeignClient，指定服务ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User &lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟mybatis的mapper很像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@FeignClient ，声明这是一个Feign客户端，同时通过 value 属性指定服务名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;改造controller中的调用逻辑，使用HelloClient访问：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 注入UserClient
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; UserClient userClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;访问http://localhost:9001/consumer/user/2,可以看到成功返回数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200916101452222.png&#34;
	width=&#34;496&#34;
	height=&#34;206&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200916101452222_hu283415f8c840265f1fb18db1c56be40d_7796_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20200916101452222_hu283415f8c840265f1fb18db1c56be40d_7796_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200916101452222&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;577px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;3openfeign的自定义配置&#34;&gt;3.OpenFeign的自定义配置&lt;/h2&gt;
&lt;h3 id=&#34;1超时控制&#34;&gt;1.超时控制&lt;/h3&gt;
&lt;p&gt;Feign客户端默认等待1s，若服务端处理需要超过1s，导致Feign客户端不想等了，直接返回报错。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Slf4j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${server.port}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;port &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; 所在服务调用了getById...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tom&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; from &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yml文件配置OpenFeign超时控制&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ribbon:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ReadTimeout: 5000 //建立连接后从服务器读取到可用资源所用的时间
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ConnectTimeout: 5000 //建立连接所用的时间
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2日志配置&#34;&gt;2.日志配置&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683017944020.png&#34;
	width=&#34;597&#34;
	height=&#34;160&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683017944020_hubc2305847ddfacb03700af0f256d83cb_14845_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683017944020_hubc2305847ddfacb03700af0f256d83cb_14845_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683017944020&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;373&#34;
		data-flex-basis=&#34;895px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//此处不用添加@Configuration,不然会被作为全局配置文件共享
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FeignConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Level&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;feignLoggerLevel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Level&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FULL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;全局配置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;在&lt;/span&gt;FeignConfig&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;类上添加&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;就成为全局配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;或者在启动类的&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableFeignClients&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的&lt;/span&gt;defaultConfiguration&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;指定该配置类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;局部配置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//基于注解配置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FeignClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;服务名&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;configuration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;配置类&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User &lt;span style=&#34;color:#a6e22e&#34;&gt;getById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//基于yaml配置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//#开启Feign的局部日志级别
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;feign:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  client&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    config&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      feign&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;provider&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logger&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;level&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; FULL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;必须调整&lt;/span&gt;SpringBoot&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;日志的输出级别为&lt;/span&gt;Debug&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;否则无法输出&lt;/span&gt;OpenFeign&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的调用信息&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  level&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    com&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;zhyp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;feign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4openfeign优化实战&#34;&gt;4.OpenFeign优化实战&lt;/h2&gt;
&lt;h3 id=&#34;超时优化&#34;&gt;超时优化&lt;/h3&gt;
&lt;p&gt;我们介绍过OpenFeign 底层内置了 Ribbon 框架，并且使用了 Ribbon 的请求连接超时时间和请求处理超时时间作为其超时时间，而 Ribbon 默认的请求连接超时时间和请求处理超时时间都是 1s&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以通过配置来修改：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;全局配置  使用ribbon.&lt;!-- raw HTML omitted --&gt;=&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ribbon&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ReadTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 数据通信超时时长 默认为1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ConnectTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 连接超时时长 默认为1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#重试机制的优化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;OkToRetryOnAllOperations&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 对所有的操作请求都进行重试(对于查询和修改我们可以重试,对于增删重试操作是危险的)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;MaxAutoRetries&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试访问&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;MaxAutoRetriesNextServer&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 当前服务总是超时时,切换实例的次数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;如果要指定某个服务,配置: &lt;!-- raw HTML omitted --&gt;.ribbon.&lt;!-- raw HTML omitted --&gt; = &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;也可以通过直接修改feign的配置来实现&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;feign:
 client:
  config:
   default: # 设置的全局超时时间
     connectTimeout: 2000 # 请求连接的超时时间
     readTimeout: 5000 # 请求处理的超时时间
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请求连接优化&#34;&gt;请求连接优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenFeign 底层通信组件默认使用 JDK 自带的 URLConnection 对象进行 HTTP 请求的，因为没有使用连接池，所以性能不是很好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们可以将 OpenFeign 的通讯组件，手动替换成像 Apache HttpClient 或 OKHttp 这样的专用通信组件，这些的专用通信组件自带连接池可以更好地对 HTTP 连接对象进行重用与管理，同时也能大大的提升 HTTP 请求的效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 添加 openfeign 框架依赖 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 添加 httpclient 框架依赖 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.github.openfeign&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-httpclient&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 添加 okhttp 框架依赖 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.github.openfeign&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-okhttp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;feign:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  okhttp:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    enabled: true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 或者
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;feign:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  httpclient:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    enabled: true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据压缩优化&#34;&gt;数据压缩优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 OpenFeign 中，默认并没有开启数据压缩功能。但如果你在服务间单次传递数据超过 1K 字节，强烈推荐开启数据压缩功能。&lt;/li&gt;
&lt;li&gt;默认 OpenFeign 使用 Gzip 方式压缩数据，对于大文本通常压缩后尺寸只相当于原始数据的 10%~30%，这会极大提高带宽利用率。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;feign:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  compression:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    request:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      enabled: true  # 开启请求数据的压缩功能
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mime-types: text/xml,application/xml, application/json  # 压缩类型
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      min-request-size: 1024  # 最小压缩值标准，当数据大于 1024 才会进行压缩
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      enabled: true  # 开启响应数据压缩功能
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 优化并不是套路,如果是OpenFeign中就自己默认给优化了,我们需要结合项目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;如果应用属于计算密集型，CPU 负载长期超过 70%，因数据压缩、解压缩都需要 CPU 运算，开启数据压缩功能反而会给 CPU 增加额外负担，导致系统性能降低，这是不可取的。这种情况 建议不要开启数据的压缩功能
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;负载均衡优化&#34;&gt;负载均衡优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenFeign 使用时默认引用 Ribbon 实现客户端负载均衡，它默认的负载均衡策略是轮询策略。那如何设置 Ribbon 默认的负载均衡策略呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只需在 application.yml 中调整微服务通信时使用的负载均衡类即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xxx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;service&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#服务提供者的微服务&lt;/span&gt;ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ribbon&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#设置对应的负载均衡类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NFLoadBalancerRuleClassName&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; com&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;netflix&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadbalancer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RandomRule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683020760909.png&#34;
	width=&#34;1331&#34;
	height=&#34;789&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683020760909_hu347ec8f44dd8bb18c859251efc821997_590747_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683020760909_hu347ec8f44dd8bb18c859251efc821997_590747_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683020760909&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;404px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;日志级别优化&#34;&gt;日志级别优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;OpenFeign 提供了日志增强功能，它的日志级别有以下几个：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NONE：&lt;/strong&gt;  默认的，不显示任何日志。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BASIC：&lt;/strong&gt;  仅记录请求方法、URL、响应状态码及执行时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HEADERS：&lt;/strong&gt;  除了 BASIC 中定义的信息之外，还有请求和响应的头信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FULL：&lt;/strong&gt;  除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全局配置+指定服务配置&lt;/p&gt;
&lt;p&gt;注意: springboot默认输出info级别的信息,OpenFeign输出的信息是debug级别&lt;/p&gt;
&lt;p&gt;于是需要设置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#properties配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging.level.包名=debug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#yaml配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	level: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		包名: debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;网关gateway&#34;&gt;网关Gateway&lt;/h1&gt;
&lt;h2 id=&#34;1-gateway网关-概述&#34;&gt;1 Gateway网关-概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网关旨在为微服务架构提供一种简单而有效的统一的API管理和路由方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在微服务架构中，不同的微服务可以有不同的网络地址，各个微服务之间通过互相调用完成用户请求，客户端可能通过调用N个微服务的接口完成一个用户请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在的问题：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1.客户端多次请求不同的微服务，增加客户端的复杂性
2.认证复杂，每个服务都要进行认证
3.http请求不同服务次数增加，性能不高
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;网关就是系统的入口，封装了应用程序的内部结构，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、缓存、负载均衡、流量管控、路由转发等&lt;/li&gt;
&lt;li&gt;在目前的网关解决方案里，有Nginx+ Lua、Netflix Zuul 、Spring Cloud Gateway等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587544847831.png&#34;
	width=&#34;756&#34;
	height=&#34;366&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587544847831_hub66fce5b7e1b0e0c5ccafa40ee395425_39033_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1587544847831_hub66fce5b7e1b0e0c5ccafa40ee395425_39033_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1587544847831&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;495px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-gateway-快速入门&#34;&gt;2 Gateway-快速入门&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;搭建网关模块&lt;/p&gt;
&lt;p&gt;创建api-gateway模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入依赖：starter-gateway&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--网关也需要从注册中心中拉去所有服务信息,因为他要负责路由--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--网关的jar--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-gateway&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;注意: 这里不需要spring-boot-starter-web 因为gateway自带了
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写启动类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.itheima.gateway&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.SpringBootApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.cloud.netflix.eureka.EnableEurekaClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ApiGatewayApp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ApiGatewayApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写配置文件&lt;/p&gt;
&lt;p&gt;application.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;api-gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 网关配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;gateway&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 路由配置：转发规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#集合。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# id: 唯一标识。默认是一个UUID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# uri: 转发路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# predicates: 条件,用于请求网关路径的匹配规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://localhost:8001/ &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#lb://微服务id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;predicates&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;Path=/user/**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动测试 , 访问 http://localhost:8888/user/3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124201738925.png&#34;
	width=&#34;544&#34;
	height=&#34;210&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124201738925_hu1ec5474c02c6f00761f253b5c1cd0115_7432_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124201738925_hu1ec5474c02c6f00761f253b5c1cd0115_7432_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201124201738925&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;259&#34;
		data-flex-basis=&#34;621px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3路由断言工厂predicatefactory&#34;&gt;3.路由断言工厂PredicateFactory&lt;/h2&gt;
&lt;p&gt;路由是网关的基本模块。它由ID、目标URI、Predicate集合和Filter集合定义。如果聚合Predicate为真，则匹配路由。&lt;/p&gt;
&lt;p&gt;接下来详细介绍断言，如我们刚刚的配置的predicates中的每一个配置官方都称之为路由断言工厂。它的作用就是：当请求gateway的时候，使用断言对请求进行匹配，如果匹配成功就路由转发，如果匹配失败就返回404&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Path 路由断言工厂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;我们快速入门案例中使用的，也支持通配符，如果有多个path中间使用逗号分隔
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	例如: - Path=/user/**,/order/{oid}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Date路由断言工厂&lt;/p&gt;
&lt;p&gt;有After/Before/Between三种与时间相关的路由断言工厂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Before&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;路由断言工厂接受一个日期时间。此断言匹配在该日期时间之前发生的请求。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; Before&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;T19&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Asia&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Shanghai&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;After&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;路由断言工厂接受一个日期时间，该断言匹配该日期时间之后的请求。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; After&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;T19&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00.129&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Asia&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Shanghai&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Between&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;路由断言工厂接受两个日期时间。此断言匹配发生两个日期之间的请求。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; Between&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;T19&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00.129&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Asia&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Shanghai&lt;span style=&#34;color:#f92672&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;T19&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00.129&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Asia&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Shanghai&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cookie路由断言工厂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cookie&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;路由断言工厂接受两个参数，即&lt;/span&gt;Cookie&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;名称和配置值的正则表达式。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; Cookie&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;java&lt;span style=&#34;color:#f92672&#34;&gt;,.*&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Header路由断言工厂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Header&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;路由断言工厂接受两个参数，&lt;/span&gt;Header&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;名称和配置值的正则表达式。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; Header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;address&lt;span style=&#34;color:#f92672&#34;&gt;,.*&lt;/span&gt;ok&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Method路由断言工厂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Method&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;路由断言工厂接受一个或者多个参数：要匹配的&lt;/span&gt;HTTP&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;请求方式。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; Method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;POST
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query路由断言工厂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Query&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;路由断言工厂接受两个参数：必需的&lt;/span&gt;param&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;和可选的&lt;/span&gt;regexp&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;。匹配当前请求的参数中是否匹配该路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; Query&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;green &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如果请求包含&lt;/span&gt;green&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;查询参数，则路由匹配。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;例如&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:-&lt;/span&gt; Query&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ba&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如果请求包含&lt;/span&gt;foo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;查询参数&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;且值为&lt;/span&gt;ba&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;开头的三个字母，则路由匹配&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4过滤器工厂filter-factory&#34;&gt;4.过滤器工厂Filter Factory&lt;/h2&gt;
&lt;p&gt;gateway 里面的过滤器和 Servlet 里面的过滤器，功能差不多，路由过滤器可以用于修改进入Http 请求和返回 Http 响应&lt;/p&gt;
&lt;h3 id=&#34;41-过滤器-概述&#34;&gt;4.1 过滤器-概述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gateway 支持过滤器功能，对请求或响应进行拦截，完成一些通用操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gateway 提供两种过滤器方式：“pre”和“post”&lt;/p&gt;
&lt;p&gt;​      &lt;strong&gt;pre 过滤器&lt;/strong&gt;，在转发之前执行，可以做参数校验、权限校验、流量监控、日志输出、协议转换等。
​      &lt;strong&gt;post 过滤器&lt;/strong&gt;，在后端微服务响应之后并且给前端响应之前执行，可以做响应内容、响应头的修改，日志的输出，流量监控等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gateway 还提供了两种类型过滤器
​    &lt;strong&gt;GatewayFilter&lt;/strong&gt;：局部过滤器，针对单个路由
​    &lt;strong&gt;GlobalFilter&lt;/strong&gt; ：全局过滤器，针对所有路由&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587546321584.png&#34;
	width=&#34;1749&#34;
	height=&#34;873&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587546321584_hue558233e729fd154cdd7329f606202ab_144613_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1587546321584_hue558233e729fd154cdd7329f606202ab_144613_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1587546321584&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-局部过滤器gatewayfilter&#34;&gt;4.2-局部过滤器GatewayFilter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GatewayFilter 局部过滤器，是针对单个路由的过滤器。&lt;/li&gt;
&lt;li&gt;在Spring Cloud Gateway 组件中提供了大量内置的局部过滤器，对请求和响应做过滤操作。&lt;/li&gt;
&lt;li&gt;遵循约定大于配置的思想，只需要在配置文件配置局部过滤器名称，并为其指定对应的值，就可以让其生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改配置 application.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;api-gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 网关配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;gateway&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 路由配置：转发规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#集合。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# id: 唯一标识。默认是一个UUID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# uri: 转发路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# predicates: 条件,用于请求网关路径的匹配规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;lb://user-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;predicates&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;Path=/user/**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;filters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;AddRequestParameter=name,admin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;nacos&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;discovery&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;server-addr&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;localhost:8848&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在user-service模块的UserController中添加方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;getUser&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1L&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; from &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问http://localhost:8001/user/name&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204113931.png&#34;
	width=&#34;489&#34;
	height=&#34;206&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204113931_hu835d858b73d7cf9b6aae9b25975490e6_7372_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204113931_hu835d858b73d7cf9b6aae9b25975490e6_7372_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201124204113931&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;237&#34;
		data-flex-basis=&#34;569px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通过网关访问http://localhost:8888/user/name&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204135300.png&#34;
	width=&#34;493&#34;
	height=&#34;199&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204135300_hu164153421b21820001d55f5f0eb93c5b_7466_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204135300_hu164153421b21820001d55f5f0eb93c5b_7466_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201124204135300&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;594px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方列出的31个局部过滤器&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029414852.png&#34;
	width=&#34;935&#34;
	height=&#34;697&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029414852_hu4cfe002396f969143d4fe35774648cfc_79447_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029414852_hu4cfe002396f969143d4fe35774648cfc_79447_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683029414852&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029448410.png&#34;
	width=&#34;928&#34;
	height=&#34;747&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029448410_hufe34b641e9d6ea2b0db934930e27f530_80334_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029448410_hufe34b641e9d6ea2b0db934930e27f530_80334_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683029448410&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;298px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029487803.png&#34;
	width=&#34;929&#34;
	height=&#34;140&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029487803_huf7452b6094f8abcfe48b348d71f756ee_16378_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683029487803_huf7452b6094f8abcfe48b348d71f756ee_16378_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683029487803&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;663&#34;
		data-flex-basis=&#34;1592px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;43-全局过滤器globalfilter&#34;&gt;4.3-全局过滤器GlobalFilter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GlobalFilter 全局过滤器，不需要在配置文件中配置，系统初始化时加载，并作用在每个路由上。&lt;/li&gt;
&lt;li&gt;Spring Cloud Gateway 核心的功能也是通过内置的全局过滤器来完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587546455139.png&#34;
	width=&#34;1449&#34;
	height=&#34;882&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1587546455139_hu133ff802be3e32e82b4317f4e08a1014_112528_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1587546455139_hu133ff802be3e32e82b4317f4e08a1014_112528_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1587546455139&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;44-全局过滤器案例&#34;&gt;4.4 全局过滤器案例&lt;/h3&gt;
&lt;p&gt;统计请求次数 限流  token  的校验  ip  黑名单拦截 跨域(filter)  我们可以自定义全局过滤&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义全局过滤器步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义类实现 GlobalFilter 和 Ordered接口&lt;/li&gt;
&lt;li&gt;复写方法&lt;/li&gt;
&lt;li&gt;完成逻辑处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;==需求: 自定义全局过滤,要求访问的请求中要包含token字段,否则不允许访问==&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.heima.gateway.filter&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.cloud.gateway.filter.GatewayFilterChain&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.cloud.gateway.filter.GlobalFilter&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.core.Ordered&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.http.HttpStatus&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.http.server.reactive.ServerHttpRequest&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.http.server.reactive.ServerHttpResponse&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Service&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.util.StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.web.server.ServerWebExchange&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.core.publisher.Mono&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyFilter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; GlobalFilter&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Ordered &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Mono&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServerWebExchange exchange&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; GatewayFilterChain chain&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 需求 如果请求头中带有token,则放行,否则提示未授权状态(401)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;自定义全局过滤器执行了~~~&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 获取请求对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ServerHttpRequest request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHeaders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFirst&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;token&lt;span style=&#34;color:#f92672&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 获取响应对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ServerHttpResponse response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getResponse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 返回响应码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setStatusCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpStatus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UNAUTHORIZED&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 完成响应
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setComplete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; chain&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//放行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 过滤器排序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return 数值越小 越先执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getOrder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动测试 , 使用postman来请求 ,访问 http://localhost:8888/user/3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204812200.png&#34;
	width=&#34;1528&#34;
	height=&#34;491&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204812200_hu472fb80e39a8cf172ae7bcf329417d64_49380_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204812200_hu472fb80e39a8cf172ae7bcf329417d64_49380_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201124204812200&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;311&#34;
		data-flex-basis=&#34;746px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在header中添加token&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204857395.png&#34;
	width=&#34;1404&#34;
	height=&#34;604&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204857395_hu2f0e4b9e3cfb99e6214a2a0e281b3d36_62883_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20201124204857395_hu2f0e4b9e3cfb99e6214a2a0e281b3d36_62883_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20201124204857395&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;557px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;5过滤器-限流实战&#34;&gt;5.过滤器-限流实战&lt;/h2&gt;
&lt;h3 id=&#34;51-限流介绍&#34;&gt;5.1 限流介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;限流:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是通过对并发访问/请求进行限速或者对一个时间窗口内的请求进行限速来保护系统，一旦达到限制速率则可由拒绝服务，就是定向到错误页或友好的展示页，排队或等待&lt;/p&gt;
&lt;p&gt;在高并发的系统中，往往需要在系统中做限流，一方面是为了防止大量的请求使服务器过载，导致服务不可用，另一方面是为了防止网络攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常见的限流算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;==计数器算法==&lt;/p&gt;
&lt;p&gt;计数器算法采用计数器实现限流有点简单粗暴，一般我们会限制一秒钟的能够通过的请求数，比如限流qps为100，算法的实现思路就是从第一个请求进来开始计时，在接下去的1s内，每来一个请求，就把计数加1，如果累加的数字达到了100，那么后续的请求就会被全部拒绝。等到1s结束后，把计数恢复成0，重新开始计数。具体的实现可以是这样的：对于每次服务调用，可以通过AtomicLong#incrementAndGet()方法来给计数器加1并返回最新值，通过这个最新值和阈值进行比较。这种实现方式，相信大家都知道有一个弊端：如果我在单位时间1s内的前10ms，已经通过了100个请求，那后面的990ms，只能眼巴巴的把请求拒绝，我们把这种现象称为“突刺现象”&lt;/p&gt;
&lt;p&gt;==漏桶算法==&lt;/p&gt;
&lt;p&gt;漏桶算法为了消除&amp;quot;突刺现象&amp;quot;，可以采用漏桶算法实现限流，漏桶算法这个名字就很形象，算法内部有一个容器，类似生活用到的漏斗，当请求进来时，相当于水倒入漏斗，然后从下端小口慢慢匀速的流出。不管上面流量多大，下面流出的速度始终保持不变。不管服务调用方多么不稳定，通过漏桶算法进行限流，每10毫秒处理一次请求。因为处理的速度是固定的，请求进来的速度是未知的，可能突然进来很多请求，没来得及处理的请求就先放在桶里，既然是个桶，肯定是有容量上限，如果桶满了，那么新进来的请求就丢弃。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/616619ee3a43a061b1f048aa2d4385e7.png&#34;
	width=&#34;443&#34;
	height=&#34;299&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/616619ee3a43a061b1f048aa2d4385e7_hud9b593fc40685850670af62b4d56a6e2_13766_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/616619ee3a43a061b1f048aa2d4385e7_hud9b593fc40685850670af62b4d56a6e2_13766_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;355px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在算法实现方面，可以准备一个队列，用来保存请求，另外通过一个线程池(ScheduledExecutorService)来定期从队列中获取请求并执行，可以一次性获取多个并发执行。&lt;/p&gt;
&lt;p&gt;这种算法，在使用过后也存在弊端：无法应对短时间的突发流量。&lt;/p&gt;
&lt;p&gt;==令牌桶算法==&lt;/p&gt;
&lt;p&gt;从某种意义上讲，令牌桶算法是对漏桶算法的一种改进，漏桶算法能够限制请求调用的速率，而令牌桶算法能够在限制调用的平均速率的同时还允许一定程度的突发调用。在令牌桶算法中，存在一个桶，用来存放固定数量的令牌。算法中存在一种机制，以一定的速率往桶中放令牌。每次请求调用需要先获取令牌，只有拿到令牌，才有机会继续执行，否则选择选择等待可用的令牌、或者直接拒绝。放令牌这个动作是持续不断的进行，如果桶中令牌数达到上限，就丢弃令牌，所以就存在这种情况，桶中一直有大量的可用令牌，这时进来的请求就可以直接拿到令牌执行，比如设置qps为100，那么限流器初始化完成一秒后，桶中就已经有100个令牌了，这时服务还没完全启动好，等启动完成对外提供服务时，该限流器可以抵挡瞬时的100个请求。所以，只有桶中没有令牌时，请求才会进行等待，最后相当于以一定的速率执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/ad621771af0b43d9434d4d3b493fceca.png&#34;
	width=&#34;700&#34;
	height=&#34;779&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/ad621771af0b43d9434d4d3b493fceca_hu7e28a67b66d8b0e34592c54e4724a37b_30991_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/ad621771af0b43d9434d4d3b493fceca_hu7e28a67b66d8b0e34592c54e4724a37b_30991_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;215px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现思路：可以准备一个队列，用来保存令牌，另外通过一个线程池定期生成令牌放到队列中，每来一个请求，就从队列中获取一个令牌，并继续执行。&lt;/p&gt;
&lt;h3 id=&#34;52-gateway限流和自定义限流&#34;&gt;5.2 Gateway限流和自定义限流&lt;/h3&gt;
&lt;p&gt;在Spring Cloud Gateway中，有Filter过滤器，因此可以在“pre”类型的Filter中自行实现上述三种过滤器。限流作为网关最基本的功能，Spring Cloud Gateway官方就提供了&lt;strong&gt;RequestRateLimiterGatewayFilterFactory&lt;/strong&gt;这个类，基于&lt;strong&gt;Redis和Lua&lt;/strong&gt;脚本实现了&lt;strong&gt;令牌桶&lt;/strong&gt;的方式限流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于基于Redis实现的,所以需要引入Redis依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置Redis和限流规则&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spring:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  redis&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    host&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    port&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cloud&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gateway&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      routes&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; after_route
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          uri&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; http&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//localhost:8001/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          predicates&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Path&lt;span style=&#34;color:#f92672&#34;&gt;=/&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          filters&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; RequestRateLimiter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              args&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;令牌桶每秒填充平均速率&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                redis&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rate&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limiter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replenishRate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;令牌桶的上限&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                redis&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rate&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;limiter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;burstCapacity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;使用&lt;/span&gt;SpEL&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;表达式从&lt;/span&gt;Spring&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;容器中获取&lt;/span&gt;Bean&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                key&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;resolver&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#{@pathKeyResolver}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义限流键&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyKeyResolver&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; KeyResolver &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 返回值Mono&amp;lt;String&amp;gt;中的泛型表示令牌与根据哪个值进行绑定
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 比如:  如果是常量值  那么表示全局限流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 比如:	如果是用户ip 那么表示对每个用户限流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 比如:  如果是接口路径 那么表示对当前接口限流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Mono&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServerWebExchange exchange&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getURI&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//根据ip限流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        String hostAddress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHostAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Mono&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hostAddress&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他限流方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 通过IP限流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; KeyResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;ipKeyResolver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; KeyResolver&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Mono&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServerWebExchange exchange&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Mono&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHostName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 通过用户限流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 请求路径中必须要包含用户的唯一表示，userId参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; KeyResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;userKeyResolver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; exchange &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Mono&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getQueryParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFirst&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 通过接口限流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 请求地址的uri作为限流的key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; KeyResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKeyResolver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; exchange &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Mono&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRequest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6gateway跨域配置&#34;&gt;6.GateWay跨域配置&lt;/h2&gt;
&lt;h3 id=&#34;61-跨域理解&#34;&gt;6.1 跨域理解&lt;/h3&gt;
&lt;p&gt;我们经常会在一个(A服务器)页面中发起一个请求(ajax,axios),当一个请求url的&lt;strong&gt;协议、域名、端口&lt;/strong&gt;三者任意一个与当前页面url不同即为跨域。&lt;/p&gt;
&lt;p&gt;简单的说就是发起请求的那个页面的地址 和 请求的接口地址 不在同一个域中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;浏览器不能执行其他网站的脚本，从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。跨域是由浏览器的同源策略造成的，是浏览器施加的安全限制。a网站页面想获取b网站的资源，如果a、b的协议、域名、端口、不同，所进行的访问行动都是跨域的。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683079850244.png&#34;
	width=&#34;1257&#34;
	height=&#34;307&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1683079850244_hu8e58ee1d5ebed86b5868bf03d9cd88cc_51219_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1683079850244_hu8e58ee1d5ebed86b5868bf03d9cd88cc_51219_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1683079850244&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;409&#34;
		data-flex-basis=&#34;982px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域的本质&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;跨域本质是浏览器基于&lt;strong&gt;同源策略&lt;/strong&gt;的一种安全手段,非同源的请求可以发出,服务器也可以返回结果,但是浏览器基于同源策略不会接收返回的结果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;62-gateway的跨域配置&#34;&gt;6.2 GateWay的跨域配置&lt;/h3&gt;
&lt;p&gt;我们了解了跨域的概念和原因,解决跨域的方式就很简单了,只需要在服务器返回的response中添加几个头信息,通知浏览器允许接收跨域信息即可.&lt;/p&gt;
&lt;p&gt;如果每个请求的response都去写,那么就太麻烦了,我们可以考虑一个全局的过滤器,当请求执行后在response响应给浏览器之前添加允许跨域的头信息即可.&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway已经解决跨域问题,只需要使用一个CorsWebFilter过滤器即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CorsConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CorsWebFilter &lt;span style=&#34;color:#a6e22e&#34;&gt;corsFilter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CorsConfiguration config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CorsConfiguration&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAllowedMethod&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAllowedOrigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAllowedHeader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UrlBasedCorsConfigurationSource source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UrlBasedCorsConfigurationSource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PathPatternParser&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        source&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerCorsConfiguration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/**&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CorsWebFilter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spring:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cloud&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gateway&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      globalcors&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;全局的跨域处理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;simple&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;handler&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mapping&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;解决&lt;/span&gt;options&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;请求被拦截问题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        corsConfigurations&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[/**]&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            allowedOrigins&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;允许哪些网站的跨域请求&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:8090&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.leyou.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            allowedMethods&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;允许的跨域&lt;/span&gt;ajax&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;的请求方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPTIONS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            allowedHeaders&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;允许在请求中携带的头信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            allowCredentials&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;是否允许携带&lt;/span&gt;cookie
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            maxAge&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;360000&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;这次跨域检测的有效期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7-gateway-静态路由&#34;&gt;7. Gateway-静态路由&lt;/h2&gt;
&lt;p&gt;application.yml  中的uri是写死的，就是静态路由&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;api-gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 网关配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;gateway&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 路由配置：转发规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#集合。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# id: 唯一标识。默认是一个UUID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# uri: 转发路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# predicates: 条件,用于请求网关路径的匹配规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://localhost:8001/  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;#要路由的微服务地址 静态地址  静态路由  就算微服务只有一台 也不建议这么写&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;predicates&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;Path=/user/**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8-gateway-动态路由&#34;&gt;8. Gateway-动态路由&lt;/h2&gt;
&lt;p&gt;添加注册中心&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&amp;lt;dependency&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&amp;lt;/dependency&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动类添加&lt;code&gt;@EnableDiscoveryClient&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableDiscoveryClient&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ApiGatewayApp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ApiGatewayApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;application.yml  中添加注册中心地址及修改uri属性：uri: lb://服务名称&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;api-gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 网关配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;gateway&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 路由配置：转发规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#集合。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# id: 唯一标识。默认是一个UUID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# uri: 转发路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# predicates: 条件,用于请求网关路径的匹配规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user-service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;lb://user-service  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;#lb开头表示负载均衡,后面还是微服务的id,必须和nacos或者eureka注册中心的名字一模一样(大小写也)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;predicates&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;Path=/user/**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;nacos&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;discovery&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;server-addr&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;localhost:8848&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;sentinel微服务保护&#34;&gt;Sentinel微服务保护&lt;/h1&gt;
&lt;h1 id=&#34;1初识sentinel&#34;&gt;1.初识Sentinel&lt;/h1&gt;
&lt;h2 id=&#34;11雪崩问题及解决方案&#34;&gt;1.1.雪崩问题及解决方案&lt;/h2&gt;
&lt;h3 id=&#34;111雪崩问题&#34;&gt;1.1.1.雪崩问题&lt;/h3&gt;
&lt;p&gt;微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1533829099748.png&#34;
	width=&#34;663&#34;
	height=&#34;578&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1533829099748_huc2157f4b79db6cf00383441a6f2ec486_115498_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1533829099748_huc2157f4b79db6cf00383441a6f2ec486_115498_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1533829099748&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;275px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如图，如果服务提供者I发生了故障，当前的应用的部分业务因为依赖于服务I，因此也会被阻塞。此时，其它不依赖于服务I的业务似乎不受影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1533829198240.png&#34;
	width=&#34;658&#34;
	height=&#34;567&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/1533829198240_hu7267be5c00597a9e15129b5e416788be_124768_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/1533829198240_hu7267be5c00597a9e15129b5e416788be_124768_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1533829198240&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;但是，依赖服务I的业务请求被阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞&lt;/p&gt;
&lt;p&gt;服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。&lt;/p&gt;
&lt;p&gt;那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172710340.png&#34;
	width=&#34;792&#34;
	height=&#34;481&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172710340_hud448b14951a469ee4b8b04f125487fb6_53170_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172710340_hud448b14951a469ee4b8b04f125487fb6_53170_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715172710340&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;395px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;112超时处理&#34;&gt;1.1.2.超时处理&lt;/h3&gt;
&lt;p&gt;解决雪崩问题的常见方式有四种：&lt;/p&gt;
&lt;p&gt;•超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172820438.png&#34;
	width=&#34;785&#34;
	height=&#34;420&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172820438_hu0de880134388112307db6780fbc6541a_17879_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172820438_hu0de880134388112307db6780fbc6541a_17879_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715172820438&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;448px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;113仓壁模式&#34;&gt;1.1.3.仓壁模式&lt;/h3&gt;
&lt;p&gt;方案2：仓壁模式&lt;/p&gt;
&lt;p&gt;仓壁模式来源于船舱的设计：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172946352.png&#34;
	width=&#34;500&#34;
	height=&#34;179&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172946352_hua971b277d633e9dd27b1679b4816e7c9_38744_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715172946352_hua971b277d633e9dd27b1679b4816e7c9_38744_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715172946352&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;279&#34;
		data-flex-basis=&#34;670px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;船舱都会被隔板分离为多个独立空间，当船体破损时，只会导致部分空间进入，将故障控制在一定范围内，避免整个船体都被淹没。&lt;/p&gt;
&lt;p&gt;于此类似，我们可以限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173215243.png&#34;
	width=&#34;765&#34;
	height=&#34;419&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173215243_hua8e5f7fd9833218583c4b8f208f9e6fd_25086_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173215243_hua8e5f7fd9833218583c4b8f208f9e6fd_25086_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715173215243&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;114断路器&#34;&gt;1.1.4.断路器&lt;/h3&gt;
&lt;p&gt;断路器模式：由&lt;strong&gt;断路器&lt;/strong&gt;统计业务执行的异常比例，如果超出阈值则会&lt;strong&gt;熔断&lt;/strong&gt;该业务，拦截访问该业务的一切请求。&lt;/p&gt;
&lt;p&gt;断路器会统计访问某个服务的请求数量，异常比例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173327075.png&#34;
	width=&#34;615&#34;
	height=&#34;468&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173327075_hu9f27a5f576432a44a7828638d5669ff5_19287_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173327075_hu9f27a5f576432a44a7828638d5669ff5_19287_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715173327075&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;315px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当发现访问服务D的请求异常比例过高时，认为服务D有导致雪崩的风险，会拦截访问服务D的一切请求，形成熔断：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173428073.png&#34;
	width=&#34;585&#34;
	height=&#34;463&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173428073_hu71eec2b1ffa67c5490e49f031c4d83f3_23263_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173428073_hu71eec2b1ffa67c5490e49f031c4d83f3_23263_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715173428073&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;115限流&#34;&gt;1.1.5.限流&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;流量控制&lt;/strong&gt;：限制业务访问的QPS，避免服务因流量的突增而故障。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173555158.png&#34;
	width=&#34;1346&#34;
	height=&#34;359&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173555158_hu865e4579af429416a5368f6feae08438_86844_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173555158_hu865e4579af429416a5368f6feae08438_86844_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715173555158&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;374&#34;
		data-flex-basis=&#34;899px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;116总结&#34;&gt;1.1.6.总结&lt;/h3&gt;
&lt;p&gt;什么是雪崩问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以认为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限流&lt;/strong&gt;是对服务的保护，避免因瞬间高并发流量而导致服务故障，进而避免雪崩。是一种&lt;strong&gt;预防&lt;/strong&gt;措施。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时处理、线程隔离、降级熔断&lt;/strong&gt;是在部分服务故障时，将故障控制在一定范围，避免雪崩。是一种&lt;strong&gt;补救&lt;/strong&gt;措施。&lt;/p&gt;
&lt;h2 id=&#34;12服务保护技术对比&#34;&gt;1.2.服务保护技术对比&lt;/h2&gt;
&lt;p&gt;在SpringCloud当中支持多种服务保护技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Netflix/Hystrix&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Netfix Hystrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/Sentinel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sentinel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/resilience4j/resilience4j&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Resilience4J&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早期比较流行的是Hystrix框架，但目前国内实用最广泛的还是阿里巴巴的Sentinel框架，这里我们做下对比：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Sentinel&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Hystrix&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;熔断降级策略&lt;/td&gt;
&lt;td&gt;基于慢调用比例或异常比例&lt;/td&gt;
&lt;td&gt;基于失败比率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实时指标实现&lt;/td&gt;
&lt;td&gt;滑动窗口&lt;/td&gt;
&lt;td&gt;滑动窗口（基于 RxJava）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;规则配置&lt;/td&gt;
&lt;td&gt;支持多种数据源&lt;/td&gt;
&lt;td&gt;支持多种数据源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;扩展性&lt;/td&gt;
&lt;td&gt;多个扩展点&lt;/td&gt;
&lt;td&gt;插件的形式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基于注解的支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;限流&lt;/td&gt;
&lt;td&gt;基于 QPS，支持基于调用关系的限流&lt;/td&gt;
&lt;td&gt;有限的支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;流量整形&lt;/td&gt;
&lt;td&gt;支持慢启动、匀速排队模式&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;系统自适应保护&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制台&lt;/td&gt;
&lt;td&gt;开箱即用，可配置规则、查看秒级监控、机器发现等&lt;/td&gt;
&lt;td&gt;不完善&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;隔离策略&lt;/td&gt;
&lt;td&gt;信号量隔离&lt;/td&gt;
&lt;td&gt;线程池隔离/信号量隔离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;常见框架的适配&lt;/td&gt;
&lt;td&gt;Servlet、Spring Cloud、Dubbo、gRPC  等&lt;/td&gt;
&lt;td&gt;Servlet、Spring Cloud Netflix&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;13sentinel介绍和安装&#34;&gt;1.3.Sentinel介绍和安装&lt;/h2&gt;
&lt;h3 id=&#34;131初识sentinel&#34;&gt;1.3.1.初识Sentinel&lt;/h3&gt;
&lt;p&gt;Sentinel是阿里巴巴开源的一款微服务流量控制组件。官网地址：https://sentinelguard.io/zh-cn/index.html&lt;/p&gt;
&lt;p&gt;Sentinel 具有以下特征:&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;丰富的应用场景&lt;/strong&gt;：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;完备的实时监控&lt;/strong&gt;：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;广泛的开源生态&lt;/strong&gt;：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;完善的&lt;/strong&gt; &lt;strong&gt;SPI&lt;/strong&gt; &lt;strong&gt;扩展点&lt;/strong&gt;：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。&lt;/p&gt;
&lt;h3 id=&#34;132安装sentinel&#34;&gt;1.3.2.安装Sentinel&lt;/h3&gt;
&lt;p&gt;1）下载&lt;/p&gt;
&lt;p&gt;sentinel官方提供了UI控制台，方便我们对系统做限流设置。大家可以在&lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/Sentinel/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;下载。&lt;/p&gt;
&lt;p&gt;课前资料也提供了下载好的jar包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715174252531.png&#34;
	width=&#34;889&#34;
	height=&#34;51&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715174252531_hu76b8fedaee493a2ed8e1b73d3e207e36_17274_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715174252531_hu76b8fedaee493a2ed8e1b73d3e207e36_17274_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715174252531&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1743&#34;
		data-flex-basis=&#34;4183px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;2）运行&lt;/p&gt;
&lt;p&gt;将jar包放到任意非中文目录，执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar sentinel-dashboard-1.8.1.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;配置项&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;默认值&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;server.port&lt;/td&gt;
&lt;td&gt;8080&lt;/td&gt;
&lt;td&gt;服务端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sentinel.dashboard.auth.username&lt;/td&gt;
&lt;td&gt;sentinel&lt;/td&gt;
&lt;td&gt;默认用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sentinel.dashboard.auth.password&lt;/td&gt;
&lt;td&gt;sentinel&lt;/td&gt;
&lt;td&gt;默认密码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例如，修改端口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -Dserver.port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8090&lt;/span&gt; -jar sentinel-dashboard-1.8.1.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3）访问&lt;/p&gt;
&lt;p&gt;访问http://localhost:8080页面，就可以看到sentinel的控制台了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715190827846.png&#34;
	width=&#34;518&#34;
	height=&#34;259&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715190827846_hu56a8059f54764c6000c20538243961a9_23173_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715190827846_hu56a8059f54764c6000c20538243961a9_23173_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715190827846&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;需要输入账号和密码，默认都是：sentinel&lt;/p&gt;
&lt;p&gt;登录后，发现一片空白，什么都没有：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191134448.png&#34;
	width=&#34;1016&#34;
	height=&#34;375&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191134448_hu3d855f6322cf26efa1ded3574a31d027_69769_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191134448_hu3d855f6322cf26efa1ded3574a31d027_69769_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715191134448&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;270&#34;
		data-flex-basis=&#34;650px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这是因为我们还没有与微服务整合。&lt;/p&gt;
&lt;h2 id=&#34;14微服务整合sentinel&#34;&gt;1.4.微服务整合Sentinel&lt;/h2&gt;
&lt;p&gt;我们在sentinel-order-service中整合sentinel，并连接sentinel的控制台，步骤如下：&lt;/p&gt;
&lt;p&gt;1）引入sentinel依赖&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果出现版本问题,不要直接去修改sentinel的版本,而是父pom中spring-cloud-alibaba-dependencies的版本&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--sentinel--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-sentinel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）配置控制台&lt;/p&gt;
&lt;p&gt;修改application.yaml文件，添加下面内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8088&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;sentinel&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;transport&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;dashboard&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;localhost:8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3）访问order-service的任意端点&lt;/p&gt;
&lt;p&gt;打开浏览器，访问http://localhost:8088/order/101，这样才能触发sentinel的监控。&lt;/p&gt;
&lt;p&gt;然后再访问sentinel的控制台，查看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191241799.png&#34;
	width=&#34;1854&#34;
	height=&#34;871&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191241799_hu4ff05437a8530416067703490ceb437f_245108_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191241799_hu4ff05437a8530416067703490ceb437f_245108_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715191241799&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;510px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;2流量控制&#34;&gt;2.流量控制&lt;/h1&gt;
&lt;p&gt;雪崩问题虽然有四种方案，但是限流是&lt;strong&gt;避免&lt;/strong&gt;服务因突发的流量而发生故障，是对微服务雪崩问题的预防。我们先学习这种模式。&lt;/p&gt;
&lt;h2 id=&#34;21簇点链路&#34;&gt;2.1.簇点链路&lt;/h2&gt;
&lt;p&gt;当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做&lt;strong&gt;簇点链路&lt;/strong&gt;。簇点链路中被监控的每一个接口就是一个&lt;strong&gt;资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认情况&lt;/strong&gt;下sentinel会监控SpringMVC的每一个端点（Endpoint，也就是controller中的方法），因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源。&lt;/p&gt;
&lt;p&gt;例如，我们刚才访问的order-service中的OrderController中的端点：/order/{orderId}&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191757319.png&#34;
	width=&#34;1365&#34;
	height=&#34;455&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191757319_hu3723d82b1f4e7db3e7c67d7a709d5756_135823_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191757319_hu3723d82b1f4e7db3e7c67d7a709d5756_135823_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715191757319&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;300&#34;
		data-flex-basis=&#34;720px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流控：流量控制&lt;/li&gt;
&lt;li&gt;降级：降级熔断&lt;/li&gt;
&lt;li&gt;热点：热点参数限流，是限流的一种&lt;/li&gt;
&lt;li&gt;授权：请求的权限控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;21快速入门&#34;&gt;2.1.快速入门&lt;/h2&gt;
&lt;h3 id=&#34;211示例&#34;&gt;2.1.1.示例&lt;/h3&gt;
&lt;p&gt;点击资源/order/{orderId}后面的流控按钮，就可以弹出表单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191757319.png&#34;
	width=&#34;1365&#34;
	height=&#34;455&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191757319_hu3723d82b1f4e7db3e7c67d7a709d5756_135823_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715191757319_hu3723d82b1f4e7db3e7c67d7a709d5756_135823_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715191757319&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;300&#34;
		data-flex-basis=&#34;720px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;表单中可以填写限流规则，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715192010657.png&#34;
	width=&#34;744&#34;
	height=&#34;430&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715192010657_hu23b5f5ca15fad2e373ddfffa6b9de3c8_44629_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715192010657_hu23b5f5ca15fad2e373ddfffa6b9de3c8_44629_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715192010657&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其含义是限制 /order/{orderId}这个资源的单机QPS为1，即每秒只允许1次请求，超出的请求会被拦截并报错。&lt;/p&gt;
&lt;h3 id=&#34;212练习&#34;&gt;2.1.2.练习：&lt;/h3&gt;
&lt;p&gt;需求：给 /order/{orderId}这个资源设置流控规则，QPS不能超过 5，然后测试。&lt;/p&gt;
&lt;p&gt;1）首先在sentinel控制台添加限流规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715192455429.png&#34;
	width=&#34;696&#34;
	height=&#34;176&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715192455429_hu937baf8848ac60e83865208a73ac1757_23813_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715192455429_hu937baf8848ac60e83865208a73ac1757_23813_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715192455429&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;395&#34;
		data-flex-basis=&#34;949px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;2）利用jmeter测试&lt;/p&gt;
&lt;p&gt;如果没有用过jmeter，可以参考课前资料提供的文档《Jmeter快速入门.md》&lt;/p&gt;
&lt;p&gt;课前资料提供了编写好的Jmeter测试样例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200431615.png&#34;
	width=&#34;389&#34;
	height=&#34;287&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200431615_huca462d6c95d69e156fa7d30e26b64367_17219_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200431615_huca462d6c95d69e156fa7d30e26b64367_17219_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715200431615&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;打开jmeter，导入课前资料提供的测试样例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200537171.png&#34;
	width=&#34;305&#34;
	height=&#34;186&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200537171_hu8915a0768480b3748f9e5e08d7ed9ae7_9922_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200537171_hu8915a0768480b3748f9e5e08d7ed9ae7_9922_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715200537171&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;163&#34;
		data-flex-basis=&#34;393px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;选择：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200635414.png&#34;
	width=&#34;991&#34;
	height=&#34;439&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200635414_hu3b08b0aee91f2df05784f20ad7008ab3_79323_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200635414_hu3b08b0aee91f2df05784f20ad7008ab3_79323_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715200635414&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;541px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;20个用户，2秒内运行完，QPS是10，超过了5.&lt;/p&gt;
&lt;p&gt;选中&lt;code&gt;流控入门，QPS&amp;lt;5&lt;/code&gt;右键运行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200804594.png&#34;
	width=&#34;536&#34;
	height=&#34;293&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200804594_hu16b9f4d2a7665d6768d2c42beb97635c_42345_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200804594_hu16b9f4d2a7665d6768d2c42beb97635c_42345_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715200804594&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;439px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，不要点击菜单中的执行按钮来运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200853671.png&#34;
	width=&#34;221&#34;
	height=&#34;375&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200853671_hu83f7b255f3445cc012f764ae7d945712_51149_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715200853671_hu83f7b255f3445cc012f764ae7d945712_51149_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715200853671&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;58&#34;
		data-flex-basis=&#34;141px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，成功的请求每次只有5个&lt;/p&gt;
&lt;h2 id=&#34;22流控模式&#34;&gt;2.2.流控模式&lt;/h2&gt;
&lt;p&gt;在添加限流规则时，点击高级选项，可以选择三种&lt;strong&gt;流控模式&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式&lt;/li&gt;
&lt;li&gt;关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流&lt;/li&gt;
&lt;li&gt;链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715201827886.png&#34;
	width=&#34;696&#34;
	height=&#34;267&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715201827886_hu4395297a45cabd4e01a0c6422ee893a8_36714_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715201827886_hu4395297a45cabd4e01a0c6422ee893a8_36714_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715201827886&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;260&#34;
		data-flex-basis=&#34;625px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;快速入门测试的就是直接模式。&lt;/p&gt;
&lt;h3 id=&#34;221关联模式&#34;&gt;2.2.1.关联模式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;关联模式&lt;/strong&gt;：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置规则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715202540786.png&#34;
	width=&#34;673&#34;
	height=&#34;350&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715202540786_hu79b9ada449eff1049e4796cf734f1389_46751_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715202540786_hu79b9ada449eff1049e4796cf734f1389_46751_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715202540786&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法说明&lt;/strong&gt;：当/write资源访问量触发阈值时，就会对/read资源限流，避免影响/write资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求说明&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在OrderController新建两个端点：/order/query和/order/update，无需实现业务&lt;/li&gt;
&lt;li&gt;配置流控规则，当/order/ update资源被访问的QPS超过5时，对/order/query请求限流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1）定义/order/query端点，模拟订单查询&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;queryOrder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;查询订单成功&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）定义/order/update端点，模拟订单更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/update&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;updateOrder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;更新订单成功&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启服务，查看sentinel控制台的簇点链路：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716101805951.png&#34;
	width=&#34;747&#34;
	height=&#34;514&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716101805951_huf8db6242aca8f0e638bef89217c75d38_45288_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716101805951_huf8db6242aca8f0e638bef89217c75d38_45288_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716101805951&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;348px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3）配置流控规则&lt;/p&gt;
&lt;p&gt;对哪个端点限流，就点击哪个端点后面的按钮。我们是对订单查询/order/query限流，因此点击它后面的按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716101934499.png&#34;
	width=&#34;1321&#34;
	height=&#34;117&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716101934499_hud02a325f9b24141663196545d870bd87_20232_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716101934499_hud02a325f9b24141663196545d870bd87_20232_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716101934499&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1129&#34;
		data-flex-basis=&#34;2709px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在表单中填写流控规则：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102103814.png&#34;
	width=&#34;921&#34;
	height=&#34;730&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102103814_huccea18308c4c7d8566d514aa6d809a8f_114286_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102103814_huccea18308c4c7d8566d514aa6d809a8f_114286_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716102103814&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;302px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;4）在Jmeter测试&lt;/p&gt;
&lt;p&gt;选择《流控模式-关联》：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102416266.png&#34;
	width=&#34;905&#34;
	height=&#34;314&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102416266_hu9f9172559b9e03b5101f747835541f6c_27947_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102416266_hu9f9172559b9e03b5101f747835541f6c_27947_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716102416266&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;288&#34;
		data-flex-basis=&#34;691px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到1000个用户，100秒，因此QPS为10，超过了我们设定的阈值：5&lt;/p&gt;
&lt;p&gt;查看http请求：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102532554.png&#34;
	width=&#34;1011&#34;
	height=&#34;237&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102532554_hue1342e730bc7de7f216161d8b5060040_24217_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102532554_hue1342e730bc7de7f216161d8b5060040_24217_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716102532554&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;426&#34;
		data-flex-basis=&#34;1023px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;请求的目标是/order/update，这样这个断点就会触发阈值。&lt;/p&gt;
&lt;p&gt;但限流的目标是/order/query，我们在浏览器访问，可以发现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102636030.png&#34;
	width=&#34;654&#34;
	height=&#34;147&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102636030_hu53824900baaec1db24aadb21f43d1c16_37578_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716102636030_hu53824900baaec1db24aadb21f43d1c16_37578_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716102636030&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;444&#34;
		data-flex-basis=&#34;1067px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;确实被限流了。&lt;/p&gt;
&lt;p&gt;5）总结&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716103143002.png&#34;
	width=&#34;1183&#34;
	height=&#34;231&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716103143002_hu3a03bedcec31602d2b899b91368a5554_23275_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716103143002_hu3a03bedcec31602d2b899b91368a5554_23275_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716103143002&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;512&#34;
		data-flex-basis=&#34;1229px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;222链路模式&#34;&gt;2.2.2.链路模式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;链路模式&lt;/strong&gt;：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;例如有两条请求链路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/test1 &amp;ndash;&amp;gt; /common&lt;/li&gt;
&lt;li&gt;/test2 &amp;ndash;&amp;gt; /common&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果只希望统计从/test2进入到/common的请求，则可以这样配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716103536346.png&#34;
	width=&#34;582&#34;
	height=&#34;276&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716103536346_huc27e006aca9a9d76eff77b2f83b28e18_33407_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716103536346_huc27e006aca9a9d76eff77b2f83b28e18_33407_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716103536346&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;506px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实战案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在OrderService中添加一个queryGoods方法，不用实现业务&lt;/li&gt;
&lt;li&gt;在OrderController中，改造/order/query端点，调用OrderService中的queryGoods方法&lt;/li&gt;
&lt;li&gt;在OrderController中添加一个/order/save的端点，调用OrderService的queryGoods方法&lt;/li&gt;
&lt;li&gt;给queryGoods设置限流规则，从/order/query进入queryGoods的方法限制QPS必须小于2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;h4 id=&#34;1添加查询商品方法&#34;&gt;1）添加查询商品方法&lt;/h4&gt;
&lt;p&gt;在order-service服务中，给OrderService类添加一个queryGoods方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queryGoods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;查询商品&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2查询订单时查询商品&#34;&gt;2）查询订单时，查询商品&lt;/h4&gt;
&lt;p&gt;在order-service的OrderController中，修改/order/query端点的业务逻辑：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;queryOrder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查询商品
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    orderService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;queryGoods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查询订单
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;查询订单&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;查询订单成功&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3新增订单查询商品&#34;&gt;3）新增订单，查询商品&lt;/h4&gt;
&lt;p&gt;在order-service的OrderController中，修改/order/save端点，模拟新增订单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/save&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;saveOrder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查询商品
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    orderService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;queryGoods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查询订单
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新增订单&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新增订单成功&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4给查询商品添加资源标记&#34;&gt;4）给查询商品添加资源标记&lt;/h4&gt;
&lt;p&gt;默认情况下，OrderService中的方法是不被Sentinel监控的，需要我们自己通过注解来标记要监控的方法。&lt;/p&gt;
&lt;p&gt;给OrderService的queryGoods方法添加@SentinelResource注解：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SentinelResource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goods&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queryGoods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;查询商品&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。&lt;/p&gt;
&lt;p&gt;我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;sentinel&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;web-context-unify&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 关闭context整合&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;这个配置必须是sentinel-2.1.3版本或者以上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启服务，访问/order/query和/order/save，可以查看到sentinel的簇点链路规则中，出现了新的资源：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105227163.png&#34;
	width=&#34;835&#34;
	height=&#34;585&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105227163_hu1a9d1bc06427e2477aa84f6f5499b758_49307_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105227163_hu1a9d1bc06427e2477aa84f6f5499b758_49307_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716105227163&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;5添加流控规则&#34;&gt;5）添加流控规则&lt;/h4&gt;
&lt;p&gt;点击goods资源后面的流控按钮，在弹出的表单中填写下面信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105408723.png&#34;
	width=&#34;826&#34;
	height=&#34;663&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105408723_hu35b34bf5e01685ffe626021256601bb7_98586_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105408723_hu35b34bf5e01685ffe626021256601bb7_98586_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716105408723&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;299px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;只统计从/order/query进入/goods的资源，QPS阈值为2，超出则被限流。&lt;/p&gt;
&lt;h4 id=&#34;6jmeter测试&#34;&gt;6）Jmeter测试&lt;/h4&gt;
&lt;p&gt;选择《流控模式-链路》：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105612312.png&#34;
	width=&#34;904&#34;
	height=&#34;253&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105612312_hu6b58a1eafe7fd26d771ef5a0be1c00f3_23952_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105612312_hu6b58a1eafe7fd26d771ef5a0be1c00f3_23952_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716105612312&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;357&#34;
		data-flex-basis=&#34;857px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到这里200个用户，50秒内发完，QPS为4，超过了我们设定的阈值2&lt;/p&gt;
&lt;p&gt;一个http请求是访问/order/save：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105812789.png&#34;
	width=&#34;921&#34;
	height=&#34;194&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105812789_hu8e3c92dbe05b0b6f2d8b2532b9f695e9_20956_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105812789_hu8e3c92dbe05b0b6f2d8b2532b9f695e9_20956_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716105812789&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;474&#34;
		data-flex-basis=&#34;1139px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;运行的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110027064.png&#34;
	width=&#34;642&#34;
	height=&#34;338&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110027064_huc9942db8a56ad594e5cd4810b23ec3fd_78452_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110027064_huc9942db8a56ad594e5cd4810b23ec3fd_78452_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716110027064&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;完全不受影响。&lt;/p&gt;
&lt;p&gt;另一个是访问/order/query：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105855951.png&#34;
	width=&#34;975&#34;
	height=&#34;195&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105855951_hu1d6fd457fce4c8ae25072c002afa50d0_21154_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105855951_hu1d6fd457fce4c8ae25072c002afa50d0_21154_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716105855951&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;500&#34;
		data-flex-basis=&#34;1200px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105956401.png&#34;
	width=&#34;711&#34;
	height=&#34;431&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105956401_hu4210fc9104c9e94d2237d02942c41e12_92739_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716105956401_hu4210fc9104c9e94d2237d02942c41e12_92739_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716105956401&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;395px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;每次只有2个通过。&lt;/p&gt;
&lt;h3 id=&#34;223总结&#34;&gt;2.2.3.总结&lt;/h3&gt;
&lt;p&gt;流控模式有哪些？&lt;/p&gt;
&lt;p&gt;•直接：对当前资源限流&lt;/p&gt;
&lt;p&gt;•关联：高优先级资源触发阈值，对低优先级资源限流。&lt;/p&gt;
&lt;p&gt;•链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流&lt;/p&gt;
&lt;h2 id=&#34;23流控效果&#34;&gt;2.3.流控效果&lt;/h2&gt;
&lt;p&gt;在流控的高级选项中，还有一个流控效果选项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110225104.png&#34;
	width=&#34;660&#34;
	height=&#34;175&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110225104_hud678374fce5efeb2b1fa32c7d02f16ac_27319_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110225104_hud678374fce5efeb2b1fa32c7d02f16ac_27319_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716110225104&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;377&#34;
		data-flex-basis=&#34;905px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;流控效果是指请求达到流控阈值时应该采取的措施，包括三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。&lt;/li&gt;
&lt;li&gt;warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。&lt;/li&gt;
&lt;li&gt;排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;231warm-up&#34;&gt;2.3.1.warm up&lt;/h3&gt;
&lt;p&gt;阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（&lt;strong&gt;冷启动&lt;/strong&gt;），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。&lt;/p&gt;
&lt;p&gt;warm up也叫&lt;strong&gt;预热模式&lt;/strong&gt;，是应对服务冷启动的一种方案。请求阈值初始值是 maxThreshold / coldFactor，持续指定时长后，逐渐提高到maxThreshold值。而coldFactor的默认值是3.&lt;/p&gt;
&lt;p&gt;例如，我设置QPS的maxThreshold为9，预热时间为3秒，那么初始阈值就是 10 / 3 ，也就是3，然后在3秒后逐渐增长到9.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110629796.png&#34;
	width=&#34;1046&#34;
	height=&#34;462&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110629796_hue387d41d6178c59c24be7fb6203cf54e_40465_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716110629796_hue387d41d6178c59c24be7fb6203cf54e_40465_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716110629796&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;543px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用warm up效果，预热时长为5秒&lt;/p&gt;
&lt;h4 id=&#34;1配置流控规则&#34;&gt;1）配置流控规则：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111012387.png&#34;
	width=&#34;833&#34;
	height=&#34;644&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111012387_hud00d22ca83cc95c4abb37727ca9eecab_93666_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111012387_hud00d22ca83cc95c4abb37727ca9eecab_93666_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716111012387&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;310px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2jmeter测试&#34;&gt;2）Jmeter测试&lt;/h4&gt;
&lt;p&gt;选择《流控效果，warm up》：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111136699.png&#34;
	width=&#34;986&#34;
	height=&#34;339&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111136699_huee89a0d7529365957e2fd459c24f1431_30200_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111136699_huee89a0d7529365957e2fd459c24f1431_30200_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716111136699&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;698px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;QPS为10.&lt;/p&gt;
&lt;p&gt;刚刚启动时，大部分请求失败，成功的只有3个，说明QPS被限定在3：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111303701.png&#34;
	width=&#34;661&#34;
	height=&#34;439&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111303701_huf9a22e55b38c224162d4defb5540f8a7_87539_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111303701_huf9a22e55b38c224162d4defb5540f8a7_87539_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716111303701&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;随着时间推移，成功比例越来越高：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111404717.png&#34;
	width=&#34;603&#34;
	height=&#34;557&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111404717_hu7cb95dff88cafe7cdde1dd1151d69923_103710_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111404717_hu7cb95dff88cafe7cdde1dd1151d69923_103710_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716111404717&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;259px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;到Sentinel控制台查看实时监控：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111526480.png&#34;
	width=&#34;747&#34;
	height=&#34;439&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111526480_hu613b9a51b64295d91a671635d04f8275_45310_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111526480_hu613b9a51b64295d91a671635d04f8275_45310_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716111526480&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一段时间后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111658541.png&#34;
	width=&#34;745&#34;
	height=&#34;423&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111658541_hu8943b9eb9e075e35b82f084eff2a32c1_43531_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716111658541_hu8943b9eb9e075e35b82f084eff2a32c1_43531_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716111658541&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;422px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;232排队等待&#34;&gt;2.3.2.排队等待&lt;/h3&gt;
&lt;p&gt;当请求超过QPS阈值时，快速失败和warm up 会拒绝新的请求并抛出异常。&lt;/p&gt;
&lt;p&gt;而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。&lt;/p&gt;
&lt;p&gt;工作原理&lt;/p&gt;
&lt;p&gt;例如：QPS = 5，意味着每200ms处理一个队列中的请求；timeout = 2000，意味着&lt;strong&gt;预期等待时长&lt;/strong&gt;超过2000ms的请求会被拒绝并抛出异常。&lt;/p&gt;
&lt;p&gt;那什么叫做预期等待时长呢？&lt;/p&gt;
&lt;p&gt;比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第6个请求的&lt;strong&gt;预期等待时长&lt;/strong&gt; =  200 * （6 - 1） = 1000ms  1200m  1400ms&lt;/li&gt;
&lt;li&gt;第12个请求的预期等待时长 = 200 * （12-1） = 2200ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，第1秒同时接收到10个请求，但第2秒只有1个请求，此时QPS的曲线这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716113147176.png&#34;
	width=&#34;766&#34;
	height=&#34;360&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716113147176_hu9b6ada2f6f1b1089ce04f2b1925a2c55_5254_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716113147176_hu9b6ada2f6f1b1089ce04f2b1925a2c55_5254_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716113147176&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;510px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果使用队列模式做流控，所有进入的请求都要排队，以固定的200ms的间隔执行，QPS会变的很平滑：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716113426524.png&#34;
	width=&#34;715&#34;
	height=&#34;350&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716113426524_hu1b776448fe57cc6e36c12a780ddec7c1_3814_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716113426524_hu1b776448fe57cc6e36c12a780ddec7c1_3814_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716113426524&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;490px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;平滑的QPS曲线，对于服务器来说是更友好的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用排队的流控效果，超时时长设置为5s&lt;/p&gt;
&lt;h4 id=&#34;1添加流控规则&#34;&gt;1）添加流控规则&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114048918.png&#34;
	width=&#34;829&#34;
	height=&#34;638&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114048918_huc58fcff686991b5438700498c154fc40_90102_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114048918_huc58fcff686991b5438700498c154fc40_90102_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716114048918&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2jmeter测试-1&#34;&gt;2）Jmeter测试&lt;/h4&gt;
&lt;p&gt;选择《流控效果，队列》：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114243558.png&#34;
	width=&#34;981&#34;
	height=&#34;308&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114243558_huf2b985f51fce1e3b55c1bb74264f2efd_28083_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114243558_huf2b985f51fce1e3b55c1bb74264f2efd_28083_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716114243558&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;318&#34;
		data-flex-basis=&#34;764px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;QPS为15，已经超过了我们设定的10。&lt;/p&gt;
&lt;p&gt;如果是之前的 快速失败、warmup模式，超出的请求应该会直接报错。&lt;/p&gt;
&lt;p&gt;但是我们看看队列模式的运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114429361.png&#34;
	width=&#34;671&#34;
	height=&#34;489&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114429361_huc7a01143c7125c17e9212795c9e9dd71_99286_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114429361_huc7a01143c7125c17e9212795c9e9dd71_99286_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716114429361&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;全部都通过了。&lt;/p&gt;
&lt;p&gt;再去sentinel查看实时监控的QPS曲线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114522935.png&#34;
	width=&#34;1490&#34;
	height=&#34;427&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114522935_hu83e0bff4d7025aeef8b82b7c14565e8a_77852_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114522935_hu83e0bff4d7025aeef8b82b7c14565e8a_77852_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716114522935&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;348&#34;
		data-flex-basis=&#34;837px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;QPS非常平滑，一致保持在10，但是超出的请求没有被拒绝，而是放入队列。因此&lt;strong&gt;响应时间&lt;/strong&gt;（等待时间）会越来越长。&lt;/p&gt;
&lt;p&gt;当队列满了以后，才会有部分请求失败：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114651137.png&#34;
	width=&#34;1516&#34;
	height=&#34;453&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114651137_hu73580cdc40468736194ed4e677fb6b2d_79149_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716114651137_hu73580cdc40468736194ed4e677fb6b2d_79149_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716114651137&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;334&#34;
		data-flex-basis=&#34;803px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;233总结&#34;&gt;2.3.3.总结&lt;/h3&gt;
&lt;p&gt;流控效果有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速失败：QPS超过阈值时，拒绝新的请求&lt;/li&gt;
&lt;li&gt;warm up： QPS超过阈值时，拒绝新的请求；QPS阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。&lt;/li&gt;
&lt;li&gt;排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求；如果请求预期等待时长大于超时时间，直接拒绝&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24热点参数限流&#34;&gt;2.4.热点参数限流&lt;/h2&gt;
&lt;p&gt;之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是&lt;strong&gt;分别统计参数值相同的请求&lt;/strong&gt;，判断是否超过QPS阈值。&lt;/p&gt;
&lt;h3 id=&#34;241全局参数限流&#34;&gt;2.4.1.全局参数限流&lt;/h3&gt;
&lt;p&gt;例如，一个根据id查询商品的接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115014663.png&#34;
	width=&#34;721&#34;
	height=&#34;281&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115014663_hu00eb799e75f327019efd83195cd335ed_18087_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115014663_hu00eb799e75f327019efd83195cd335ed_18087_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716115014663&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;256&#34;
		data-flex-basis=&#34;615px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;访问/goods/{id}的请求中，id参数值会有变化，热点参数限流会根据参数值分别统计QPS，统计结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115131463.png&#34;
	width=&#34;1212&#34;
	height=&#34;312&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115131463_hu3207ac9614294004ffc4cd4059edee60_25697_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115131463_hu3207ac9614294004ffc4cd4059edee60_25697_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716115131463&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;388&#34;
		data-flex-basis=&#34;932px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当id=1的请求触发阈值被限流时，id值不为1的请求不受影响。&lt;/p&gt;
&lt;p&gt;配置示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115232426.png&#34;
	width=&#34;571&#34;
	height=&#34;183&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115232426_hu8c78119369e063a1427aedf20f13cb96_18482_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115232426_hu8c78119369e063a1427aedf20f13cb96_18482_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716115232426&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;748px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;代表的含义是：对hot这个资源的0号参数（第一个参数）做统计，每1秒&lt;strong&gt;相同参数值&lt;/strong&gt;的请求数不能超过5&lt;/p&gt;
&lt;h3 id=&#34;242热点参数限流&#34;&gt;2.4.2.热点参数限流&lt;/h3&gt;
&lt;p&gt;刚才的配置中，对查询商品这个接口的所有商品一视同仁，QPS都限定为5.&lt;/p&gt;
&lt;p&gt;而在实际开发中，可能部分商品是热点商品，例如秒杀商品，我们希望这部分商品的QPS限制与其它商品不一样，高一些。那就需要配置热点参数限流的高级选项了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115717523.png&#34;
	width=&#34;704&#34;
	height=&#34;312&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115717523_hube81ec5c201db6cf8257d19ca18d0c20_45550_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716115717523_hube81ec5c201db6cf8257d19ca18d0c20_45550_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716115717523&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;541px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;结合上一个配置，这里的含义是对0号的long类型参数限流，每1秒相同参数的QPS不能超过5，有两个例外：&lt;/p&gt;
&lt;p&gt;•如果参数值是100，则每1秒允许的QPS为10&lt;/p&gt;
&lt;p&gt;•如果参数值是101，则每1秒允许的QPS为15&lt;/p&gt;
&lt;h3 id=&#34;244案例&#34;&gt;2.4.4.案例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;案例需求&lt;/strong&gt;：给/order/{orderId}这个资源添加热点参数限流，规则如下：&lt;/p&gt;
&lt;p&gt;•默认的热点参数规则是每1秒请求量不超过2&lt;/p&gt;
&lt;p&gt;•给102这个参数设置例外：每1秒请求量不超过4&lt;/p&gt;
&lt;p&gt;•给103这个参数设置例外：每1秒请求量不超过10&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：热点参数限流对默认的SpringMVC资源无效，需要利用@SentinelResource注解标记资源&lt;/p&gt;
&lt;h4 id=&#34;1标记资源&#34;&gt;1）标记资源&lt;/h4&gt;
&lt;p&gt;给order-service中的OrderController中的/order/{orderId}资源添加注解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120033572.png&#34;
	width=&#34;1113&#34;
	height=&#34;449&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120033572_hu837edbeb31e526e972da2bbba8b581b7_104429_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120033572_hu837edbeb31e526e972da2bbba8b581b7_104429_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120033572&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;594px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2热点参数限流规则&#34;&gt;2）热点参数限流规则&lt;/h4&gt;
&lt;p&gt;访问该接口，可以看到我们标记的hot资源出现了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120208509.png&#34;
	width=&#34;830&#34;
	height=&#34;210&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120208509_hu8f5c2855b94b98d52418f2051541329f_14668_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120208509_hu8f5c2855b94b98d52418f2051541329f_14668_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120208509&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;395&#34;
		data-flex-basis=&#34;948px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里不要点击hot后面的按钮，页面有BUG&lt;/p&gt;
&lt;p&gt;点击左侧菜单中&lt;strong&gt;热点规则&lt;/strong&gt;菜单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120319009.png&#34;
	width=&#34;1914&#34;
	height=&#34;645&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120319009_hu0469d8a57c0e8d30b8c22d83c506979b_156894_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120319009_hu0469d8a57c0e8d30b8c22d83c506979b_156894_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120319009&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;296&#34;
		data-flex-basis=&#34;712px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;点击新增，填写表单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120536714.png&#34;
	width=&#34;833&#34;
	height=&#34;864&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120536714_hu4ecc3ee1a5cbffe9c7df5617d39ac916_132928_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120536714_hu4ecc3ee1a5cbffe9c7df5617d39ac916_132928_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120536714&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;231px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;3jmeter测试&#34;&gt;3）Jmeter测试&lt;/h4&gt;
&lt;p&gt;选择《热点参数限流 QPS1》：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120754527.png&#34;
	width=&#34;900&#34;
	height=&#34;308&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120754527_hue58afdc47fd7d4274acb40037f65b2a0_33038_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120754527_hue58afdc47fd7d4274acb40037f65b2a0_33038_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120754527&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;292&#34;
		data-flex-basis=&#34;701px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里发起请求的QPS为5.&lt;/p&gt;
&lt;p&gt;包含3个http请求：&lt;/p&gt;
&lt;p&gt;普通参数，QPS阈值为2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120840501.png&#34;
	width=&#34;893&#34;
	height=&#34;135&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120840501_hue0f4e6fb3f998a0749dfd90137a04597_14230_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120840501_hue0f4e6fb3f998a0749dfd90137a04597_14230_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120840501&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;661&#34;
		data-flex-basis=&#34;1587px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121105567.png&#34;
	width=&#34;639&#34;
	height=&#34;462&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121105567_hub54d8c30fe333380fabd124c4a3a07c0_102744_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121105567_hub54d8c30fe333380fabd124c4a3a07c0_102744_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716121105567&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;331px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;例外项，QPS阈值为4&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120900365.png&#34;
	width=&#34;913&#34;
	height=&#34;147&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120900365_huc8a925eca2b55652f41ec002412141b2_17017_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120900365_huc8a925eca2b55652f41ec002412141b2_17017_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120900365&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;621&#34;
		data-flex-basis=&#34;1490px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121201630.png&#34;
	width=&#34;686&#34;
	height=&#34;331&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121201630_hu35c68dfbf4e775c866683298f83d54d0_83319_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121201630_hu35c68dfbf4e775c866683298f83d54d0_83319_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716121201630&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;497px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;例外项，QPS阈值为10&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120919131.png&#34;
	width=&#34;800&#34;
	height=&#34;148&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120919131_hu014d7420b65a811f5267db213f5766db_17037_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716120919131_hu014d7420b65a811f5267db213f5766db_17037_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716120919131&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;540&#34;
		data-flex-basis=&#34;1297px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121220305.png&#34;
	width=&#34;640&#34;
	height=&#34;339&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121220305_hua66c33754ce3d68c6f9bb324658e391f_81680_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716121220305_hua66c33754ce3d68c6f9bb324658e391f_81680_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716121220305&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;453px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;3隔离和降级&#34;&gt;3.隔离和降级&lt;/h1&gt;
&lt;p&gt;限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。&lt;/p&gt;
&lt;p&gt;而要将这些故障控制在一定范围，避免雪崩，就要靠&lt;strong&gt;线程隔离&lt;/strong&gt;（舱壁模式）和&lt;strong&gt;熔断降级&lt;/strong&gt;手段了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程隔离&lt;/strong&gt;之前讲到过：调用者在调用服务提供者时，给每个调用的请求分配独立线程池，出现故障时，最多消耗这个线程池内资源，避免把调用者的所有资源耗尽。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173215243.png&#34;
	width=&#34;765&#34;
	height=&#34;419&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173215243_hua8e5f7fd9833218583c4b8f208f9e6fd_25086_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173215243_hua8e5f7fd9833218583c4b8f208f9e6fd_25086_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715173215243&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;熔断降级&lt;/strong&gt;：是在调用方这边加入断路器，统计对服务提供者的调用，如果调用的失败比例过高，则熔断该业务，不允许访问该服务的提供者了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173428073.png&#34;
	width=&#34;585&#34;
	height=&#34;463&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173428073_hu71eec2b1ffa67c5490e49f031c4d83f3_23263_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210715173428073_hu71eec2b1ffa67c5490e49f031c4d83f3_23263_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210715173428073&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，不管是线程隔离还是熔断降级，都是对&lt;strong&gt;客户端&lt;/strong&gt;（调用方）的保护。需要在&lt;strong&gt;调用方&lt;/strong&gt; 发起远程调用时做线程隔离、或者服务熔断。&lt;/p&gt;
&lt;p&gt;而我们的微服务远程调用都是基于Feign来完成的，因此我们需要将Feign与Sentinel整合，在Feign里面实现线程隔离和服务熔断。&lt;/p&gt;
&lt;h2 id=&#34;31feignclient整合sentinel&#34;&gt;3.1.FeignClient整合Sentinel&lt;/h2&gt;
&lt;p&gt;SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel。&lt;/p&gt;
&lt;p&gt;注意: OpenFeign和Sentinel都要使用父POM中spring-cloud-alibaba-dependecies规定好的版本,如果没有锁定版本,那么我们写和spring-cloud-alibaba-dependecies一致版本即可&lt;/p&gt;
&lt;h3 id=&#34;311修改配置开启sentinel功能&#34;&gt;3.1.1.修改配置，开启sentinel功能&lt;/h3&gt;
&lt;p&gt;修改OrderService的application.yml文件，开启Feign的Sentinel功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;feign&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;sentinel&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 开启feign对sentinel的支持&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;312编写失败降级逻辑&#34;&gt;3.1.2.编写失败降级逻辑&lt;/h3&gt;
&lt;p&gt;业务失败后，不能直接报错，而应该返回用户一个友好提示或者默认结果，这个就是失败降级逻辑。&lt;/p&gt;
&lt;p&gt;给FeignClient编写失败后的降级逻辑&lt;/p&gt;
&lt;p&gt;①方式一：FallbackClass，无法对远程调用的异常做处理&lt;/p&gt;
&lt;p&gt;②方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种&lt;/p&gt;
&lt;p&gt;这里我们演示方式二的失败降级处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤一&lt;/strong&gt;：在feing-api项目中定义类，实现FallbackFactory：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716122403502.png&#34;
	width=&#34;539&#34;
	height=&#34;405&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716122403502_hufd715cbeb8b09317c682d8e393b3e2ab_34977_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716122403502_hufd715cbeb8b09317c682d8e393b3e2ab_34977_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716122403502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; cn.itcast.feign.clients.fallback&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cn.itcast.feign.clients.UserClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cn.itcast.feign.pojo.User&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; feign.hystrix.FallbackFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lombok.extern.slf4j.Slf4j&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Slf4j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserClientFallbackFactory&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; FallbackFactory&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UserClient&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; UserClient &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable throwable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UserClient&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; User &lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Long id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;查询用户异常&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; throwable&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;步骤二&lt;/strong&gt;：在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; UserClientFallbackFactory &lt;span style=&#34;color:#a6e22e&#34;&gt;userClientFallbackFactory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UserClientFallbackFactory&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;步骤三&lt;/strong&gt;：在feing-api项目中的UserClient接口中使用UserClientFallbackFactory：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cn.itcast.feign.clients.fallback.UserClientFallbackFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cn.itcast.feign.pojo.User&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.cloud.openfeign.FeignClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.GetMapping&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.PathVariable&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FeignClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userservice&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; fallbackFactory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UserClientFallbackFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/{id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User &lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Long id&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启后，访问一次订单查询业务，然后查看sentinel控制台，可以看到新的簇点链路：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123705780.png&#34;
	width=&#34;1036&#34;
	height=&#34;392&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123705780_hud1f6717ed47fdce353bdbe71ea089ca5_86638_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123705780_hud1f6717ed47fdce353bdbe71ea089ca5_86638_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716123705780&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;634px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;313总结&#34;&gt;3.1.3.总结&lt;/h3&gt;
&lt;p&gt;Sentinel支持的雪崩解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程隔离（仓壁模式）&lt;/li&gt;
&lt;li&gt;降级熔断&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feign整合Sentinel的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在application.yml中配置：feign.sentienl.enable=true&lt;/li&gt;
&lt;li&gt;给FeignClient编写FallbackFactory并注册为Bean&lt;/li&gt;
&lt;li&gt;将FallbackFactory配置到FeignClient&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32线程隔离舱壁模式&#34;&gt;3.2.线程隔离（舱壁模式）&lt;/h2&gt;
&lt;h3 id=&#34;321线程隔离的实现方式&#34;&gt;3.2.1.线程隔离的实现方式&lt;/h3&gt;
&lt;p&gt;线程隔离有两种方式实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程池隔离&lt;/li&gt;
&lt;li&gt;信号量隔离（Sentinel默认采用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123036937.png&#34;
	width=&#34;929&#34;
	height=&#34;776&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123036937_hud5b13e1c25afd351a30d2dc6f5c0f698_78624_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123036937_hud5b13e1c25afd351a30d2dc6f5c0f698_78624_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716123036937&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程池隔离&lt;/strong&gt;：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信号量隔离&lt;/strong&gt;：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。&lt;/p&gt;
&lt;p&gt;两者的优缺点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123240518.png&#34;
	width=&#34;1425&#34;
	height=&#34;710&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123240518_hu53a8ad44802477bb609dd783aad66433_137013_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123240518_hu53a8ad44802477bb609dd783aad66433_137013_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716123240518&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;481px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;322sentinel的线程隔离&#34;&gt;3.2.2.sentinel的线程隔离&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;用法说明&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;在添加限流规则时，可以选择两种阈值类型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123411217.png&#34;
	width=&#34;702&#34;
	height=&#34;218&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123411217_hu90bd96cd92badd679af68469c937d995_27906_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123411217_hu90bd96cd92badd679af68469c937d995_27906_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716123411217&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;322&#34;
		data-flex-basis=&#34;772px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QPS：就是每秒的请求数，在快速入门中已经演示过&lt;/li&gt;
&lt;li&gt;线程数：是该资源能使用用的tomcat线程数的最大值。也就是通过限制线程数量，实现&lt;strong&gt;线程隔离&lt;/strong&gt;（舱壁模式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;案例需求&lt;/strong&gt;：给 order-service服务中的UserClient的查询用户接口设置流控规则，线程数不能超过 2。然后利用jemeter测试。&lt;/p&gt;
&lt;h4 id=&#34;1配置隔离规则&#34;&gt;1）配置隔离规则&lt;/h4&gt;
&lt;p&gt;选择feign接口后面的流控按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123831992.png&#34;
	width=&#34;1364&#34;
	height=&#34;204&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123831992_hu0dd8bfcbe00f09278d44702c71b9f404_38683_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123831992_hu0dd8bfcbe00f09278d44702c71b9f404_38683_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716123831992&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;668&#34;
		data-flex-basis=&#34;1604px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;填写表单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123936844.png&#34;
	width=&#34;838&#34;
	height=&#34;487&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123936844_hu9313880292953fcb4630224b423a5a44_69160_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716123936844_hu9313880292953fcb4630224b423a5a44_69160_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716123936844&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2jmeter测试-2&#34;&gt;2）Jmeter测试&lt;/h4&gt;
&lt;p&gt;选择《阈值类型-线程数&amp;lt;2》：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716124229894.png&#34;
	width=&#34;981&#34;
	height=&#34;307&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716124229894_hua69cc7f02a92028f48b81c2b236f0343_33305_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716124229894_hua69cc7f02a92028f48b81c2b236f0343_33305_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716124229894&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;319&#34;
		data-flex-basis=&#34;766px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一次发生10个请求，有较大概率并发线程数超过2，而超出的请求会走之前定义的失败降级逻辑。&lt;/p&gt;
&lt;p&gt;查看运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716124147820.png&#34;
	width=&#34;1059&#34;
	height=&#34;369&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716124147820_hua4825203170a038de306072cebf58249_127421_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716124147820_hua4825203170a038de306072cebf58249_127421_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716124147820&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;286&#34;
		data-flex-basis=&#34;688px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;发现虽然结果都是通过了，不过部分请求得到的响应是降级返回的null信息。&lt;/p&gt;
&lt;h3 id=&#34;323总结&#34;&gt;3.2.3.总结&lt;/h3&gt;
&lt;p&gt;线程隔离的两种手段是？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号量隔离&lt;/li&gt;
&lt;li&gt;线程池隔离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号量隔离的特点是？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于计数器模式，简单，开销小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程池隔离的特点是？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于线程池模式，有额外开销，但隔离控制更强&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33熔断降级&#34;&gt;3.3.熔断降级&lt;/h2&gt;
&lt;p&gt;熔断降级是解决雪崩问题的重要手段。其思路是由&lt;strong&gt;断路器&lt;/strong&gt;统计服务调用的异常比例、慢请求比例，如果超出阈值则会&lt;strong&gt;熔断&lt;/strong&gt;该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。&lt;/p&gt;
&lt;p&gt;断路器控制熔断和放行是通过状态机来完成的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716130958518.png&#34;
	width=&#34;1421&#34;
	height=&#34;474&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716130958518_hu051ee21e2da3e5c7edb0ecb816caba45_44379_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716130958518_hu051ee21e2da3e5c7edb0ecb816caba45_44379_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716130958518&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;299&#34;
		data-flex-basis=&#34;719px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;状态机包括三个状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;closed：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态&lt;/li&gt;
&lt;li&gt;open：打开状态，服务调用被&lt;strong&gt;熔断&lt;/strong&gt;，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态5秒后会进入half-open状态&lt;/li&gt;
&lt;li&gt;half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。
&lt;ul&gt;
&lt;li&gt;请求成功：则切换到closed状态&lt;/li&gt;
&lt;li&gt;请求失败：则切换到open状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;断路器熔断策略有三种：慢调用、异常比例、异常数&lt;/p&gt;
&lt;h3 id=&#34;331慢调用&#34;&gt;3.3.1.慢调用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;慢调用&lt;/strong&gt;：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716145934347.png&#34;
	width=&#34;673&#34;
	height=&#34;284&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716145934347_huc34eb2d44bf6ee0418ad4d80a1c35d4d_43132_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716145934347_huc34eb2d44bf6ee0418ad4d80a1c35d4d_43132_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716145934347&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;568px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;解读：RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次，并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求：给 UserClient的查询用户接口设置降级规则，慢调用的RT阈值为50ms，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5&lt;/p&gt;
&lt;h4 id=&#34;1设置慢调用&#34;&gt;1）设置慢调用&lt;/h4&gt;
&lt;p&gt;修改user-service中的/user/{id}这个接口的业务。通过休眠模拟一个延迟时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150234787.png&#34;
	width=&#34;925&#34;
	height=&#34;353&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150234787_hu904d744a9e99d79881aae455f5dcf96a_111177_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150234787_hu904d744a9e99d79881aae455f5dcf96a_111177_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716150234787&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;628px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;此时，orderId=101的订单，关联的是id为1的用户，调用时长为60ms：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150510956.png&#34;
	width=&#34;1677&#34;
	height=&#34;894&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150510956_hu39ed10b4e71934df416c976d60fc35ec_199096_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150510956_hu39ed10b4e71934df416c976d60fc35ec_199096_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716150510956&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;450px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;orderId=102的订单，关联的是id为2的用户，调用时长为非常短；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150605208.png&#34;
	width=&#34;1695&#34;
	height=&#34;901&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150605208_hu4b65fa7fd79bd290d219a8715809280b_216179_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150605208_hu4b65fa7fd79bd290d219a8715809280b_216179_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716150605208&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2设置熔断规则&#34;&gt;2）设置熔断规则&lt;/h4&gt;
&lt;p&gt;下面，给feign接口设置降级规则：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150654094.png&#34;
	width=&#34;1542&#34;
	height=&#34;122&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150654094_hu29d54801e160f5b553b2934cddd7d637_33658_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150654094_hu29d54801e160f5b553b2934cddd7d637_33658_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716150654094&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1263&#34;
		data-flex-basis=&#34;3033px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;规则：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150740434.png&#34;
	width=&#34;833&#34;
	height=&#34;422&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150740434_hu2b2c2933dd33cc3f39f6d5d49cd3a444_66187_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150740434_hu2b2c2933dd33cc3f39f6d5d49cd3a444_66187_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716150740434&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;473px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;超过50ms的请求都会被认为是慢请求&lt;/p&gt;
&lt;h4 id=&#34;3测试&#34;&gt;3）测试&lt;/h4&gt;
&lt;p&gt;在浏览器访问：http://localhost:8088/order/101，快速刷新5次，可以发现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150911004.png&#34;
	width=&#34;1715&#34;
	height=&#34;888&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150911004_hu230e24068babafc01541b46336f9e303_203407_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150911004_hu230e24068babafc01541b46336f9e303_203407_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716150911004&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;193&#34;
		data-flex-basis=&#34;463px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;触发了熔断，请求时长缩短至5ms，快速失败了，并且走降级逻辑，返回的null&lt;/p&gt;
&lt;p&gt;在浏览器访问：http://localhost:8088/order/102，竟然也被熔断了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151107785.png&#34;
	width=&#34;1685&#34;
	height=&#34;841&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151107785_hu9e046f8e4e609276a235f70f0913cc88_193483_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151107785_hu9e046f8e4e609276a235f70f0913cc88_193483_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716151107785&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;332异常比例异常数&#34;&gt;3.3.2.异常比例、异常数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;异常比例或异常数&lt;/strong&gt;：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。&lt;/p&gt;
&lt;p&gt;例如，一个异常比例设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716131430682.png&#34;
	width=&#34;511&#34;
	height=&#34;247&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716131430682_hue5ddb60fb6d7d56e7a4d305717ce4e5c_29522_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716131430682_hue5ddb60fb6d7d56e7a4d305717ce4e5c_29522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716131430682&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;496px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.4，则触发熔断。&lt;/p&gt;
&lt;p&gt;一个异常数设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716131522912.png&#34;
	width=&#34;521&#34;
	height=&#34;247&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716131522912_hu845c2d28b94861479b029c9316118fbf_28787_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716131522912_hu845c2d28b94861479b029c9316118fbf_28787_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716131522912&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;506px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于2次，则触发熔断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求：给 UserClient的查询用户接口设置降级规则，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5s&lt;/p&gt;
&lt;h4 id=&#34;1设置异常请求&#34;&gt;1）设置异常请求&lt;/h4&gt;
&lt;p&gt;首先，修改user-service中的/user/{id}这个接口的业务。手动抛出异常，以触发异常比例的熔断：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151348183.png&#34;
	width=&#34;926&#34;
	height=&#34;330&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151348183_hucb5797d91aa04452585450b7b078e881_128469_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151348183_hucb5797d91aa04452585450b7b078e881_128469_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716151348183&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;673px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;也就是说，id 为 2时，就会触发异常&lt;/p&gt;
&lt;h4 id=&#34;2设置熔断规则-1&#34;&gt;2）设置熔断规则&lt;/h4&gt;
&lt;p&gt;下面，给feign接口设置降级规则：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150654094.png&#34;
	width=&#34;1542&#34;
	height=&#34;122&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150654094_hu29d54801e160f5b553b2934cddd7d637_33658_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716150654094_hu29d54801e160f5b553b2934cddd7d637_33658_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716150654094&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1263&#34;
		data-flex-basis=&#34;3033px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;规则：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151538785.png&#34;
	width=&#34;835&#34;
	height=&#34;484&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151538785_huef9f7524952156e3010e7e6a82573849_70047_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151538785_huef9f7524952156e3010e7e6a82573849_70047_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716151538785&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;414px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在5次请求中，只要异常比例超过0.4，也就是有2次以上的异常，就会触发熔断。&lt;/p&gt;
&lt;h4 id=&#34;3测试-1&#34;&gt;3）测试&lt;/h4&gt;
&lt;p&gt;在浏览器快速访问：http://localhost:8088/order/102，快速刷新5次，触发熔断：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151722916.png&#34;
	width=&#34;1647&#34;
	height=&#34;845&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151722916_hu55c19ca03eae7d4515331aa41ba69e40_179980_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151722916_hu55c19ca03eae7d4515331aa41ba69e40_179980_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716151722916&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;467px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;此时，我们去访问本来应该正常的103：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151844817.png&#34;
	width=&#34;1692&#34;
	height=&#34;776&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151844817_hu9967256f8ea1b0e9973e4c70fe677bb9_197884_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716151844817_hu9967256f8ea1b0e9973e4c70fe677bb9_197884_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716151844817&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;4授权规则&#34;&gt;4.授权规则&lt;/h1&gt;
&lt;p&gt;授权规则可以对请求方来源做判断和控制。&lt;/p&gt;
&lt;h2 id=&#34;41授权规则&#34;&gt;4.1.授权规则&lt;/h2&gt;
&lt;h3 id=&#34;411基本规则&#34;&gt;4.1.1.基本规则&lt;/h3&gt;
&lt;p&gt;授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白名单：来源（origin）在白名单内的调用者允许访问&lt;/li&gt;
&lt;li&gt;黑名单：来源（origin）在黑名单内的调用者不允许访问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击左侧菜单的授权，可以看到授权规则：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716152010750.png&#34;
	width=&#34;672&#34;
	height=&#34;171&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716152010750_hu141f8f117ad316ecf7ea2db50c61f5c2_26953_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716152010750_hu141f8f117ad316ecf7ea2db50c61f5c2_26953_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716152010750&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;392&#34;
		data-flex-basis=&#34;943px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源名：就是受保护的资源，例如/order/{orderId}&lt;/li&gt;
&lt;li&gt;流控应用：是来源者的名单，
&lt;ul&gt;
&lt;li&gt;如果是勾选白名单，则名单中的来源被许可访问。&lt;/li&gt;
&lt;li&gt;如果是勾选黑名单，则名单中的来源被禁止访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716152349191.png&#34;
	width=&#34;901&#34;
	height=&#34;244&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716152349191_hue2615d099a6f05c918957fbae9c5c93d_23686_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716152349191_hue2615d099a6f05c918957fbae9c5c93d_23686_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716152349191&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;369&#34;
		data-flex-basis=&#34;886px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们允许请求从gateway到order-service，不允许浏览器访问order-service，那么白名单中就要填写&lt;strong&gt;网关的来源名称（origin）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;412如何获取origin&#34;&gt;4.1.2.如何获取origin&lt;/h3&gt;
&lt;p&gt;Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RequestOriginParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 从请求request对象中获取origin，获取方式自定义
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String &lt;span style=&#34;color:#a6e22e&#34;&gt;parseOrigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个方法的作用就是从request对象中，获取请求者的origin值并返回。&lt;/p&gt;
&lt;p&gt;默认情况下，sentinel不管请求者从哪里来，返回值永远是default，也就是说一切请求的来源都被认为是一样的值default。&lt;/p&gt;
&lt;p&gt;因此，我们需要自定义这个接口的实现，让&lt;strong&gt;不同的请求，返回不同的origin&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如order-service服务中，我们定义一个RequestOriginParser的实现类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; cn.itcast.order.sentinel&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.RequestOriginParser&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.util.StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.servlet.http.HttpServletRequest&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HeaderOriginParser&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; RequestOriginParser &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;parseOrigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1.获取请求头
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        String origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHeader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;origin&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 2.非空判断
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;origin&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blank&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; origin&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们会尝试从request-header中获取origin值。&lt;/p&gt;
&lt;h3 id=&#34;413给网关添加请求头&#34;&gt;4.1.3.给网关添加请求头&lt;/h3&gt;
&lt;p&gt;既然获取请求origin的方式是从reques-header中获取origin值，我们必须让&lt;strong&gt;所有从gateway路由到微服务的请求都带上origin头&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个需要利用之前学习的一个GatewayFilter来实现，AddRequestHeaderGatewayFilter。&lt;/p&gt;
&lt;p&gt;修改gateway服务中的application.yml，添加一个defaultFilter：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;gateway&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;default-filters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;AddRequestHeader=origin,gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;routes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# ...略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，从gateway路由的所有请求都会带上origin头，值为gateway。而从其它地方到达微服务的请求则没有这个头。&lt;/p&gt;
&lt;h3 id=&#34;414配置授权规则&#34;&gt;4.1.4.配置授权规则&lt;/h3&gt;
&lt;p&gt;接下来，我们添加一个授权规则，放行origin值为gateway的请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153250134.png&#34;
	width=&#34;1570&#34;
	height=&#34;155&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153250134_hu3a770f43c416c28e7cd8cece4ca81e84_54747_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153250134_hu3a770f43c416c28e7cd8cece4ca81e84_54747_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716153250134&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1012&#34;
		data-flex-basis=&#34;2430px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153301069.png&#34;
	width=&#34;698&#34;
	height=&#34;172&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153301069_hu7b28629acdd89b5d839adcc52e4f07f8_20763_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153301069_hu7b28629acdd89b5d839adcc52e4f07f8_20763_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716153301069&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;405&#34;
		data-flex-basis=&#34;973px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;现在，我们直接跳过网关，访问order-service服务：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153348396.png&#34;
	width=&#34;724&#34;
	height=&#34;155&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153348396_hu7b5321fdc4956a1c66dc059fa57d7ff4_41332_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153348396_hu7b5321fdc4956a1c66dc059fa57d7ff4_41332_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716153348396&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;467&#34;
		data-flex-basis=&#34;1121px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通过网关访问：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153434095.png&#34;
	width=&#34;857&#34;
	height=&#34;458&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153434095_huebc9b5f8edfab3213b221dfaef028b2c_95857_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153434095_huebc9b5f8edfab3213b221dfaef028b2c_95857_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716153434095&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;449px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;42自定义异常结果&#34;&gt;4.2.自定义异常结果&lt;/h2&gt;
&lt;p&gt;默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。异常结果都是flow limmiting（限流）。这样不够友好，无法得知是限流还是降级还是授权拦截。&lt;/p&gt;
&lt;h3 id=&#34;421异常类型&#34;&gt;4.2.1.异常类型&lt;/h3&gt;
&lt;p&gt;而如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BlockExceptionHandler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 处理请求被限流、降级、授权拦截时抛出的异常：BlockException
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; HttpServletResponse response&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; BlockException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个方法有三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HttpServletRequest request：request对象&lt;/li&gt;
&lt;li&gt;HttpServletResponse response：response对象&lt;/li&gt;
&lt;li&gt;BlockException e：被sentinel拦截时抛出的异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的BlockException包含多个不同的子类：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;异常&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FlowException&lt;/td&gt;
&lt;td&gt;限流异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParamFlowException&lt;/td&gt;
&lt;td&gt;热点参数限流的异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DegradeException&lt;/td&gt;
&lt;td&gt;降级异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AuthorityException&lt;/td&gt;
&lt;td&gt;授权规则异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SystemBlockException&lt;/td&gt;
&lt;td&gt;系统规则异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;422自定义异常处理&#34;&gt;4.2.2.自定义异常处理&lt;/h3&gt;
&lt;p&gt;下面，我们就在order-service定义一个自定义异常处理类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SentinelExceptionHandler&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; BlockExceptionHandler &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; HttpServletResponse response&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; BlockException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;未知异常&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;429&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; FlowException&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请求被限流了&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; ParamFlowException&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请求被热点参数限流&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; DegradeException&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请求被降级了&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; AuthorityException&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;没有权限访问&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;401&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setContentType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json;charset=utf-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setStatus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;status&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getWriter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{\&amp;#34;msg\&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, \&amp;#34;status\&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启测试，在不同场景下，会返回不同的异常消息.&lt;/p&gt;
&lt;p&gt;限流：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153938887.png&#34;
	width=&#34;556&#34;
	height=&#34;167&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153938887_hu7e41aa86c9e1f26dc227485feab761e4_29456_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716153938887_hu7e41aa86c9e1f26dc227485feab761e4_29456_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716153938887&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;332&#34;
		data-flex-basis=&#34;799px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;授权拦截时：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154012736.png&#34;
	width=&#34;601&#34;
	height=&#34;153&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154012736_hu9cdc9126e800c68174efc3bccd715f5e_32765_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154012736_hu9cdc9126e800c68174efc3bccd715f5e_32765_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716154012736&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;392&#34;
		data-flex-basis=&#34;942px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;5规则持久化&#34;&gt;5.规则持久化&lt;/h1&gt;
&lt;p&gt;现在，sentinel的所有规则都是内存存储，重启后所有规则都会丢失。在生产环境下，我们必须确保这些规则的持久化，避免丢失。&lt;/p&gt;
&lt;h2 id=&#34;51规则管理模式&#34;&gt;5.1.规则管理模式&lt;/h2&gt;
&lt;p&gt;规则是否能持久化，取决于规则管理模式，sentinel支持三种规则管理模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始模式：Sentinel的默认模式，将规则保存在内存，重启服务会丢失。&lt;/li&gt;
&lt;li&gt;pull模式&lt;/li&gt;
&lt;li&gt;push模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;511pull模式&#34;&gt;5.1.1.pull模式&lt;/h3&gt;
&lt;p&gt;pull模式：控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154155238.png&#34;
	width=&#34;932&#34;
	height=&#34;276&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154155238_hu6696237cfb1e3162682b10ae6c8abd00_45511_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154155238_hu6696237cfb1e3162682b10ae6c8abd00_45511_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716154155238&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;337&#34;
		data-flex-basis=&#34;810px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;512push模式&#34;&gt;5.1.2.push模式&lt;/h3&gt;
&lt;p&gt;push模式：控制台将配置规则推送到远程配置中心，例如Nacos。Sentinel客户端监听Nacos，获取配置变更的推送消息，完成本地配置更新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154215456.png&#34;
	width=&#34;754&#34;
	height=&#34;441&#34;
	srcset=&#34;https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154215456_hu1d36d9d7ceae178286568795434b184b_57459_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/springcloudalibaba/assets/image-20210716154215456_hu1d36d9d7ceae178286568795434b184b_57459_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210716154215456&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;410px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;52实现push模式&#34;&gt;5.2.实现push模式&lt;/h2&gt;
&lt;p&gt;详细步骤可以参考课后资料的《sentinel规则持久化》&lt;/p&gt;</description>
        </item>
        <item>
        <title>对象缓存：缓存一致性问题</title>
        <link>https://cheneycqg.github.io/post/cacheconsistencyissues/</link>
        <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/cacheconsistencyissues/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/cacheconsistencyissues/1.jpg" alt="Featured image of post 对象缓存：缓存一致性问题" /&gt;&lt;p&gt;本文转载于
&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/QN3QL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;经典常问面试题：如何确保缓存和数据库的一致性？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对象缓存：缓存一致性问题
很多小伙伴在面试的时候，应该都遇到过类似的问题，如何确保缓存和数据库的一致性？&lt;/p&gt;
&lt;p&gt;如果你对这个问题有过研究，应该可以发现这个问题其实很好回答，如果第一次听到或者第一次遇到这个问题，估计会有点懵，今天我们来聊聊这个话题。&lt;/p&gt;
&lt;h2 id=&#34;1-问题分析&#34;&gt;1. 问题分析&lt;/h2&gt;
&lt;p&gt;首先我们来看看为什么会有这个问题！&lt;/p&gt;
&lt;p&gt;我们在日常开发中，为了提高数据响应速度，可能会将一些热点数据保存在缓存中，这样就不用每次都去数据库中查询了，可以有效提高服务端的响应速度，那么目前我们最常使用的缓存就是 Redis 了。&lt;/p&gt;
&lt;p&gt;用 Redis 做缓存，并不是一说缓存就是 Redis，还是要结合业务的具体情况，我们可以根据不同业务对数据要求的实时性不同，将数据分为三级，以电商项目为例：&lt;/p&gt;
&lt;p&gt;第 1 级：订单数据和支付流水数据：这两块数据对实时性和精确性要求很高，所以一般是不需要添加缓存的，直接操作数据库即可。&lt;/p&gt;
&lt;p&gt;第 2 级：用户相关数据：这些数据和用户相关，具有读多写少的特征，所以我们使用 redis 进行缓存。&lt;/p&gt;
&lt;p&gt;第 3 级：支付配置信息：这些数据和用户无关，具有数据量小，频繁读，几乎不修改的特征，所以我们使用本地内存进行缓存。&lt;/p&gt;
&lt;p&gt;选中合适的数据存入 Redis 之后，接下来，每当要读取数据的时候，就先去 Redis 中看看有没有，如果有就直接返回；如果没有，则去数据库中读取，并且将从数据库中读取到的数据缓存到 Redis 中，大致上就是这样一个流程，读取数据的这个流程实际上是比较清晰也比较简单的，没啥好说的。&lt;/p&gt;
&lt;p&gt;然而，当数据存入缓存之后，如果需要更新的话，往往会来带另外的问题：&lt;/p&gt;
&lt;p&gt;当有数据需要更新的时候，先更新缓存还是先更新数据库？如何确保更新缓存和更新数据库这两个操作的原子性？
更新缓存的时候该怎么更新？修改还是删除？
怎么办？正常来说，我们有四种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先更新缓存，再更新数据库。&lt;/li&gt;
&lt;li&gt;先更新数据库，再更新缓存。&lt;/li&gt;
&lt;li&gt;先淘汰缓存，再更新数据库。&lt;/li&gt;
&lt;li&gt;先更新数据库，再淘汰缓存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到底使用哪种？&lt;/p&gt;
&lt;p&gt;在回答这个问题之前，我们不妨先来看看三个经典的缓存模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cache-Aside&lt;/li&gt;
&lt;li&gt;Read-Through/Write through&lt;/li&gt;
&lt;li&gt;Write Behind&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-cache-aside&#34;&gt;2. Cache-Aside&lt;/h2&gt;
&lt;p&gt;Cache-Aside，中文也叫旁路缓存模式，如果我们能够在项目中采用 Cache-Aside，那么就能够尽可能的解决缓存与数据库数据不一致的问题，注意是尽可能的解决，并无法做到绝对解决。&lt;/p&gt;
&lt;p&gt;Cache-Aside 又分为读缓存和写缓存两种情况，我们分别来看。&lt;/p&gt;
&lt;h3 id=&#34;21-读缓存&#34;&gt;2.1 读缓存&lt;/h3&gt;
&lt;p&gt;先来看一张流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/2.jpg&#34;
	width=&#34;530&#34;
	height=&#34;753&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/2_hufc1b48564a105c601b1e74ba1bf95220_29742_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/2_hufc1b48564a105c601b1e74ba1bf95220_29742_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;168px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;它的流程是这样：&lt;/p&gt;
&lt;p&gt;读取数据。
检查缓存中是否有需要的数据，如果命中缓存（Cache Hit），则直接返回数据。&lt;/p&gt;
&lt;p&gt;如果没有命中缓存，即 Cache Miss，那么就先去访问数据库。
将从数据库中读取到的数据设置到缓存中。
返回数据。
这是 Cache-Aside 的读缓存流程。&lt;/p&gt;
&lt;p&gt;其实对于读缓存的流程而言，大家一般都没什么异议，有异议的主要是写流程，我们继续来看。&lt;/p&gt;
&lt;h3 id=&#34;22-写缓存&#34;&gt;2.2 写缓存&lt;/h3&gt;
&lt;p&gt;先来看一张流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/3.jpg&#34;
	width=&#34;449&#34;
	height=&#34;386&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/3_hu84eb9d8b766b57236a4b782fe65fb618_12672_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/3_hu84eb9d8b766b57236a4b782fe65fb618_12672_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这个写缓存的流程就比较简单，先更新数据库中的数据，然后删除旧的缓存即可。&lt;/p&gt;
&lt;p&gt;流程虽然简单，但是却引伸出来两个问题：&lt;/p&gt;
&lt;p&gt;为什么是删除旧缓存而不是更新旧缓存？&lt;/p&gt;
&lt;p&gt;为什么不先删除旧的缓存，然后再更新数据库？&lt;/p&gt;
&lt;p&gt;我们来分别回答这两个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么是删除旧缓存而不是更新旧缓存？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;更新缓存，说着容易做起来并不容易。
很多时候我们更新缓存并不是简简单单更新一个 Bean。很多时候，我们缓存的都是一些复杂操作或者计算（例如大量联表操作、一些分组计算）的结果，如果不加缓存，不但无法满足高并发量，同时也会给 MySQL 数据库带来巨大的负担。那么对于这样的缓存，更新起来实际上并不容易，此时选择删除缓存效果会更好一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于一些写频繁的应用，如果按照更新缓存-&amp;gt;更新数据库的模式来，比较浪费性能，因为首先写缓存很麻烦，其次每次都要写缓存，但是可能写了十次，只读了一次，读的时候读到的缓存数据是第十次的，前面九次写缓存都是无效的，对于这种情况不如采取先写数据库再删除缓存的策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在多线程环境下，这样的更新策略还有可能会导致数据逻辑错误，来看如下一张流程图：
&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/4.jpg&#34;
	width=&#34;833&#34;
	height=&#34;648&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/4_hudc2d439e0fe34a4c81e0ef6866f66af2_39943_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/4_hudc2d439e0fe34a4c81e0ef6866f66af2_39943_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，有两个并发的线程 A 和 B：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先 A 线程更新了数据库。&lt;/li&gt;
&lt;li&gt;接下来 B 线程更新了数据库。&lt;/li&gt;
&lt;li&gt;由于网络等原因，B 线程先更新了缓存。&lt;/li&gt;
&lt;li&gt;A 线程更新了缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么此时，缓存中保存的数据就是不正确的，而如果采用了删除缓存的方式，就不会发生这种问题了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么不先删除旧的缓存，然后再更新数据库？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个也是考虑到并发请求，假设我们先删除旧的缓存，然后再更新数据库，那么就有可能出现如下这种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/5.jpg&#34;
	width=&#34;843&#34;
	height=&#34;528&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/5_hu362af456d731438141d14ed601ea1591_73572_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/5_hu362af456d731438141d14ed601ea1591_73572_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这个操作是这样的，有两个线程，A 和 B，其中 A 写数据，B 读数据，具体流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 线程首先删除缓存。&lt;/li&gt;
&lt;li&gt;B 线程读取缓存，发现缓存中没有数据。&lt;/li&gt;
&lt;li&gt;B 线程读取数据库。&lt;/li&gt;
&lt;li&gt;B 线程将从数据库中读取到的数据写入缓存。&lt;/li&gt;
&lt;li&gt;A 线程更新数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一套操作下来，我们发现数据库和缓存中的数据不一致了！所以，在 Cache-Aside 中是先更新数据库，再删除缓存。&lt;/p&gt;
&lt;h3 id=&#34;23-延迟双删&#34;&gt;2.3 延迟双删&lt;/h3&gt;
&lt;p&gt;其实无论是先更新数据库再删除缓存，还是先删除缓存再更新数据库，在并发环境下都有可能存在问题：&lt;/p&gt;
&lt;p&gt;假设有 A、B 两个并发请求：&lt;/p&gt;
&lt;p&gt;先更新数据库再删除缓存：当请求 A 更新数据库之后，还未来得及进行缓存清除，此时请求 B 查询到并使用了 Cache 中的旧数据。&lt;/p&gt;
&lt;p&gt;先删除缓存再更新数据库：当请求 A 执行清除缓存后，还未进行数据库更新，此时请求 B 进行查询，查到了旧数据并写入了 Cache。&lt;/p&gt;
&lt;p&gt;当然我们前面已经分析过了，尽量先操作数据库再操作缓存，但是即使这样也还是有可能存在问题，解决问题的办法就是延迟双删。&lt;/p&gt;
&lt;p&gt;延迟双删是这样：先执行缓存清除操作，再执行数据库更新操作，延迟 N 秒之后再执行一次缓存清除操作，这样就不用担心缓存中的数据和数据库中的数据不一致了。&lt;/p&gt;
&lt;p&gt;那么这个延迟 N 秒，N 是多大比较合适呢？一般来说，N 要大于一次写操作的时间，如果延迟时间小于写入缓存的时间，会导致请求 A 已经延迟清除了缓存，但是此时请求 B 缓存还未写入，具体是多少，就要结合自己的业务来统计这个数值了。&lt;/p&gt;
&lt;h3 id=&#34;24-如何确保原子性&#34;&gt;2.4 如何确保原子性&lt;/h3&gt;
&lt;p&gt;但是更新数据库和删除缓存毕竟不是一个原子操作，要是数据库更新完毕后，删除缓存失败了咋办？&lt;/p&gt;
&lt;p&gt;对于这种情况，一种常见的解决方案就是使用消息中间件来实现删除的重试。大家知道，MQ 一般都自带消费失败重试的机制，当我们要删除缓存的时候，就往 MQ 中扔一条消息，缓存服务读取该消息并尝试删除缓存，删除失败了就会自动重试。&lt;/p&gt;
&lt;h2 id=&#34;3-read-throughwrite-through&#34;&gt;3. Read-Through/Write-Through&lt;/h2&gt;
&lt;h3 id=&#34;31-read-through&#34;&gt;3.1 Read-Through&lt;/h3&gt;
&lt;p&gt;这里为了省事，我就不自己画图了，网上找了一张图片，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/6.jpg&#34;
	width=&#34;577&#34;
	height=&#34;732&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/6_hu82c33c9a0cc49bc62a71ded2dfc9abf0_79893_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/6_hu82c33c9a0cc49bc62a71ded2dfc9abf0_79893_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;189px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;乍一看，很多人感觉这和 Cache-Aside 一样呀，没啥区别！是的，单看流程是不太容易看到区别。&lt;/p&gt;
&lt;p&gt;Read-Through 是一种类似于 Cache-Aside 的缓存方法，区别在于，在 Cache-Aside 中，由应用程序决定去读取缓存还是读取数据库，这样就会导致应用程序中出现了很多业务无关的代码；而在 Read-Through 中，相当于多出来了一个中间层 Cache Middleware，由它去读取缓存或者数据库，应用层的代码得到了简化， Spring Cache 中的 @Cacheable 注解，感觉像不像 Read-Through？&lt;/p&gt;
&lt;p&gt;我画一个简单的流程图大家来看下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/7.jpg&#34;
	width=&#34;828&#34;
	height=&#34;546&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/7_hu4e3dbcdfa137ca2665a56579bd8fc574_219572_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/7_hu4e3dbcdfa137ca2665a56579bd8fc574_219572_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;363px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，和 Cache-Aside 相比，其实就相当于是多了一个 Cache Middleware，这样我们在应用程序中就只需要正常的读写数据就行了，并不用管底层的具体逻辑，相当于把缓存相关的代码从应用程序中剥离出来了，应用程序只需要专注于业务就行了。&lt;/p&gt;
&lt;h3 id=&#34;32-write-through&#34;&gt;3.2 Write-Through&lt;/h3&gt;
&lt;p&gt;Write-Through 其实也是差不多，所有的操作都交给 Cache Middleware 来完成，应用程序中就是一句简单的更新就行了，我们来看看流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/8.jpg&#34;
	width=&#34;831&#34;
	height=&#34;411&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/8_hu70df8e4e58800a94e9c9fbb48b03e564_156269_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/8_hu70df8e4e58800a94e9c9fbb48b03e564_156269_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;8&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;485px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在 Write-Through 策略中，所有的写操作都经过 Cache Middleware，每次写入时，Cache Middleware 会将数据存储在 DB 和 Cache 中，这两个操作发生在一个事务中，因此，只有两个都写入成功，一切才会成功。&lt;/p&gt;
&lt;p&gt;这种写数据的优势在于，应用程序只与 Cache Middleware 对话，所以它的代码更加干净和简单。&lt;/p&gt;
&lt;h2 id=&#34;4-write-behind&#34;&gt;4. Write Behind&lt;/h2&gt;
&lt;p&gt;Write-Behind 缓存策略类似于 Write-Through 缓存，应用程序仅与 Cache Middleware 通信，Cache Middleware 会预留一个与应用程序通信的接口。&lt;/p&gt;
&lt;p&gt;Write-Behind 与 Write-Through 最大的区别在于，前者是数据首先写入缓存，一段时间后（或通过其他触发器）再将数据写入 Database，并且这里涉及到的写入是一个异步操作。这种方式下，Cache 和 DB 数据的一致性不强，对一致性要求高的系统要谨慎使用，如果有人在数据尚未写入数据源的情况下直接从数据源获取数据，则可能导致获取过期数据，不过对于频繁写入的场景，这个其实非常适用。&lt;/p&gt;
&lt;p&gt;将数据写入 DB 可以通过多种方式完成：&lt;/p&gt;
&lt;p&gt;一种是收集所有写入操作，然后在某个时间点（例如，当 DB 负载较低时）对数据源进行批量写入。
另一种方法是将写入合并成更小的批次，例如每次收集五个写入操作，然后对数据源进行批量写入。
这个流程图就不想画了，在网上找了一张，小伙伴们参考下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/9.jpg&#34;
	width=&#34;813&#34;
	height=&#34;373&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/9_hu896b29362fd28f71dfddfeaa14d37136_78666_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/9_hu896b29362fd28f71dfddfeaa14d37136_78666_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;9&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;————————————————&lt;/p&gt;
&lt;p&gt;版权声明：本文为CSDN博主「Java糖糖」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/m0_49496327/article/details/124354396&lt;/p&gt;</description>
        </item>
        <item>
        <title>页面缓存：通过ThymeleafViewResolver实现页面缓存</title>
        <link>https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/</link>
        <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/1.jpg" alt="Featured image of post 页面缓存：通过ThymeleafViewResolver实现页面缓存" /&gt;&lt;p&gt;页面缓存：通过ThymeleafViewResolver实现页面缓存,一些高并发的页面可以将整个页面存到缓存中这样就可以不用每次都从数据库查询，解决高并发问题。&lt;/p&gt;
&lt;h1 id=&#34;cache&#34;&gt;Cache&lt;/h1&gt;
&lt;h2 id=&#34;thymeleafviewresolver&#34;&gt;ThymeleafViewResolver&lt;/h2&gt;
&lt;p&gt;各类前端模板引擎的页面展示，发现它们的共性时，都实现了ViewResolver接口，并将实现类注入到Spring容器当中。
以Thymeleaf为例，在它的自动配置类中实现如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Bean
@ConditionalOnMissingBean(name = &amp;quot;thymeleafViewResolver&amp;quot;)
ThymeleafViewResolver thymeleafViewResolver(ThymeleafProperties properties,
	SpringTemplateEngine templateEngine) {
	ThymeleafViewResolver resolver = new ThymeleafViewResolver();
	// ...
	return resolver;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很明显它定义了ThymeleafViewResolver，而该类最终也是实现了ViewResolver接口。
本篇文章就带大家了解一下ViewResolver的功能和在SpringBoot中如何自定义。&lt;/p&gt;
&lt;h3 id=&#34;viewresolver的作用&#34;&gt;&lt;strong&gt;ViewResolver的作用&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ViewResolver的作用就是通过解析ModelAndView，将ModelAndView中的逻辑视图名映射为View对象，并将ModelAndView中的Model取出。&lt;/p&gt;
&lt;p&gt;View在获取到ViewResolver传递的View和Model时，对Model进行渲染，通过View对象找到要展示给用户的物理视图，将渲染后的视图展示给用户。直白的说将就是将数据通过request存储起来，存放在展示给用户的页面中，并将页面呈现给用户。&lt;/p&gt;
&lt;p&gt;实例化的ViewResolver存储在DispatcherServlet的List&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;该段参考于&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/lHtK5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot2.x系列教程（三十五）SpringMVC之ViewResolver及扩展&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;springboot实战&#34;&gt;SpringBoot实战&lt;/h2&gt;
&lt;h3 id=&#34;案例goodscontroller商品页面的并发访问&#34;&gt;案例：GoodsController商品页面的并发访问&lt;/h3&gt;
&lt;h4 id=&#34;页面缓存之前goodscontroller&#34;&gt;页面缓存之前GoodsController&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Controller
@RequestMapping(&amp;quot;/goods&amp;quot;)
public class GoodsController {
    @Autowired
    private ISeckillGoodsService iSeckillGoodsService;

    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;

    @Autowired
    private ThymeleafViewResolver thymeleafViewResolver;
	@RequestMapping(&amp;quot;/toList&amp;quot;)
	public String toList(User user, Model model, HttpServletRequest request){
		//1判断用户是否登录
        if (user == null)
            return &amp;quot;login&amp;quot;;
        model.addAttribute(&amp;quot;user&amp;quot;,user);
        //2查询所有秒杀商品信息
        List&amp;lt;SeckillGoodsVo&amp;gt; list = iSeckillGoodsService.tolist();
        model.addAttribute(&amp;quot;goodsVoList&amp;quot;,list);
        return &amp;quot;goodsList&amp;quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用Jmeter压测结果&lt;/strong&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2.jpg&#34;
	width=&#34;1535&#34;
	height=&#34;865&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/3.jpg&#34;
	width=&#34;1510&#34;
	height=&#34;250&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/3_hu0dfff04a8c8828c7aa9faf8c1468429b_25600_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/3_hu0dfff04a8c8828c7aa9faf8c1468429b_25600_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;604&#34;
		data-flex-basis=&#34;1449px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/4.jpg&#34;
	width=&#34;1508&#34;
	height=&#34;229&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/4_hu6ba576296ddb35f4841cbff7572d36ba_23580_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/4_hu6ba576296ddb35f4841cbff7572d36ba_23580_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;658&#34;
		data-flex-basis=&#34;1580px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/5.jpg&#34;
	width=&#34;1519&#34;
	height=&#34;223&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/5_hu85e88aafd166188f4c13026cea0203bb_23480_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/5_hu85e88aafd166188f4c13026cea0203bb_23480_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;681&#34;
		data-flex-basis=&#34;1634px&#34;
	
&gt;
&lt;strong&gt;吞吐量在1400左右&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;页面缓存之后goodscontroller&#34;&gt;页面缓存之后GoodsController&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Controller
@RequestMapping(&amp;quot;/goods&amp;quot;)
public class GoodsController {
    @Autowired
    private ISeckillGoodsService iSeckillGoodsService;

    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;

    @Autowired
    private ThymeleafViewResolver thymeleafViewResolver;

	@RequestMapping(&amp;quot;/toList&amp;quot;)
	@ResponseBody
	public String toList2(User user, Model model, HttpServletRequest request, HttpServletResponse response){
        //1.判断用户是否登录
        if (user == null)
            throw new GlobalException(RespBeanEnum.LOGIN_NOT_LOGIN);
        //2.从redis中取出页面缓存
        String html = (String) redisTemplate.opsForValue().get(&amp;quot;goodsList&amp;quot;);
        if (!StringUtils.isEmpty(html)) {
            return html;
        }

        model.addAttribute(&amp;quot;user&amp;quot;,user);
        //2查询所有秒杀商品信息
        List&amp;lt;SeckillGoodsVo&amp;gt; list = iSeckillGoodsService.tolist();
        model.addAttribute(&amp;quot;goodsVoList&amp;quot;,list);
        //ViewResolver把数据糅合到一起
        //ThymeleafViewResolver thymeleafViewResolver = new ThymeleafViewResolver();
        //需要一个web的上下文
        WebContext webContext = new WebContext(request,response,request.getServletContext(),request.getLocale(),model.asMap());
        //需要WebContext参数
        html = thymeleafViewResolver.getTemplateEngine().process(&amp;quot;goodsList&amp;quot;,webContext);
        //3.保存到redis
        redisTemplate.opsForValue().set(&amp;quot;goodsList&amp;quot;,html,60, TimeUnit.SECONDS);
        return html;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用Jmeter压测结果&lt;/strong&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2.jpg&#34;
	width=&#34;1535&#34;
	height=&#34;865&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/6.jpg&#34;
	width=&#34;1505&#34;
	height=&#34;259&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/6_hued58b9889fe3f3fd5d047d7dcdbf512f_23083_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/6_hued58b9889fe3f3fd5d047d7dcdbf512f_23083_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;581&#34;
		data-flex-basis=&#34;1394px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/7.jpg&#34;
	width=&#34;1513&#34;
	height=&#34;243&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/7_hu3dffa7d3c6e893e93b05c8628385aa9b_21756_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/7_hu3dffa7d3c6e893e93b05c8628385aa9b_21756_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;622&#34;
		data-flex-basis=&#34;1494px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/8.jpg&#34;
	width=&#34;1504&#34;
	height=&#34;251&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/8_hu033f8d40802776604b016cdafc4c2d24_23642_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/8_hu033f8d40802776604b016cdafc4c2d24_23642_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;8&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;599&#34;
		data-flex-basis=&#34;1438px&#34;
	
&gt;
&lt;strong&gt;吞吐量在3000-5000&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;明显能够看出页面缓存之后，并发效率的提高。&lt;/p&gt;</description>
        </item>
        <item>
        <title>自定义参数解析器，通过SpringMVC自动注入，判断频繁验证问题！如：用户是否登录问题</title>
        <link>https://cheneycqg.github.io/post/handlermethodargumentresolver/</link>
        <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/handlermethodargumentresolver/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/handlermethodargumentresolver/1.png" alt="Featured image of post 自定义参数解析器，通过SpringMVC自动注入，判断频繁验证问题！如：用户是否登录问题" /&gt;&lt;p&gt;自定义参数解析器，通过SpringMVC自动注入，判断频繁验证问题！如：用户是否登录问题&lt;/p&gt;
&lt;h1 id=&#34;springboot&#34;&gt;SpringBoot&lt;/h1&gt;
&lt;h2 id=&#34;参数解析器介绍&#34;&gt;参数解析器介绍&lt;/h2&gt;
&lt;p&gt;参数解析器属于spring-web包中提供的组件，springmvc框架中对应提供了很多参数解析器。例如我们开发的Controller代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RestController
@RequestMapping(&amp;quot;/user&amp;quot;)
public class UserController{
	@PostMapping(&amp;quot;/save&amp;quot;)
	//此处request对象就是通过Springmvc提供的参数解析器帮我们注入的
	public String saveUser(HttpServletRequest request){
    	return &amp;quot;success&amp;quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的saveUser方法中，我们声明了一个类型为HttpServletRequest的参数，这个对象就是通过springmvc提供的ServletRequestMethodArgumentResolver这个参数解析器帮我们注入的。同样如果我们需要使用HttpServletResponse对象，也可以直接在方法上加入这个参数即可，此时springmvc会通过ServletResponseMethodArgumentResolver这个参数解析器帮我们注入。&lt;/p&gt;
&lt;p&gt;在项目开发中我们也可以根据需要自定义参数解析器，需要实现HandlerMethodArgumentResolver接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface HandlerMethodArgumentResolver {
	boolean supportsParameter(MethodParameter var1);

	@Nullable
	Object resolveArgument(MethodParameter var1, 
                        @Nullable ModelAndViewContainer var2, 
                        NativeWebRequest var3, 
                        @Nullable WebDataBinderFactory var4) throws Exception;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到此接口包含两个接口方法：supportsParameter和resolveArgument。&lt;/p&gt;
&lt;p&gt;当supportsParameter方法返回true时，才会调用resolveArgument方法。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/xtvDj&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;自定义参数解析器的使用总结&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;springboot实战&#34;&gt;SpringBoot实战&lt;/h2&gt;
&lt;h3 id=&#34;案例goodscontroller判断用户是否登录&#34;&gt;案例：GoodsController判断用户是否登录&lt;/h3&gt;
&lt;h4 id=&#34;实体类&#34;&gt;实体类&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Data
@EqualsAndHashCode(callSuper = false)
@TableName(&amp;quot;t_user&amp;quot;)
public class User implements Serializable {
	private static final long serialVersionUID = 1L;
    /**
     * 用户ID,手机号码
     */
    private Long id;	
    private String nickname;	
    /**
     * MD5(MD5(pass明文+固定salt)+salt)
     */
    private String password;

    private String salt;
    /**
     * 头像
     */
    private String head;	
    /**
     * 注册时间
     */
    private Date registerDate;	
    /**
     * 最后一次登录事件
     */
    private Date lastLoginDate;	
    /**
     * 登录次数
     */
    private Integer loginCount;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Controller
@RequestMapping(&amp;quot;/goods&amp;quot;)
public class GoodsController {
    @Autowired
    private ISeckillGoodsService iSeckillGoodsService;
    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;
    @RequestMapping(&amp;quot;/toList&amp;quot;)
    public String toList(User user, Model model, HttpServletRequest request){
        //1判断用户是否登录
        if (user == null)
            return &amp;quot;login&amp;quot;;
        model.addAttribute(&amp;quot;user&amp;quot;,user);
        //2查询所有秒杀商品信息
        List&amp;lt;SeckillGoodsVo&amp;gt; list = iSeckillGoodsService.tolist();
        model.addAttribute(&amp;quot;goodsVoList&amp;quot;,list);
        return &amp;quot;goodsList&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在形参上写上User，这样SpringMVC就可以自动注入，将验证后的User返回，只需要判断User是否为null即可。&lt;/p&gt;
&lt;h4 id=&#34;引入依赖&#34;&gt;引入依赖&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义mvcconfig实现webmvcconfigurer接口&#34;&gt;自定义MVCConfig实现WebMvcConfigurer接口&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Component
public class MVCConfig implements WebMvcConfigurer {
	@Autowired
	private UserArgumentResolver userArgumentResolver;
	/**
 	* SpringMVC 提供的Controller的参数解析器
 	* @param resolvers
 	*/
	@Override
	public void addArgumentResolvers(List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers) {
    	boolean add = resolvers.add(userArgumentResolver);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实现WebMvcConfigurer接口，重写addArgumentResolvers方法，就可以将自定义的参数解析器注入&lt;/p&gt;
&lt;h4 id=&#34;自定义userargumentresolver实现handlermethodargumentresolver接口&#34;&gt;自定义UserArgumentResolver实现HandlerMethodArgumentResolver接口&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Component
public class UserArgumentResolver implements HandlerMethodArgumentResolver {
    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;
    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        return parameter.getParameterType() == User.class;
    }

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);
        String uuid = CookieUtil.getCookieValue(request, &amp;quot;token&amp;quot;);
        if (StringUtils.isEmpty(uuid)){
            return null;
        }
	//        Object users = request.getSession().getAttribute(uuid);
	//        if (users == null)
	//            return &amp;quot;login&amp;quot;;
    	String userJson = (String) redisTemplate.opsForValue().get(&amp;quot;user:uuid:&amp;quot; + uuid);
    	if (userJson == null)
        	return null;
    	User user = JsonUtil.jsonStr2Object(userJson, User.class);
    	return user;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后将判断后的User返回，Controller中就可以拿到判断后的User了。&lt;/p&gt;</description>
        </item>
        <item>
        <title>SpringBoot项目Validation组件&#43;全局异常处理进行各种参数验证问题</title>
        <link>https://cheneycqg.github.io/post/validation/</link>
        <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/validation/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/validation/1.jpg" alt="Featured image of post SpringBoot项目Validation组件&#43;全局异常处理进行各种参数验证问题" /&gt;&lt;p&gt;SpringBoot项目Validation组件+全局异常处理进行各种参数验证问题，比如，写登录模块各种条件的判断等等&lt;/p&gt;
&lt;h1 id=&#34;springboot&#34;&gt;SpringBoot&lt;/h1&gt;
&lt;h2 id=&#34;为什么要使用validation组件和valid进行参数验证&#34;&gt;为什么要使用Validation组件和@Valid进行参数验证&lt;/h2&gt;
&lt;p&gt;SpringBoot项目中，会经常写接口类，比如：登录或者注册模块会有大量的校验工作。在写接口时经常要写效验请求参数逻辑，这时候我们会常用做法是写大量的 if 与 if else 类似这样的代码来做判断，如下：
&lt;img src=&#34;https://cheneycqg.github.io/post/validation/2.jpg&#34;
	width=&#34;1049&#34;
	height=&#34;261&#34;
	srcset=&#34;https://cheneycqg.github.io/post/validation/2_hufe4874d73f05ef0d0987cf6aad4786d8_31961_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/validation/2_hufe4874d73f05ef0d0987cf6aad4786d8_31961_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;401&#34;
		data-flex-basis=&#34;964px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这样的代码如果按正常代码逻辑来说，是没有什么问题的，不过按优雅来说，简直糟糕透了。不仅不优雅，而且如果存在大量的验证逻辑，这会使代码看起来乱糟糟，大大降低代码可读性，那么有没有更好的方法能够简化这个过程呢？&lt;/p&gt;
&lt;p&gt;答案当然是有，推荐的是使用 @Valid 注解来帮助我们简化验证逻辑。&lt;/p&gt;
&lt;h2 id=&#34;valid的相关注解&#34;&gt;@Valid的相关注解&lt;/h2&gt;
&lt;p&gt;下面是 @Valid 相关的注解，在实体类中不同的属性上添加不同的注解，就能实现不同数据的效验功能。
&lt;img src=&#34;https://cheneycqg.github.io/post/validation/3.png&#34;
	width=&#34;681&#34;
	height=&#34;549&#34;
	srcset=&#34;https://cheneycqg.github.io/post/validation/3_hub013f0394bfe45497f19d50c43878bfa_80449_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/validation/3_hub013f0394bfe45497f19d50c43878bfa_80449_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;297px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用valid进行参数校验步骤&#34;&gt;使用@Valid进行参数校验步骤&lt;/h2&gt;
&lt;p&gt;整个过程如下图所示，用户访问接口，然后进行参数效验，因为 @Valid 不支持平面的参数效验（直接写在参数中字段的效验）所以基于 GET 请求的参数还是按照原先方式进行效验，而 POST 则可以以实体对象为参数，可以使用 @Valid 方式进行效验。如果效验通过，则进入业务逻辑，否则抛出异常，交由全局异常处理器进行处理。&lt;/p&gt;
&lt;h2 id=&#34;springboot实战&#34;&gt;SpringBoot实战&lt;/h2&gt;
&lt;h3 id=&#34;valid&#34;&gt;@Valid&lt;/h3&gt;
&lt;h4 id=&#34;实体类&#34;&gt;实体类&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	package com.cheney.seckill.vo;

	import com.cheney.seckill.validation.IsMobile;
	import lombok.AllArgsConstructor;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	import org.hibernate.validator.constraints.Length;

	import javax.validation.constraints.NotNull;

	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	public class LoginVo {

		@IsMobile(require = true)
		private String mobile;
		@NotNull
		@Length(min = 32,max = 32)
		private String password;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	@Controller
	@RequestMapping(&amp;quot;/login&amp;quot;)
	public class LoginController {
		@Autowired
		private IUserService iUserService;
		@RequestMapping(&amp;quot;/toLogin&amp;quot;)
		public String toLogin(){
    		return &amp;quot;login&amp;quot;;
		}
	@RequestMapping(&amp;quot;/doLogin&amp;quot;)
	@ResponseBody
	public RespBean doLogin(@Valid LoginVo loginVo, HttpServletRequest request, HttpServletResponse response) throws InterruptedException {
    	RespBean respBean = iUserService.doLogin(loginVo,request,response);
    	Thread.sleep(2000);
    	return respBean;
		}
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意： 形参上必须要加@Valid注解&lt;/p&gt;
&lt;h4 id=&#34;进行测试&#34;&gt;进行测试&lt;/h4&gt;
&lt;h3 id=&#34;自定义校验&#34;&gt;自定义校验&lt;/h3&gt;
&lt;h4 id=&#34;引入validation组件依赖&#34;&gt;引入validation组件依赖&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- validation组件 --&amp;gt; 
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-boot-starter-validation&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义校验注解&#34;&gt;自定义校验注解&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
* 验证手机号
*/
@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {IsMobileValidator.class})
public @interface IsMobile {
   boolean required() default true;
   String message() default &amp;quot;手机号码格式错误&amp;quot;;
   Class&amp;lt;?&amp;gt;[] groups() default {};
   Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义校验注解的校验器&#34;&gt;自定义校验注解的校验器&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 自定义IsMobile注解的校验器
 */
public class IsMobileValidator implements ConstraintValidator&amp;lt;IsMobile,String&amp;gt; {
	private boolean require;
	@Override
	public void initialize(IsMobile constraintAnnotation) {
		require = constraintAnnotation.require();
	}

	@Override
	public boolean isValid(String s, ConstraintValidatorContext constraintValidatorContext) {
		//判断require是否符合手机格式
		if (StringUtils.isEmpty(s)){
			if (require)
			//手机号为空。要求必填
				return false;
			else
			//手机号为空，但是我也不要求必填
				return true;
		}else {
			//1手机号不为空
			return ValidatorUtil.isMobile(s);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义校验规则&#34;&gt;自定义校验规则&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
* 校验工具类
*/
public class ValidatorUtil {
	private static final Pattern mobile_pattern = Pattern.compile(&amp;quot;[1]([3-9])[0-9]{9}$&amp;quot;);
    public static boolean isMobile(String mobile){
  		if (StringUtils.isEmpty(mobile)) {
 			return false;
  		}
  		Matcher matcher = mobile_pattern.matcher(mobile);
  		return matcher.matches();
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;异常处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们知道，系统中异常包括：编译时异常和运行时异常 RuntimeException ，前者通过捕获异常从而获 取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在开发中，不管是 dao层、service层还是controller层，都有可能抛出异常，在Springmvc中，能将所有类型的异常处理,从各处理过程解耦出来，既保证了相关处理过程的功能较单一，也实现了异常信息的统一处理和维护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SpringBoot全局异常处理方式主要两种：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 @ControllerAdvice 和 @ExceptionHandler 注解。&lt;/li&gt;
&lt;li&gt;使用 ErrorController类 来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ControllerAdvice 方式只能处理控制器抛出的异常。此时请求已经进入控制器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ErrorController类 方式可以处理所有的异常，包括未进入控制器的错误，比如404,401等错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果应用中两者共同存在，则 @ControllerAdvice 方式处理控制器抛出的异常,ErrorController类 方式处理未进入控制器的异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@ControllerAdvice 方式可以定义多个拦截方法，拦截不同的异常类，并且可以获取抛出的异常 信息，自由度更大。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;globalexception&#34;&gt;&lt;strong&gt;GlobalException&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 自定义全局异常
 * 我们抛出的所有异常都是该异常
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
public class GlobalException extends RuntimeException{
	private RespBeanEnum respBeanEnum;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;globalexceptionhandler&#34;&gt;&lt;strong&gt;GlobalExceptionHandler&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 全局异常处理器
 */
@RestControllerAdvice
public class GlobalExceptionHandler {
@ExceptionHandler(value = Exception.class)
public RespBean handler(Exception e) throws Exception {
	//将异常转换为RespBean对象
	//异常有很多种。可能是自己的异常，可能是系统的等等
	if (e instanceof GlobalException){
		GlobalException ge = (GlobalException) e;
		return RespBean.error(ge.getRespBeanEnum());
	}else if (e instanceof BindException){
		BindException be = (BindException) e;
		String msg = be.getBindingResult().getAllErrors().get(0).getDefaultMessage();
		return new RespBean(500502L,msg,null);
	}else {
		//throw e;
		return RespBean.error(RespBeanEnum.ERROR);
	}
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就可以省去各种健壮性判断，并且通过全局异常来前端异常提示，而不是一个异常页面。但是对开发中调试bug不太友好，因为没有异常信息。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
