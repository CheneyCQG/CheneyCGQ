<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>SpringBoot on Cheney Site</title>
        <link>https://cheneycqg.github.io/tags/springboot/</link>
        <description>Recent content in SpringBoot on Cheney Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://cheneycqg.github.io/tags/springboot/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>对象缓存：缓存一致性问题</title>
        <link>https://cheneycqg.github.io/post/cacheconsistencyissues/</link>
        <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/cacheconsistencyissues/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/cacheconsistencyissues/1.jpg" alt="Featured image of post 对象缓存：缓存一致性问题" /&gt;&lt;p&gt;本文转载于
&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/QN3QL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;经典常问面试题：如何确保缓存和数据库的一致性？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对象缓存：缓存一致性问题
很多小伙伴在面试的时候，应该都遇到过类似的问题，如何确保缓存和数据库的一致性？&lt;/p&gt;
&lt;p&gt;如果你对这个问题有过研究，应该可以发现这个问题其实很好回答，如果第一次听到或者第一次遇到这个问题，估计会有点懵，今天我们来聊聊这个话题。&lt;/p&gt;
&lt;h2 id=&#34;1-问题分析&#34;&gt;1. 问题分析&lt;/h2&gt;
&lt;p&gt;首先我们来看看为什么会有这个问题！&lt;/p&gt;
&lt;p&gt;我们在日常开发中，为了提高数据响应速度，可能会将一些热点数据保存在缓存中，这样就不用每次都去数据库中查询了，可以有效提高服务端的响应速度，那么目前我们最常使用的缓存就是 Redis 了。&lt;/p&gt;
&lt;p&gt;用 Redis 做缓存，并不是一说缓存就是 Redis，还是要结合业务的具体情况，我们可以根据不同业务对数据要求的实时性不同，将数据分为三级，以电商项目为例：&lt;/p&gt;
&lt;p&gt;第 1 级：订单数据和支付流水数据：这两块数据对实时性和精确性要求很高，所以一般是不需要添加缓存的，直接操作数据库即可。&lt;/p&gt;
&lt;p&gt;第 2 级：用户相关数据：这些数据和用户相关，具有读多写少的特征，所以我们使用 redis 进行缓存。&lt;/p&gt;
&lt;p&gt;第 3 级：支付配置信息：这些数据和用户无关，具有数据量小，频繁读，几乎不修改的特征，所以我们使用本地内存进行缓存。&lt;/p&gt;
&lt;p&gt;选中合适的数据存入 Redis 之后，接下来，每当要读取数据的时候，就先去 Redis 中看看有没有，如果有就直接返回；如果没有，则去数据库中读取，并且将从数据库中读取到的数据缓存到 Redis 中，大致上就是这样一个流程，读取数据的这个流程实际上是比较清晰也比较简单的，没啥好说的。&lt;/p&gt;
&lt;p&gt;然而，当数据存入缓存之后，如果需要更新的话，往往会来带另外的问题：&lt;/p&gt;
&lt;p&gt;当有数据需要更新的时候，先更新缓存还是先更新数据库？如何确保更新缓存和更新数据库这两个操作的原子性？
更新缓存的时候该怎么更新？修改还是删除？
怎么办？正常来说，我们有四种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先更新缓存，再更新数据库。&lt;/li&gt;
&lt;li&gt;先更新数据库，再更新缓存。&lt;/li&gt;
&lt;li&gt;先淘汰缓存，再更新数据库。&lt;/li&gt;
&lt;li&gt;先更新数据库，再淘汰缓存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到底使用哪种？&lt;/p&gt;
&lt;p&gt;在回答这个问题之前，我们不妨先来看看三个经典的缓存模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cache-Aside&lt;/li&gt;
&lt;li&gt;Read-Through/Write through&lt;/li&gt;
&lt;li&gt;Write Behind&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-cache-aside&#34;&gt;2. Cache-Aside&lt;/h2&gt;
&lt;p&gt;Cache-Aside，中文也叫旁路缓存模式，如果我们能够在项目中采用 Cache-Aside，那么就能够尽可能的解决缓存与数据库数据不一致的问题，注意是尽可能的解决，并无法做到绝对解决。&lt;/p&gt;
&lt;p&gt;Cache-Aside 又分为读缓存和写缓存两种情况，我们分别来看。&lt;/p&gt;
&lt;h3 id=&#34;21-读缓存&#34;&gt;2.1 读缓存&lt;/h3&gt;
&lt;p&gt;先来看一张流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/2.jpg&#34;
	width=&#34;530&#34;
	height=&#34;753&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/2_hufc1b48564a105c601b1e74ba1bf95220_29742_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/2_hufc1b48564a105c601b1e74ba1bf95220_29742_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;168px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;它的流程是这样：&lt;/p&gt;
&lt;p&gt;读取数据。
检查缓存中是否有需要的数据，如果命中缓存（Cache Hit），则直接返回数据。&lt;/p&gt;
&lt;p&gt;如果没有命中缓存，即 Cache Miss，那么就先去访问数据库。
将从数据库中读取到的数据设置到缓存中。
返回数据。
这是 Cache-Aside 的读缓存流程。&lt;/p&gt;
&lt;p&gt;其实对于读缓存的流程而言，大家一般都没什么异议，有异议的主要是写流程，我们继续来看。&lt;/p&gt;
&lt;h3 id=&#34;22-写缓存&#34;&gt;2.2 写缓存&lt;/h3&gt;
&lt;p&gt;先来看一张流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/3.jpg&#34;
	width=&#34;449&#34;
	height=&#34;386&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/3_hu84eb9d8b766b57236a4b782fe65fb618_12672_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/3_hu84eb9d8b766b57236a4b782fe65fb618_12672_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这个写缓存的流程就比较简单，先更新数据库中的数据，然后删除旧的缓存即可。&lt;/p&gt;
&lt;p&gt;流程虽然简单，但是却引伸出来两个问题：&lt;/p&gt;
&lt;p&gt;为什么是删除旧缓存而不是更新旧缓存？&lt;/p&gt;
&lt;p&gt;为什么不先删除旧的缓存，然后再更新数据库？&lt;/p&gt;
&lt;p&gt;我们来分别回答这两个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么是删除旧缓存而不是更新旧缓存？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;更新缓存，说着容易做起来并不容易。
很多时候我们更新缓存并不是简简单单更新一个 Bean。很多时候，我们缓存的都是一些复杂操作或者计算（例如大量联表操作、一些分组计算）的结果，如果不加缓存，不但无法满足高并发量，同时也会给 MySQL 数据库带来巨大的负担。那么对于这样的缓存，更新起来实际上并不容易，此时选择删除缓存效果会更好一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于一些写频繁的应用，如果按照更新缓存-&amp;gt;更新数据库的模式来，比较浪费性能，因为首先写缓存很麻烦，其次每次都要写缓存，但是可能写了十次，只读了一次，读的时候读到的缓存数据是第十次的，前面九次写缓存都是无效的，对于这种情况不如采取先写数据库再删除缓存的策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在多线程环境下，这样的更新策略还有可能会导致数据逻辑错误，来看如下一张流程图：
&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/4.jpg&#34;
	width=&#34;833&#34;
	height=&#34;648&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/4_hudc2d439e0fe34a4c81e0ef6866f66af2_39943_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/4_hudc2d439e0fe34a4c81e0ef6866f66af2_39943_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，有两个并发的线程 A 和 B：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先 A 线程更新了数据库。&lt;/li&gt;
&lt;li&gt;接下来 B 线程更新了数据库。&lt;/li&gt;
&lt;li&gt;由于网络等原因，B 线程先更新了缓存。&lt;/li&gt;
&lt;li&gt;A 线程更新了缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么此时，缓存中保存的数据就是不正确的，而如果采用了删除缓存的方式，就不会发生这种问题了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么不先删除旧的缓存，然后再更新数据库？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个也是考虑到并发请求，假设我们先删除旧的缓存，然后再更新数据库，那么就有可能出现如下这种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/5.jpg&#34;
	width=&#34;843&#34;
	height=&#34;528&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/5_hu362af456d731438141d14ed601ea1591_73572_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/5_hu362af456d731438141d14ed601ea1591_73572_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这个操作是这样的，有两个线程，A 和 B，其中 A 写数据，B 读数据，具体流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 线程首先删除缓存。&lt;/li&gt;
&lt;li&gt;B 线程读取缓存，发现缓存中没有数据。&lt;/li&gt;
&lt;li&gt;B 线程读取数据库。&lt;/li&gt;
&lt;li&gt;B 线程将从数据库中读取到的数据写入缓存。&lt;/li&gt;
&lt;li&gt;A 线程更新数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一套操作下来，我们发现数据库和缓存中的数据不一致了！所以，在 Cache-Aside 中是先更新数据库，再删除缓存。&lt;/p&gt;
&lt;h3 id=&#34;23-延迟双删&#34;&gt;2.3 延迟双删&lt;/h3&gt;
&lt;p&gt;其实无论是先更新数据库再删除缓存，还是先删除缓存再更新数据库，在并发环境下都有可能存在问题：&lt;/p&gt;
&lt;p&gt;假设有 A、B 两个并发请求：&lt;/p&gt;
&lt;p&gt;先更新数据库再删除缓存：当请求 A 更新数据库之后，还未来得及进行缓存清除，此时请求 B 查询到并使用了 Cache 中的旧数据。&lt;/p&gt;
&lt;p&gt;先删除缓存再更新数据库：当请求 A 执行清除缓存后，还未进行数据库更新，此时请求 B 进行查询，查到了旧数据并写入了 Cache。&lt;/p&gt;
&lt;p&gt;当然我们前面已经分析过了，尽量先操作数据库再操作缓存，但是即使这样也还是有可能存在问题，解决问题的办法就是延迟双删。&lt;/p&gt;
&lt;p&gt;延迟双删是这样：先执行缓存清除操作，再执行数据库更新操作，延迟 N 秒之后再执行一次缓存清除操作，这样就不用担心缓存中的数据和数据库中的数据不一致了。&lt;/p&gt;
&lt;p&gt;那么这个延迟 N 秒，N 是多大比较合适呢？一般来说，N 要大于一次写操作的时间，如果延迟时间小于写入缓存的时间，会导致请求 A 已经延迟清除了缓存，但是此时请求 B 缓存还未写入，具体是多少，就要结合自己的业务来统计这个数值了。&lt;/p&gt;
&lt;h3 id=&#34;24-如何确保原子性&#34;&gt;2.4 如何确保原子性&lt;/h3&gt;
&lt;p&gt;但是更新数据库和删除缓存毕竟不是一个原子操作，要是数据库更新完毕后，删除缓存失败了咋办？&lt;/p&gt;
&lt;p&gt;对于这种情况，一种常见的解决方案就是使用消息中间件来实现删除的重试。大家知道，MQ 一般都自带消费失败重试的机制，当我们要删除缓存的时候，就往 MQ 中扔一条消息，缓存服务读取该消息并尝试删除缓存，删除失败了就会自动重试。&lt;/p&gt;
&lt;h2 id=&#34;3-read-throughwrite-through&#34;&gt;3. Read-Through/Write-Through&lt;/h2&gt;
&lt;h3 id=&#34;31-read-through&#34;&gt;3.1 Read-Through&lt;/h3&gt;
&lt;p&gt;这里为了省事，我就不自己画图了，网上找了一张图片，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/6.jpg&#34;
	width=&#34;577&#34;
	height=&#34;732&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/6_hu82c33c9a0cc49bc62a71ded2dfc9abf0_79893_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/6_hu82c33c9a0cc49bc62a71ded2dfc9abf0_79893_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;189px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;乍一看，很多人感觉这和 Cache-Aside 一样呀，没啥区别！是的，单看流程是不太容易看到区别。&lt;/p&gt;
&lt;p&gt;Read-Through 是一种类似于 Cache-Aside 的缓存方法，区别在于，在 Cache-Aside 中，由应用程序决定去读取缓存还是读取数据库，这样就会导致应用程序中出现了很多业务无关的代码；而在 Read-Through 中，相当于多出来了一个中间层 Cache Middleware，由它去读取缓存或者数据库，应用层的代码得到了简化， Spring Cache 中的 @Cacheable 注解，感觉像不像 Read-Through？&lt;/p&gt;
&lt;p&gt;我画一个简单的流程图大家来看下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/7.jpg&#34;
	width=&#34;828&#34;
	height=&#34;546&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/7_hu4e3dbcdfa137ca2665a56579bd8fc574_219572_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/7_hu4e3dbcdfa137ca2665a56579bd8fc574_219572_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;363px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，和 Cache-Aside 相比，其实就相当于是多了一个 Cache Middleware，这样我们在应用程序中就只需要正常的读写数据就行了，并不用管底层的具体逻辑，相当于把缓存相关的代码从应用程序中剥离出来了，应用程序只需要专注于业务就行了。&lt;/p&gt;
&lt;h3 id=&#34;32-write-through&#34;&gt;3.2 Write-Through&lt;/h3&gt;
&lt;p&gt;Write-Through 其实也是差不多，所有的操作都交给 Cache Middleware 来完成，应用程序中就是一句简单的更新就行了，我们来看看流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/8.jpg&#34;
	width=&#34;831&#34;
	height=&#34;411&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/8_hu70df8e4e58800a94e9c9fbb48b03e564_156269_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/8_hu70df8e4e58800a94e9c9fbb48b03e564_156269_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;8&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;485px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在 Write-Through 策略中，所有的写操作都经过 Cache Middleware，每次写入时，Cache Middleware 会将数据存储在 DB 和 Cache 中，这两个操作发生在一个事务中，因此，只有两个都写入成功，一切才会成功。&lt;/p&gt;
&lt;p&gt;这种写数据的优势在于，应用程序只与 Cache Middleware 对话，所以它的代码更加干净和简单。&lt;/p&gt;
&lt;h2 id=&#34;4-write-behind&#34;&gt;4. Write Behind&lt;/h2&gt;
&lt;p&gt;Write-Behind 缓存策略类似于 Write-Through 缓存，应用程序仅与 Cache Middleware 通信，Cache Middleware 会预留一个与应用程序通信的接口。&lt;/p&gt;
&lt;p&gt;Write-Behind 与 Write-Through 最大的区别在于，前者是数据首先写入缓存，一段时间后（或通过其他触发器）再将数据写入 Database，并且这里涉及到的写入是一个异步操作。这种方式下，Cache 和 DB 数据的一致性不强，对一致性要求高的系统要谨慎使用，如果有人在数据尚未写入数据源的情况下直接从数据源获取数据，则可能导致获取过期数据，不过对于频繁写入的场景，这个其实非常适用。&lt;/p&gt;
&lt;p&gt;将数据写入 DB 可以通过多种方式完成：&lt;/p&gt;
&lt;p&gt;一种是收集所有写入操作，然后在某个时间点（例如，当 DB 负载较低时）对数据源进行批量写入。
另一种方法是将写入合并成更小的批次，例如每次收集五个写入操作，然后对数据源进行批量写入。
这个流程图就不想画了，在网上找了一张，小伙伴们参考下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/9.jpg&#34;
	width=&#34;813&#34;
	height=&#34;373&#34;
	srcset=&#34;https://cheneycqg.github.io/post/cacheconsistencyissues/9_hu896b29362fd28f71dfddfeaa14d37136_78666_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/cacheconsistencyissues/9_hu896b29362fd28f71dfddfeaa14d37136_78666_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;9&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;————————————————&lt;/p&gt;
&lt;p&gt;版权声明：本文为CSDN博主「Java糖糖」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/m0_49496327/article/details/124354396&lt;/p&gt;</description>
        </item>
        <item>
        <title>页面缓存：通过ThymeleafViewResolver实现页面缓存</title>
        <link>https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/</link>
        <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/1.jpg" alt="Featured image of post 页面缓存：通过ThymeleafViewResolver实现页面缓存" /&gt;&lt;p&gt;页面缓存：通过ThymeleafViewResolver实现页面缓存,一些高并发的页面可以将整个页面存到缓存中这样就可以不用每次都从数据库查询，解决高并发问题。&lt;/p&gt;
&lt;h1 id=&#34;cache&#34;&gt;Cache&lt;/h1&gt;
&lt;h2 id=&#34;thymeleafviewresolver&#34;&gt;ThymeleafViewResolver&lt;/h2&gt;
&lt;p&gt;各类前端模板引擎的页面展示，发现它们的共性时，都实现了ViewResolver接口，并将实现类注入到Spring容器当中。
以Thymeleaf为例，在它的自动配置类中实现如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Bean
@ConditionalOnMissingBean(name = &amp;quot;thymeleafViewResolver&amp;quot;)
ThymeleafViewResolver thymeleafViewResolver(ThymeleafProperties properties,
	SpringTemplateEngine templateEngine) {
	ThymeleafViewResolver resolver = new ThymeleafViewResolver();
	// ...
	return resolver;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很明显它定义了ThymeleafViewResolver，而该类最终也是实现了ViewResolver接口。
本篇文章就带大家了解一下ViewResolver的功能和在SpringBoot中如何自定义。&lt;/p&gt;
&lt;h3 id=&#34;viewresolver的作用&#34;&gt;&lt;strong&gt;ViewResolver的作用&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ViewResolver的作用就是通过解析ModelAndView，将ModelAndView中的逻辑视图名映射为View对象，并将ModelAndView中的Model取出。&lt;/p&gt;
&lt;p&gt;View在获取到ViewResolver传递的View和Model时，对Model进行渲染，通过View对象找到要展示给用户的物理视图，将渲染后的视图展示给用户。直白的说将就是将数据通过request存储起来，存放在展示给用户的页面中，并将页面呈现给用户。&lt;/p&gt;
&lt;p&gt;实例化的ViewResolver存储在DispatcherServlet的List&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;该段参考于&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/lHtK5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot2.x系列教程（三十五）SpringMVC之ViewResolver及扩展&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;springboot实战&#34;&gt;SpringBoot实战&lt;/h2&gt;
&lt;h3 id=&#34;案例goodscontroller商品页面的并发访问&#34;&gt;案例：GoodsController商品页面的并发访问&lt;/h3&gt;
&lt;h4 id=&#34;页面缓存之前goodscontroller&#34;&gt;页面缓存之前GoodsController&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Controller
@RequestMapping(&amp;quot;/goods&amp;quot;)
public class GoodsController {
    @Autowired
    private ISeckillGoodsService iSeckillGoodsService;

    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;

    @Autowired
    private ThymeleafViewResolver thymeleafViewResolver;
	@RequestMapping(&amp;quot;/toList&amp;quot;)
	public String toList(User user, Model model, HttpServletRequest request){
		//1判断用户是否登录
        if (user == null)
            return &amp;quot;login&amp;quot;;
        model.addAttribute(&amp;quot;user&amp;quot;,user);
        //2查询所有秒杀商品信息
        List&amp;lt;SeckillGoodsVo&amp;gt; list = iSeckillGoodsService.tolist();
        model.addAttribute(&amp;quot;goodsVoList&amp;quot;,list);
        return &amp;quot;goodsList&amp;quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用Jmeter压测结果&lt;/strong&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2.jpg&#34;
	width=&#34;1535&#34;
	height=&#34;865&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/3.jpg&#34;
	width=&#34;1510&#34;
	height=&#34;250&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/3_hu0dfff04a8c8828c7aa9faf8c1468429b_25600_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/3_hu0dfff04a8c8828c7aa9faf8c1468429b_25600_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;604&#34;
		data-flex-basis=&#34;1449px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/4.jpg&#34;
	width=&#34;1508&#34;
	height=&#34;229&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/4_hu6ba576296ddb35f4841cbff7572d36ba_23580_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/4_hu6ba576296ddb35f4841cbff7572d36ba_23580_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;658&#34;
		data-flex-basis=&#34;1580px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/5.jpg&#34;
	width=&#34;1519&#34;
	height=&#34;223&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/5_hu85e88aafd166188f4c13026cea0203bb_23480_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/5_hu85e88aafd166188f4c13026cea0203bb_23480_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;681&#34;
		data-flex-basis=&#34;1634px&#34;
	
&gt;
&lt;strong&gt;吞吐量在1400左右&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;页面缓存之后goodscontroller&#34;&gt;页面缓存之后GoodsController&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Controller
@RequestMapping(&amp;quot;/goods&amp;quot;)
public class GoodsController {
    @Autowired
    private ISeckillGoodsService iSeckillGoodsService;

    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;

    @Autowired
    private ThymeleafViewResolver thymeleafViewResolver;

	@RequestMapping(&amp;quot;/toList&amp;quot;)
	@ResponseBody
	public String toList2(User user, Model model, HttpServletRequest request, HttpServletResponse response){
        //1.判断用户是否登录
        if (user == null)
            throw new GlobalException(RespBeanEnum.LOGIN_NOT_LOGIN);
        //2.从redis中取出页面缓存
        String html = (String) redisTemplate.opsForValue().get(&amp;quot;goodsList&amp;quot;);
        if (!StringUtils.isEmpty(html)) {
            return html;
        }

        model.addAttribute(&amp;quot;user&amp;quot;,user);
        //2查询所有秒杀商品信息
        List&amp;lt;SeckillGoodsVo&amp;gt; list = iSeckillGoodsService.tolist();
        model.addAttribute(&amp;quot;goodsVoList&amp;quot;,list);
        //ViewResolver把数据糅合到一起
        //ThymeleafViewResolver thymeleafViewResolver = new ThymeleafViewResolver();
        //需要一个web的上下文
        WebContext webContext = new WebContext(request,response,request.getServletContext(),request.getLocale(),model.asMap());
        //需要WebContext参数
        html = thymeleafViewResolver.getTemplateEngine().process(&amp;quot;goodsList&amp;quot;,webContext);
        //3.保存到redis
        redisTemplate.opsForValue().set(&amp;quot;goodsList&amp;quot;,html,60, TimeUnit.SECONDS);
        return html;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用Jmeter压测结果&lt;/strong&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2.jpg&#34;
	width=&#34;1535&#34;
	height=&#34;865&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/2_hu61758a095ca1a9411b2f30fa4171edba_61649_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/6.jpg&#34;
	width=&#34;1505&#34;
	height=&#34;259&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/6_hued58b9889fe3f3fd5d047d7dcdbf512f_23083_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/6_hued58b9889fe3f3fd5d047d7dcdbf512f_23083_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;581&#34;
		data-flex-basis=&#34;1394px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/7.jpg&#34;
	width=&#34;1513&#34;
	height=&#34;243&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/7_hu3dffa7d3c6e893e93b05c8628385aa9b_21756_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/7_hu3dffa7d3c6e893e93b05c8628385aa9b_21756_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;622&#34;
		data-flex-basis=&#34;1494px&#34;
	
&gt;
&lt;img src=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/8.jpg&#34;
	width=&#34;1504&#34;
	height=&#34;251&#34;
	srcset=&#34;https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/8_hu033f8d40802776604b016cdafc4c2d24_23642_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/pagecachebythymelaefviewresolver/8_hu033f8d40802776604b016cdafc4c2d24_23642_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;8&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;599&#34;
		data-flex-basis=&#34;1438px&#34;
	
&gt;
&lt;strong&gt;吞吐量在3000-5000&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;明显能够看出页面缓存之后，并发效率的提高。&lt;/p&gt;</description>
        </item>
        <item>
        <title>自定义参数解析器，通过SpringMVC自动注入，判断频繁验证问题！如：用户是否登录问题</title>
        <link>https://cheneycqg.github.io/post/handlermethodargumentresolver/</link>
        <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/handlermethodargumentresolver/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/handlermethodargumentresolver/1.png" alt="Featured image of post 自定义参数解析器，通过SpringMVC自动注入，判断频繁验证问题！如：用户是否登录问题" /&gt;&lt;p&gt;自定义参数解析器，通过SpringMVC自动注入，判断频繁验证问题！如：用户是否登录问题&lt;/p&gt;
&lt;h1 id=&#34;springboot&#34;&gt;SpringBoot&lt;/h1&gt;
&lt;h2 id=&#34;参数解析器介绍&#34;&gt;参数解析器介绍&lt;/h2&gt;
&lt;p&gt;参数解析器属于spring-web包中提供的组件，springmvc框架中对应提供了很多参数解析器。例如我们开发的Controller代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RestController
@RequestMapping(&amp;quot;/user&amp;quot;)
public class UserController{
	@PostMapping(&amp;quot;/save&amp;quot;)
	//此处request对象就是通过Springmvc提供的参数解析器帮我们注入的
	public String saveUser(HttpServletRequest request){
    	return &amp;quot;success&amp;quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的saveUser方法中，我们声明了一个类型为HttpServletRequest的参数，这个对象就是通过springmvc提供的ServletRequestMethodArgumentResolver这个参数解析器帮我们注入的。同样如果我们需要使用HttpServletResponse对象，也可以直接在方法上加入这个参数即可，此时springmvc会通过ServletResponseMethodArgumentResolver这个参数解析器帮我们注入。&lt;/p&gt;
&lt;p&gt;在项目开发中我们也可以根据需要自定义参数解析器，需要实现HandlerMethodArgumentResolver接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface HandlerMethodArgumentResolver {
	boolean supportsParameter(MethodParameter var1);

	@Nullable
	Object resolveArgument(MethodParameter var1, 
                        @Nullable ModelAndViewContainer var2, 
                        NativeWebRequest var3, 
                        @Nullable WebDataBinderFactory var4) throws Exception;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到此接口包含两个接口方法：supportsParameter和resolveArgument。&lt;/p&gt;
&lt;p&gt;当supportsParameter方法返回true时，才会调用resolveArgument方法。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/xtvDj&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;自定义参数解析器的使用总结&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;springboot实战&#34;&gt;SpringBoot实战&lt;/h2&gt;
&lt;h3 id=&#34;案例goodscontroller判断用户是否登录&#34;&gt;案例：GoodsController判断用户是否登录&lt;/h3&gt;
&lt;h4 id=&#34;实体类&#34;&gt;实体类&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Data
@EqualsAndHashCode(callSuper = false)
@TableName(&amp;quot;t_user&amp;quot;)
public class User implements Serializable {
	private static final long serialVersionUID = 1L;
    /**
     * 用户ID,手机号码
     */
    private Long id;	
    private String nickname;	
    /**
     * MD5(MD5(pass明文+固定salt)+salt)
     */
    private String password;

    private String salt;
    /**
     * 头像
     */
    private String head;	
    /**
     * 注册时间
     */
    private Date registerDate;	
    /**
     * 最后一次登录事件
     */
    private Date lastLoginDate;	
    /**
     * 登录次数
     */
    private Integer loginCount;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Controller
@RequestMapping(&amp;quot;/goods&amp;quot;)
public class GoodsController {
    @Autowired
    private ISeckillGoodsService iSeckillGoodsService;
    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;
    @RequestMapping(&amp;quot;/toList&amp;quot;)
    public String toList(User user, Model model, HttpServletRequest request){
        //1判断用户是否登录
        if (user == null)
            return &amp;quot;login&amp;quot;;
        model.addAttribute(&amp;quot;user&amp;quot;,user);
        //2查询所有秒杀商品信息
        List&amp;lt;SeckillGoodsVo&amp;gt; list = iSeckillGoodsService.tolist();
        model.addAttribute(&amp;quot;goodsVoList&amp;quot;,list);
        return &amp;quot;goodsList&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在形参上写上User，这样SpringMVC就可以自动注入，将验证后的User返回，只需要判断User是否为null即可。&lt;/p&gt;
&lt;h4 id=&#34;引入依赖&#34;&gt;引入依赖&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义mvcconfig实现webmvcconfigurer接口&#34;&gt;自定义MVCConfig实现WebMvcConfigurer接口&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Component
public class MVCConfig implements WebMvcConfigurer {
	@Autowired
	private UserArgumentResolver userArgumentResolver;
	/**
 	* SpringMVC 提供的Controller的参数解析器
 	* @param resolvers
 	*/
	@Override
	public void addArgumentResolvers(List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers) {
    	boolean add = resolvers.add(userArgumentResolver);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实现WebMvcConfigurer接口，重写addArgumentResolvers方法，就可以将自定义的参数解析器注入&lt;/p&gt;
&lt;h4 id=&#34;自定义userargumentresolver实现handlermethodargumentresolver接口&#34;&gt;自定义UserArgumentResolver实现HandlerMethodArgumentResolver接口&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;@Component
public class UserArgumentResolver implements HandlerMethodArgumentResolver {
    @Autowired
    private RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate;
    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        return parameter.getParameterType() == User.class;
    }

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);
        String uuid = CookieUtil.getCookieValue(request, &amp;quot;token&amp;quot;);
        if (StringUtils.isEmpty(uuid)){
            return null;
        }
	//        Object users = request.getSession().getAttribute(uuid);
	//        if (users == null)
	//            return &amp;quot;login&amp;quot;;
    	String userJson = (String) redisTemplate.opsForValue().get(&amp;quot;user:uuid:&amp;quot; + uuid);
    	if (userJson == null)
        	return null;
    	User user = JsonUtil.jsonStr2Object(userJson, User.class);
    	return user;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后将判断后的User返回，Controller中就可以拿到判断后的User了。&lt;/p&gt;</description>
        </item>
        <item>
        <title>SpringBoot项目Validation组件&#43;全局异常处理进行各种参数验证问题</title>
        <link>https://cheneycqg.github.io/post/validation/</link>
        <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://cheneycqg.github.io/post/validation/</guid>
        <description>&lt;img src="https://cheneycqg.github.io/post/validation/1.jpg" alt="Featured image of post SpringBoot项目Validation组件&#43;全局异常处理进行各种参数验证问题" /&gt;&lt;p&gt;SpringBoot项目Validation组件+全局异常处理进行各种参数验证问题，比如，写登录模块各种条件的判断等等&lt;/p&gt;
&lt;h1 id=&#34;springboot&#34;&gt;SpringBoot&lt;/h1&gt;
&lt;h2 id=&#34;为什么要使用validation组件和valid进行参数验证&#34;&gt;为什么要使用Validation组件和@Valid进行参数验证&lt;/h2&gt;
&lt;p&gt;SpringBoot项目中，会经常写接口类，比如：登录或者注册模块会有大量的校验工作。在写接口时经常要写效验请求参数逻辑，这时候我们会常用做法是写大量的 if 与 if else 类似这样的代码来做判断，如下：
&lt;img src=&#34;https://cheneycqg.github.io/post/validation/2.jpg&#34;
	width=&#34;1049&#34;
	height=&#34;261&#34;
	srcset=&#34;https://cheneycqg.github.io/post/validation/2_hufe4874d73f05ef0d0987cf6aad4786d8_31961_480x0_resize_q75_box.jpg 480w, https://cheneycqg.github.io/post/validation/2_hufe4874d73f05ef0d0987cf6aad4786d8_31961_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;401&#34;
		data-flex-basis=&#34;964px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这样的代码如果按正常代码逻辑来说，是没有什么问题的，不过按优雅来说，简直糟糕透了。不仅不优雅，而且如果存在大量的验证逻辑，这会使代码看起来乱糟糟，大大降低代码可读性，那么有没有更好的方法能够简化这个过程呢？&lt;/p&gt;
&lt;p&gt;答案当然是有，推荐的是使用 @Valid 注解来帮助我们简化验证逻辑。&lt;/p&gt;
&lt;h2 id=&#34;valid的相关注解&#34;&gt;@Valid的相关注解&lt;/h2&gt;
&lt;p&gt;下面是 @Valid 相关的注解，在实体类中不同的属性上添加不同的注解，就能实现不同数据的效验功能。
&lt;img src=&#34;https://cheneycqg.github.io/post/validation/3.png&#34;
	width=&#34;681&#34;
	height=&#34;549&#34;
	srcset=&#34;https://cheneycqg.github.io/post/validation/3_hub013f0394bfe45497f19d50c43878bfa_80449_480x0_resize_box_3.png 480w, https://cheneycqg.github.io/post/validation/3_hub013f0394bfe45497f19d50c43878bfa_80449_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;297px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用valid进行参数校验步骤&#34;&gt;使用@Valid进行参数校验步骤&lt;/h2&gt;
&lt;p&gt;整个过程如下图所示，用户访问接口，然后进行参数效验，因为 @Valid 不支持平面的参数效验（直接写在参数中字段的效验）所以基于 GET 请求的参数还是按照原先方式进行效验，而 POST 则可以以实体对象为参数，可以使用 @Valid 方式进行效验。如果效验通过，则进入业务逻辑，否则抛出异常，交由全局异常处理器进行处理。&lt;/p&gt;
&lt;h2 id=&#34;springboot实战&#34;&gt;SpringBoot实战&lt;/h2&gt;
&lt;h3 id=&#34;valid&#34;&gt;@Valid&lt;/h3&gt;
&lt;h4 id=&#34;实体类&#34;&gt;实体类&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	package com.cheney.seckill.vo;

	import com.cheney.seckill.validation.IsMobile;
	import lombok.AllArgsConstructor;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	import org.hibernate.validator.constraints.Length;

	import javax.validation.constraints.NotNull;

	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	public class LoginVo {

		@IsMobile(require = true)
		private String mobile;
		@NotNull
		@Length(min = 32,max = 32)
		private String password;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	@Controller
	@RequestMapping(&amp;quot;/login&amp;quot;)
	public class LoginController {
		@Autowired
		private IUserService iUserService;
		@RequestMapping(&amp;quot;/toLogin&amp;quot;)
		public String toLogin(){
    		return &amp;quot;login&amp;quot;;
		}
	@RequestMapping(&amp;quot;/doLogin&amp;quot;)
	@ResponseBody
	public RespBean doLogin(@Valid LoginVo loginVo, HttpServletRequest request, HttpServletResponse response) throws InterruptedException {
    	RespBean respBean = iUserService.doLogin(loginVo,request,response);
    	Thread.sleep(2000);
    	return respBean;
		}
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意： 形参上必须要加@Valid注解&lt;/p&gt;
&lt;h4 id=&#34;进行测试&#34;&gt;进行测试&lt;/h4&gt;
&lt;h3 id=&#34;自定义校验&#34;&gt;自定义校验&lt;/h3&gt;
&lt;h4 id=&#34;引入validation组件依赖&#34;&gt;引入validation组件依赖&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- validation组件 --&amp;gt; 
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-boot-starter-validation&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义校验注解&#34;&gt;自定义校验注解&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
* 验证手机号
*/
@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {IsMobileValidator.class})
public @interface IsMobile {
   boolean required() default true;
   String message() default &amp;quot;手机号码格式错误&amp;quot;;
   Class&amp;lt;?&amp;gt;[] groups() default {};
   Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义校验注解的校验器&#34;&gt;自定义校验注解的校验器&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 自定义IsMobile注解的校验器
 */
public class IsMobileValidator implements ConstraintValidator&amp;lt;IsMobile,String&amp;gt; {
	private boolean require;
	@Override
	public void initialize(IsMobile constraintAnnotation) {
		require = constraintAnnotation.require();
	}

	@Override
	public boolean isValid(String s, ConstraintValidatorContext constraintValidatorContext) {
		//判断require是否符合手机格式
		if (StringUtils.isEmpty(s)){
			if (require)
			//手机号为空。要求必填
				return false;
			else
			//手机号为空，但是我也不要求必填
				return true;
		}else {
			//1手机号不为空
			return ValidatorUtil.isMobile(s);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义校验规则&#34;&gt;自定义校验规则&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
* 校验工具类
*/
public class ValidatorUtil {
	private static final Pattern mobile_pattern = Pattern.compile(&amp;quot;[1]([3-9])[0-9]{9}$&amp;quot;);
    public static boolean isMobile(String mobile){
  		if (StringUtils.isEmpty(mobile)) {
 			return false;
  		}
  		Matcher matcher = mobile_pattern.matcher(mobile);
  		return matcher.matches();
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;异常处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们知道，系统中异常包括：编译时异常和运行时异常 RuntimeException ，前者通过捕获异常从而获 取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在开发中，不管是 dao层、service层还是controller层，都有可能抛出异常，在Springmvc中，能将所有类型的异常处理,从各处理过程解耦出来，既保证了相关处理过程的功能较单一，也实现了异常信息的统一处理和维护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SpringBoot全局异常处理方式主要两种：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 @ControllerAdvice 和 @ExceptionHandler 注解。&lt;/li&gt;
&lt;li&gt;使用 ErrorController类 来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ControllerAdvice 方式只能处理控制器抛出的异常。此时请求已经进入控制器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ErrorController类 方式可以处理所有的异常，包括未进入控制器的错误，比如404,401等错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果应用中两者共同存在，则 @ControllerAdvice 方式处理控制器抛出的异常,ErrorController类 方式处理未进入控制器的异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@ControllerAdvice 方式可以定义多个拦截方法，拦截不同的异常类，并且可以获取抛出的异常 信息，自由度更大。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;globalexception&#34;&gt;&lt;strong&gt;GlobalException&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 自定义全局异常
 * 我们抛出的所有异常都是该异常
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
public class GlobalException extends RuntimeException{
	private RespBeanEnum respBeanEnum;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;globalexceptionhandler&#34;&gt;&lt;strong&gt;GlobalExceptionHandler&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 全局异常处理器
 */
@RestControllerAdvice
public class GlobalExceptionHandler {
@ExceptionHandler(value = Exception.class)
public RespBean handler(Exception e) throws Exception {
	//将异常转换为RespBean对象
	//异常有很多种。可能是自己的异常，可能是系统的等等
	if (e instanceof GlobalException){
		GlobalException ge = (GlobalException) e;
		return RespBean.error(ge.getRespBeanEnum());
	}else if (e instanceof BindException){
		BindException be = (BindException) e;
		String msg = be.getBindingResult().getAllErrors().get(0).getDefaultMessage();
		return new RespBean(500502L,msg,null);
	}else {
		//throw e;
		return RespBean.error(RespBeanEnum.ERROR);
	}
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就可以省去各种健壮性判断，并且通过全局异常来前端异常提示，而不是一个异常页面。但是对开发中调试bug不太友好，因为没有异常信息。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
